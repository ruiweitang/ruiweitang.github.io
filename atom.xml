<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦溪笔谈</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-11T11:16:38.707Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>棠哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js基础day06笔记</title>
    <link href="http://yoursite.com/2020/02/10/1-js%E5%9F%BA%E7%A1%80day06%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/10/1-js基础day06笔记/</id>
    <published>2020-02-10T02:00:06.000Z</published>
    <updated>2020-03-11T11:16:38.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/js基础day06部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标（全天模式）"><a href="#学习目标（全天模式）" class="headerlink" title="学习目标（全天模式）"></a>学习目标（全天模式）</h1><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够说出数组对象的3-4个方法</li><li style="list-style: none"><input type="checkbox"> 能够说出数组对象的增删操作</li><li style="list-style: none"><input type="checkbox"> 能够使用数组的排序和翻转操作</li><li style="list-style: none"><input type="checkbox"> 能够说出什么是基本包装类型</li><li style="list-style: none"><input type="checkbox"> 能够说出字符串对象的3-4个方法</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><ul><li><p><strong>时间戳</strong></p><blockquote><p>一般日期打印出来，是字符串的形式</p><p><strong>时间戳则是日期的数字形式</strong>，可以运算</p></blockquote><p><strong>时间戳：</strong>表示距离1970年01月01日00时00分00秒起，过去的总毫秒数</p><p><strong>作用：</strong> 用来计算时间差</p><p><strong>代码：</strong> <code>var date = +new Date();</code></p><ul><li><p>可以统计代码执行的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------获取开始的时间</span></span><br><span class="line"><span class="keyword">var</span> begin = +<span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">// -------------------------------获取结束的时间</span></span><br><span class="line"><span class="keyword">var</span> end = +<span class="keyword">new</span> <span class="built_in">Date</span>();  </span><br><span class="line"><span class="built_in">console</span>.log(end - begin);  <span class="comment">// 计算时间差，可以得出代码的执行时间毫秒数</span></span><br></pre></td></tr></table></figure></li><li><p>倒计时（距离下课的时间）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----------------------------------当前时间</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// ----------------------------------将来需要倒计时的时间</span></span><br><span class="line"><span class="keyword">var</span> future = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-5-20 12:00:00'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------得到时间差——》转换成秒数（小数后忽略）</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">parseInt</span>((future - now) / <span class="number">1000</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------秒数中获取时——》1小时=3600秒</span></span><br><span class="line"><span class="keyword">var</span> hours = <span class="built_in">parseInt</span>(time / <span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------秒数中获取分——》1分钟=60秒, 对所有的分钟数, 对60求余数即可(超过60的进位到小时中了）</span></span><br><span class="line"><span class="keyword">var</span> minutes = <span class="built_in">parseInt</span>(time / <span class="number">60</span>) % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------获取秒数，对秒数求60的余数（超过60的部分进位到分钟去了)</span></span><br><span class="line"><span class="keyword">var</span> seconds = time % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"距离下课还有: "</span> + hours + <span class="string">'小时'</span> + minutes + <span class="string">'分钟'</span> + seconds + <span class="string">'秒'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h2><blockquote><p>js中内置了一个<strong>Array构造函数</strong>，可以用来创建数组对象（万物皆对象），每个对象中也有对应的方法</p></blockquote><ul><li><p><strong>数组转换成字符串：arr.join(字符串分隔符)</strong></p><blockquote><p>作用：<strong>将数组中的每一项拼接成字符串</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法：arr.join(分隔符)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>,<span class="string">'赵六'</span>];</span><br><span class="line"><span class="keyword">var</span> str = arr.join();  <span class="comment">// 不传参数，默认每一项之间以 逗号 进行拼接</span></span><br><span class="line"><span class="keyword">var</span> str = arr.join(<span class="string">"-"</span>);<span class="comment">//按 - 进行拼接</span></span><br><span class="line"><span class="keyword">var</span> str = arr.join(<span class="string">""</span>);<span class="comment">//分隔符为空串，中间就没有分隔符</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><ul><li><p><strong>数组的增删操作：push、pop、unshift、shift</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------------在数组的最后，添加一个或多个项，返回添加后数组的length</span></span><br><span class="line">array.push();</span><br><span class="line"><span class="comment">// -------------------在数组的最后，删除一项，返回删除的项</span></span><br><span class="line">array.pop();</span><br><span class="line"><span class="comment">// --------------------在数组的最前面，添加一个或多个项，返回添加后数组的length</span></span><br><span class="line">array.unshift();</span><br><span class="line"><span class="comment">// ---------------------在数组的最前面，删除一项，返回删除的项</span></span><br><span class="line">array.shift();</span><br></pre></td></tr></table></figure><hr><h5 id="ヾ-๑╹◡╹-ﾉ”-数组的增删操作练习"><a href="#ヾ-๑╹◡╹-ﾉ”-数组的增删操作练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 数组的增删操作练习"></a>ヾ(๑╹◡╹)ﾉ” 数组的增删操作练习</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"刘备"</span>];</span><br><span class="line"><span class="comment">//添加数据后变成：["赵云","马超","刘备","关羽","张飞"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接着删除数据后变成：["关羽","张飞"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习2</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"赵云"</span>,<span class="string">"马超"</span>,<span class="string">"刘备"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>];</span><br><span class="line"><span class="comment">//把数组的最后一个元素变成数组的第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把数组的第一个元素变成数组的最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>数组的翻转与排序：reverse、sort</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------让当前数组反转</span></span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="comment">//-------------------让当前数组排序，默认按照首字符排序</span></span><br><span class="line">arr.sort();</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------sort方法可以传递一个函数作为参数，设置是升序还是降序排序</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// a表示前一项，b表示后一项</span></span><br><span class="line">  <span class="comment">// 如果返回值 &gt;0,则交换位置</span></span><br><span class="line">  <span class="comment">// --------------从小到大升序排列</span></span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">  <span class="comment">//---------------从大到小降序排列</span></span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h5 id="ヾ-๑╹◡╹-ﾉ”-数组的排序练习"><a href="#ヾ-๑╹◡╹-ﾉ”-数组的排序练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 数组的排序练习"></a>ヾ(๑╹◡╹)ﾉ” 数组的排序练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、将[3, 6, 1, 5, 10, 2,11]从小到大排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、将字符串数组按照字符长度从小到大排列——》比较的a.length和b.age</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'bb'</span>, <span class="string">'a'</span>, <span class="string">'dddd'</span>, <span class="string">'ccc'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、将学生数组按照年龄从小到大排列——》比较的a.age和b.age</span></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'zs'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">score</span>: <span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'ls'</span>, <span class="attr">age</span>: <span class="number">38</span>, <span class="attr">score</span>: <span class="number">120</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'ww'</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">score</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'zl'</span>, <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">score</span>: <span class="number">15</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><ul><li><p><strong>数组的合并和截取：concat、slice</strong></p><blockquote><p>数组的合并</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------合并数组，不会改变原数组，会返回一个新的拼接好的数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.concat(arr2);</span><br></pre></td></tr></table></figure><blockquote><p>数组的截取</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"赵云"</span>,<span class="string">"马超"</span>,<span class="string">"刘备"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>];</span><br><span class="line">  <span class="comment">//--------------------------数组的截取，从数组中截取一部分，不会改变原数组，返回截取的新数组</span></span><br><span class="line">  <span class="keyword">var</span> newArr = arr.slice();<span class="comment">// 不传参——》从开始截取到最后，截取整个数组——》相当于复制一份</span></span><br><span class="line">  <span class="keyword">var</span> newArr = arr.slice(begin);<span class="comment">// 从begin（下标）开始，截取到最后，包括begin！！</span></span><br><span class="line">  <span class="keyword">var</span> newArr = arr.slice(begin,end);<span class="comment">// 从begin开始，截取到end，包括begin，不包括end！！！</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>数组的删除、添加、替换：splice</strong></p><blockquote><p>splice可以在数组的任意位置，添加或者删除任意项，会改变原数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------splice 方法可以在数组的任意位置，添加或者删除任一项（会改变原数组）</span></span><br><span class="line">arr.splice(从哪开始删除，删除几个，添加的项<span class="number">1</span>，添加的项<span class="number">2</span>，......)</span><br><span class="line">arr.splice(begin,deleteCount,item1,item2,...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"赵云"</span>,<span class="string">"马超"</span>,<span class="string">"刘备"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>];           </span><br><span class="line">           </span><br><span class="line"><span class="comment">//删除--------------------从下标为1开始删除，删除两项</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加--------------------把第一项、第二项添加到下标2的位置</span></span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'第一项'</span>,<span class="string">'第二项'</span>);<span class="comment">// 添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//替换--------------------把下标2这一项替换成新项（先删除，再添加）</span></span><br><span class="line">  arr.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">'新项'</span>);<span class="comment">// 替换</span></span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="ヾ-๑╹◡╹-ﾉ”-数组的截取与添加练习"><a href="#ヾ-๑╹◡╹-ﾉ”-数组的截取与添加练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 数组的截取与添加练习"></a>ヾ(๑╹◡╹)ﾉ” 数组的截取与添加练习</h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习：</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"赵云"</span>,<span class="string">"马超"</span>,<span class="string">"刘备"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>];</span><br><span class="line"><span class="comment">//1、截取["刘备","关羽"]</span></span><br><span class="line"><span class="comment">//2、在马超后面增加 马腾</span></span><br><span class="line"><span class="comment">//3、删除关羽</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>增删操作，都会改变原数组！！</strong></p></blockquote><hr><ul><li><p><strong>数组查找元素：indexOf、lastIndexOf</strong></p><blockquote><p>查找值在数组中某元素的下标</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------indexOf()——》查找数组中元素第一次出现的下标——》如果找不到，返回-1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">2</span>));<span class="comment">// 查找2在数组中第一次出现的下标</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">100</span>));<span class="comment">// 数组中不存在的值，返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求: 判断 arr 中是否有 赵六</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'张三'</span>, <span class="string">'田七'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>];</span><br><span class="line"><span class="keyword">var</span> index = arr.indexOf(<span class="string">'赵六'</span>);</span><br><span class="line"><span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'没有'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'有赵六, 下标是'</span> + index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------lastIndexOf()——》查找数组中元素最后一次出现的下标——》如果找不到，返回-1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">2</span>));<span class="comment">// 查找2在数组中第一次出现的下标</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">100</span>));<span class="comment">// 数组中不存在的值，返回-1</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>清空数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1、------------------将数组赋值为一个空数组，推荐</span></span><br><span class="line">  arr = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2、-----------------直接修改数组的长度为0</span></span><br><span class="line">  arr.length = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3、-------------------删除数组中的所有元素</span></span><br><span class="line">arr.splice(<span class="number">0</span>,arr.length);<span class="comment">// 从下标0开始，删除arr.length个元素</span></span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="ヾ-๑╹◡╹-ﾉ”-数组的综合练习"><a href="#ヾ-๑╹◡╹-ﾉ”-数组的综合练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 数组的综合练习"></a>ヾ(๑╹◡╹)ﾉ” 数组的综合练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"z"</span>, <span class="string">"a"</span>, <span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"z"</span>, <span class="string">"c"</span>, <span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"x"</span>]</span><br><span class="line"><span class="comment">//1. 找到数组中第一个a出现的位置</span></span><br><span class="line"><span class="comment">//2. 找到数组中最后一个a出现的位置</span></span><br><span class="line"><span class="comment">//3. 找到数组中每一个a出现的位置(遍历——》打印下标)</span></span><br><span class="line"><span class="comment">//4. 数组去重，返回一个新数组</span></span><br><span class="line"><span class="comment">//   1、遍历原数组</span></span><br><span class="line"><span class="comment">//   2、看arr[i] 在 newArr中是否存在，不存在就加入newArr，如果存在，就不加。</span></span><br></pre></td></tr></table></figure><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><blockquote><p><strong>简单数据类型是没有任何属性和方法的</strong>。</p><p>但是为了方便操作基本数据类型，js中还提供了三个特殊的复杂类型：String、Number、Boolean对象。可以使用其中的方法：</p><p><code>Number：    var num = new Number(123);</code></p><p><code>String：    var str = new String(&#39;abc&#39;);</code></p><p> <code>Boolean：   var flag = new Boolean(true);</code></p></blockquote><p><strong>基本包装类型：</strong>把基本类型包装成复杂类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------简单数据类型没有任何的属性和方法</span></span><br><span class="line"><span class="keyword">var</span> str = “abc”;</span><br><span class="line"><span class="comment">//---但是却可以直接使用.length方法——》原因是底层浏览器默认把简单数据类型包装成复杂类型，就可以调用方法了</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><p><strong>基本包装类型的步骤：</strong></p><ol><li>在js中为了操作方便，如果是简单数据类型要获取方法时——》默认转换成复杂数据类型</li><li>变成复杂数据类型之后——》调用其方法，得出结果</li><li>结束时，在还原成简单数据类型</li></ol><h3 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h3><blockquote><p>Number对象是数字的包装类型，数字可以直接使用这些方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11.111111</span>;</span><br><span class="line"><span class="comment">//------------------保留几位小数</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//--------------------转成字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h3 id="Boolean对象"><a href="#Boolean对象" class="headerlink" title="Boolean对象"></a>Boolean对象</h3><blockquote><p>Boolean对象是布尔类型的包装类型。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//-------------------转成字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(flag.toString();)<span class="comment">//底层先转成基本包装类型——》使用方法得到字符串——》还原成简单数据类型</span></span><br></pre></td></tr></table></figure><blockquote><p>undefined和null没有包装类型！！！所以没有方法！！</p></blockquote><hr><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><blockquote><p>字符串可以类似于看做是一个数组（不是真的数组——》伪数组）</p></blockquote><ul><li><p><strong>字符串可以遍历——》字符串不是数组，不是真的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="comment">// 底层会默认转换成 String对象，var str = new String('abcdefg');</span></span><br><span class="line"><span class="comment">//----------------------打印字符串中下标为0的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//-----------------------字符串的遍历（类似于数组）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>查找指定字符的位置：indexOf、lastIndexOf</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------indexOf()——》查找字符第一次出现的下标——》如果找不到，返回-1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abdedba"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(a));<span class="comment">// 查找a在str中第一次出现的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------lastIndexOf()——》查找字符最后一次出现的下标——》如果找不到，返回-1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abdedba"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(a));<span class="comment">// 查找a在str中最后一次出现的下标</span></span><br></pre></td></tr></table></figure></li><li><p><strong>去除字符串首尾的空格：trim</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'      hello world      '</span>;</span><br><span class="line"><span class="comment">//----------------------------去除字符串首尾的空格，中间的不管</span></span><br><span class="line">str = str.trim();<span class="comment">// 返回去除首尾空格之后的字符串，重新赋值给str</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li><li><p><strong>字母大小写转换：toUpperCase、toLowerCase</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">'ZhangSan'</span>;</span><br><span class="line"><span class="comment">//-----------------------------------每个英文字母转换成大写</span></span><br><span class="line"><span class="built_in">console</span>.log(myName.toUpperCase());</span><br><span class="line"><span class="comment">//-----------------------------------每个英文字母转换成小写</span></span><br><span class="line"><span class="built_in">console</span>.log(myName.toLowerCase());</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>字符串拼接与截取：concat、slice、substring、substr</strong></p><blockquote><p>拼接——》+用的最多</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'def'</span>;</span><br><span class="line"><span class="comment">//----------------------拼接+用的最多</span></span><br><span class="line"><span class="built_in">console</span>.log(str1 + str2);</span><br><span class="line"><span class="comment">//------------------------拼接字符串（不用）会返回一个新字符串</span></span><br><span class="line"><span class="keyword">var</span> newStr = str1.concat(str2);</span><br><span class="line"><span class="built_in">console</span>.log(newStr);</span><br></pre></td></tr></table></figure><blockquote><p>字符串的截取</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="comment">//-----------------------slice(begin,end)——》从begin开始，截取到end（有始无终）</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">1</span>, <span class="number">3</span>)); </span><br><span class="line"><span class="comment">//-------------------------subString(begin,end)——》从begin开始，截取到end（有始无终）</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">1</span>, <span class="number">3</span>)); </span><br><span class="line"><span class="comment">//------------------------subStr(begin,length)——》从begin开始，截取length个，包括begin</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">1</span>, <span class="number">3</span>));  <span class="comment">// bcd</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>将字符串分割成一个数组：split</strong></p><blockquote><p>和arr.join（）正好相反</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// join 将数组的值拼接成一个字符串</span></span><br><span class="line"><span class="comment">// split('分割符') 将字符串分割成一个数组, 返回值, 就是分割后得到的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'a|b|c|d'</span>;</span><br><span class="line"><span class="comment">//-----------------split('分割符'): 将字符串通过分隔符分割成一个数组, 返回分割后得到的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">'|'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// ["a", "b", "c", "d"]</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="————————-3"><a href="#————————-3" class="headerlink" title="————————"></a>————————</h5><hr><ul><li><p><strong>字符串替换：replace</strong></p><blockquote><p>可以把字符串中特定字符替换掉</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> words = <span class="string">'大菜鸡, 真坑啊!!! 大菜鸡, 大菜鸡'</span>;</span><br><span class="line"><span class="comment">//-----------------------str.replace('aa','bb'):将str中的第一个aa替换成bb——》返回替换后的结果</span></span><br><span class="line">words = words.replace(<span class="string">'菜鸡'</span>, <span class="string">'***'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------（拓展）替换所有的需要使用后面讲的正则——》g：全局</span></span><br><span class="line">words = words.replace(<span class="regexp">/你妹的/g</span>, <span class="string">'***'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(words);</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="ヾ-๑╹◡╹-ﾉ”字符串小练习"><a href="#ヾ-๑╹◡╹-ﾉ”字符串小练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”字符串小练习"></a>ヾ(๑╹◡╹)ﾉ”字符串小练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 截取字符串"我爱中华人民共和国"，中的"中华"</span></span><br><span class="line"><span class="comment">//2. "abcoefoxyozzopp"查找字符串中所有o出现的位置</span></span><br><span class="line"><span class="comment">//3. 把字符串中所有的o替换成!</span></span><br><span class="line"><span class="comment">//4. 把一个字符串中所有的空格全部去掉</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”字符串大练习"><a href="#ヾ-๑╹◡╹-ﾉ”字符串大练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”字符串大练习"></a>ヾ(๑╹◡╹)ﾉ”字符串大练习</h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var str = 'my_name_is_jim_green';</span></span><br><span class="line"><span class="comment">// 需求: 变成驼峰命名  myNameIsJimGreen</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/js基础day06部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js基础" scheme="http://yoursite.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js基础day05笔记</title>
    <link href="http://yoursite.com/2020/02/10/1-js%E5%9F%BA%E7%A1%80day05%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/10/1-js基础day05笔记/</id>
    <published>2020-02-10T02:00:05.000Z</published>
    <updated>2020-03-11T11:15:22.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/js基础day05部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标（全天模式）"><a href="#学习目标（全天模式）" class="headerlink" title="学习目标（全天模式）"></a>学习目标（全天模式）</h1><blockquote><ul><li><p>[ ] 能够使用对象的属性和方法</p></li><li><p>[ ] 能够for…in遍历对象的所有属性</p></li><li><p>[ ] 能够说出new关键字的执行过程</p></li><li><p>[ ] 能够说出简单类型和复杂类型的数据作为函数参数的差异</p></li><li><p>[ ] 能够说出Math对象的至少3个方法</p></li><li><p>[ ] 能够说出Date对象的至少3个方法</p></li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="对象的取值与赋值的语法"><a href="#对象的取值与赋值的语法" class="headerlink" title="对象的取值与赋值的语法"></a>对象的取值与赋值的语法</h2><h3 id="点语法"><a href="#点语法" class="headerlink" title="点语法"></a>点语法</h3><p><strong>对象的取值：</strong></p><ul><li><p><strong>对象名.属性名</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.height);</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>如果属性名存在，获取对应的值</li><li>如果属性名不存在，返回undefined</li></ul></li><li><p><strong>对象名.方法名</strong>——》<strong>对象名.方法名()</strong></p><blockquote><p>方法一般不会打印，是用来调用的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person.eat);<span class="comment">// 打印的是方法这个函数</span></span><br><span class="line">person.eat();<span class="comment">// 表示调用person对象中的eat方法这个函数</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>对象的赋值：</strong></p><ul><li><strong>对象名.属性名 = 值</strong><ul><li>如果属性名存在，被覆盖</li><li>如果属性名不存在，添加一个新属性</li></ul></li></ul><h3 id="中括号语法"><a href="#中括号语法" class="headerlink" title="中括号语法"></a>中括号语法</h3><blockquote><p>中括号语法也叫做关联数组语法，说白了就是把对象当做是数组看待</p></blockquote><ul><li><p>数组取值是：<strong>arr[下标]</strong>，其实下标就相当于键值对中的键</p><p><img src="/images/数组.png" alt="数组"></p></li></ul><ul><li><p>类比如数组的取值，对象也可以写：<strong>obj[键]</strong></p><p><img src="/images/对象.png" alt="对象"></p></li></ul><p><strong>中括号语法：</strong></p><ul><li>用法灵活，支持<strong>字符串或者变量</strong></li><li>取值：<strong>对象名[“属性名”]</strong></li><li>赋值：<strong>对象名[“属性名”] = ‘新值’</strong></li></ul><h3 id="点语法与中括号语法的区别"><a href="#点语法与中括号语法的区别" class="headerlink" title="点语法与中括号语法的区别"></a>点语法与中括号语法的区别</h3><blockquote><p>两种方法都能使用，但是<strong>只有中括号语法中支持变量</strong></p></blockquote><ul><li><strong>点语法：对象名.属性名</strong> ——》简洁——》只能写属性名，<strong>不支持变量（不管变量）</strong></li><li><strong>中括号语法：对象名[‘属性名’]</strong> ——》灵活——》只能写字符串或者变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列分别访问的是对象的什么属性</span></span><br><span class="line"><span class="comment">// 1、</span></span><br><span class="line">obj.name;<span class="comment">// 找obj的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'age'</span>;</span><br><span class="line">obj.str;<span class="comment">// 找obj的str属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、</span></span><br><span class="line">obj[<span class="string">'height'</span>];<span class="comment">// 找obj的height属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'weight'</span>;</span><br><span class="line">obj[str];<span class="comment">// 找obj的weight属性</span></span><br></pre></td></tr></table></figure><h3 id="中括号语法的使用场景"><a href="#中括号语法的使用场景" class="headerlink" title="中括号语法的使用场景"></a>中括号语法的使用场景</h3><blockquote><p>如果访问的属性值是一个变量，必须使用中括号语法</p></blockquote><p><strong>需求：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给一个空对象中添加数据，变成 &#123; n1: 1, n2: 2, n3: 3, n4: 4 ...... n10: 10 &#125;</span></span><br></pre></td></tr></table></figure><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><blockquote><p>一个一个的访问对象的全部属性</p></blockquote><p><strong>语法：</strong></p><blockquote><p>每一个键值对都会执行一遍for…in语句——》其中是变量需要使用中括号语法 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------------key——》键——》是一个变量可以变化</span></span><br><span class="line"><span class="comment">// --------------------obj——》需要遍历的对象</span></span><br><span class="line"><span class="comment">// --------------------obg[key]——》对应的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">    <span class="built_in">console</span>.log(obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-遍历对象的小练习"><a href="#ヾ-๑╹◡╹-ﾉ”-遍历对象的小练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 遍历对象的小练习"></a>ヾ(๑╹◡╹)ﾉ” 遍历对象的小练习</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求: 将所有 obj2 的属性, 添加到 obj 中去</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    money: <span class="number">1000000</span>,</span><br><span class="line">    car: <span class="string">'玛莎拉蒂'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、 可以一个一个的添加，但是通用性不好（属性变了之后代码也需要变）</span></span><br><span class="line"><span class="comment">// 2、可以遍历数组动态的把所有的数据都添加上</span></span><br></pre></td></tr></table></figure><h2 id="批量创建对象"><a href="#批量创建对象" class="headerlink" title="批量创建对象"></a>批量创建对象</h2><blockquote><p>在实际开发中，可能需要创建多个用户对象，此时就需要批量创建对象了</p></blockquote><h3 id="使用工厂函数创建对象"><a href="#使用工厂函数创建对象" class="headerlink" title="使用工厂函数创建对象"></a>使用工厂函数创建对象</h3><p><strong>需求：</strong> 需要同时创建多个对象出来</p><ul><li>一个一个字面量形式的创建——》可以，但是不停的做重复的代码</li><li>可以把重复创建对象的代码用函数封装起来——》这个用来创建对象的函数，就叫做工厂函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, desc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        age: age,</span><br><span class="line">        desc: desc,</span><br><span class="line">        say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 在对象的方法中, this, 指向当前的对象 </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'大家好, 我叫'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xm = createPerson(<span class="string">'小明'</span>, <span class="number">18</span>, <span class="string">'长得帅'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xh = createPerson(<span class="string">'小红'</span>, <span class="number">30</span>, <span class="string">'长得美'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xh);</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong> 在对象方法中，this就相当于当前这个对象。</p><p><strong>优点：</strong>可以同时创建多个对象</p><p><strong>缺点：</strong>工厂函数创建出来的对象，是Object类型的，没有更具体的类型！！</p><blockquote><p>有时候咱们需要构建人这个对象，想要其类型就是person，此时使用工厂函数就不行了</p></blockquote><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><h3 id="构造函数的介绍"><a href="#构造函数的介绍" class="headerlink" title="构造函数的介绍"></a>构造函数的介绍</h3><blockquote><p>每一个对象自身存在一个类型，表示自己是什么类型的对象。</p><p>作为学生来说，对象的类型应该为Student</p><p>作为老师来说，对象的类型应该为Teacher</p><p>都是人，不过属于不同类型的人</p><p>……</p><p>但是如果使用工厂函数来说，不管创建出来是什么对象，类型始终是Object，因为底层使用的是new Object这个构造函数。<strong>用什么构造函数创建的对象，对象类型就是什么</strong></p><p>所以如果希望创建一个学生对象，他的类型为Student，此时可以使用自定义一个Student构造函数即可！！</p></blockquote><p><strong>构造函数的特点：</strong></p><ul><li>就是一个函数</li><li>函数名首字母大写</li><li>js内部，内置了一些构造函数，比如：Object、Array…</li><li>构造函数可以自定义</li></ul><p><strong>自定义构造函数的使用步骤：</strong></p><ol><li>声明一个自定义的构造函数，特点是首字母大写</li><li>结合new语法一起使用，创建出来的对象，就有自己的类型了！！</li></ol><hr><h3 id="new做的四件事情"><a href="#new做的四件事情" class="headerlink" title="new做的四件事情"></a>new做的四件事情</h3><p>先创建出一个student类型的对象~</p><blockquote><p>new会做四个事情</p></blockquote><ol><li><p>new会创建一个新的空对象，并且这个对象是有类型的</p></li><li><p>让构造函数中的this指向当前创建的对象</p><blockquote><p>想给当前新对象加属性，直接this.name即可</p></blockquote></li><li><p>执行构造函数中的代码</p><blockquote><p>在这一步可以给新对象加属性和方法</p></blockquote></li><li><p>会返回这个新对象</p></li></ol><p><strong>注意点</strong></p><ul><li><p><strong>new的作用：</strong>创建了一个对象</p></li><li><p><strong>构造函数的作用</strong>：给创建对象添加了属性和方法（实例化对象）</p><blockquote><p>没有构造函数体，只是一个空对象</p></blockquote></li></ul><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'大家好'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-构造函数的小练习-批量创建狗"><a href="#ヾ-๑╹◡╹-ﾉ”-构造函数的小练习-批量创建狗" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 构造函数的小练习-批量创建狗"></a>ヾ(๑╹◡╹)ﾉ” 构造函数的小练习-批量创建狗</h5><h2 id="创建对象的小结"><a href="#创建对象的小结" class="headerlink" title="创建对象的小结"></a>创建对象的小结</h2><ul><li><p>创建单个对象</p><ul><li><p>字面量：<code>var obj = {};</code></p></li><li><p>构造函数：<code>var obj = new Object();</code> </p></li></ul></li><li><p>创建多个对象</p><ul><li><p>工厂函数：<code>function createPerson() {var obj ={};return obj;}</code></p><blockquote><p>只是把创建对象的过程封装成了一个函数</p></blockquote></li><li><p>自定义构造函数：<code>function Person(){ this.name=&#39;zs&#39;; }</code></p><blockquote><p>需要通过new + 构造函数创建，并且<strong>可以创建不同类型的对象</strong></p></blockquote></li></ul></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-构造函数相关的概念小结"><a href="#ヾ-๑╹◡╹-ﾉ”-构造函数相关的概念小结" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 构造函数相关的概念小结"></a>ヾ(๑╹◡╹)ﾉ” 构造函数相关的概念小结</h5><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><h1 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h1><p><strong>简单数据类型（值类型）：</strong>number、string、boolearn、undefined、null</p><p><strong>复杂数据类型（引用类型）：</strong> Array、Object、Function、（自定义构造函数创建的一些对象！！）</p><blockquote><p>从内存角度上划分，可以把数据分为值类型与引用类型。</p></blockquote><p><strong>简单数据类型（值类型）：</strong>变量在存储时，存储的是<strong>值本身</strong>！！</p><p><strong>复杂数据类型（引用类型）：</strong> 变量在储存时，储存的是内存地址！！</p><h2 id="值类型与引用类型的内存分布"><a href="#值类型与引用类型的内存分布" class="headerlink" title="值类型与引用类型的内存分布"></a>值类型与引用类型的内存分布</h2><h5 id="◕ᴗ◕✿-画图说明值类型内存分布"><a href="#◕ᴗ◕✿-画图说明值类型内存分布" class="headerlink" title="(◕ᴗ◕✿)画图说明值类型内存分布"></a>(◕ᴗ◕✿)画图说明值类型内存分布</h5><blockquote><p>值类型变量中存的是值本身</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num;</span><br><span class="line">num2 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="built_in">console</span>.log(num2);</span><br></pre></td></tr></table></figure><h5 id="◕ᴗ◕✿-画图说明引用类型内存分布"><a href="#◕ᴗ◕✿-画图说明引用类型内存分布" class="headerlink" title="(◕ᴗ◕✿)画图说明引用类型内存分布"></a>(◕ᴗ◕✿)画图说明引用类型内存分布</h5><blockquote><p>引用类型变量中存的是内存地址</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'ff'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj; </span><br><span class="line">obj2.name = <span class="string">'tg'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br></pre></td></tr></table></figure><h2 id="值类型与引用类型的赋值特征"><a href="#值类型与引用类型的赋值特征" class="headerlink" title="值类型与引用类型的赋值特征"></a>值类型与引用类型的赋值特征</h2><ul><li><p>值类型变量中存的是值本身，所以赋值给其他变量时，赋值的就是值本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值类型</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;</span><br><span class="line">num2 = <span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"><span class="built_in">console</span>.log(num2);</span><br></pre></td></tr></table></figure></li><li><p>引用类型变量中存的是内存地址，所以赋值给其他变量时，赋值的是内存地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name:<span class="string">"zs"</span>,</span><br><span class="line">  age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.name = <span class="string">"ls"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);</span><br></pre></td></tr></table></figure></li></ul><h2 id="值类型与引用类型参数传递"><a href="#值类型与引用类型参数传递" class="headerlink" title="值类型与引用类型参数传递"></a>值类型与引用类型参数传递</h2><ul><li>值类型：变量存的是值本身，传参时传递的是值本身</li></ul><h5 id="◕ᴗ◕✿-画图说明值类型参数传递"><a href="#◕ᴗ◕✿-画图说明值类型参数传递" class="headerlink" title="(◕ᴗ◕✿)画图说明值类型参数传递"></a>(◕ᴗ◕✿)画图说明值类型参数传递</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 形参，就相当于局部变量，相当于var a = 10</span></span><br><span class="line">  a = <span class="number">99</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">fn(num);</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><ul><li>引用类型：变量存的是内存地址，传参时传递的是内存地址</li></ul><h5 id="◕ᴗ◕✿-画图说明引用类型参数传递"><a href="#◕ᴗ◕✿-画图说明引用类型参数传递" class="headerlink" title="(◕ᴗ◕✿)画图说明引用类型参数传递"></a>(◕ᴗ◕✿)画图说明引用类型参数传递</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">"zs"</span>,</span><br><span class="line">  age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a.name = <span class="string">"ls"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a.name);</span><br><span class="line">&#125;</span><br><span class="line">fn(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br></pre></td></tr></table></figure><h5 id="————————-3"><a href="#————————-3" class="headerlink" title="————————"></a>————————</h5><h2 id="值类型与引用类型练习"><a href="#值类型与引用类型练习" class="headerlink" title="值类型与引用类型练习"></a>值类型与引用类型练习</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//面试题1 : </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 相当于</span></span><br><span class="line">  <span class="comment">//  var a = 10;</span></span><br><span class="line">  <span class="comment">//  var b = 20;</span></span><br><span class="line">  <span class="comment">// 函数的参数 其实相当于函数内部的局部变量</span></span><br><span class="line">  a = a + <span class="number">1</span>;</span><br><span class="line">  b = b + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">fn(x, y);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br></pre></td></tr></table></figure><h5 id="◕ᴗ◕✿-画图说明第二种情况"><a href="#◕ᴗ◕✿-画图说明第二种情况" class="headerlink" title="(◕ᴗ◕✿)画图说明第二种情况"></a>(◕ᴗ◕✿)画图说明第二种情况</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//面试题2 : </span></span><br><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">  name:<span class="string">"zs"</span>,</span><br><span class="line">  age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  person.name = <span class="string">'ls'</span>;</span><br><span class="line"><span class="comment">//  person = &#123;</span></span><br><span class="line"><span class="comment">//      name:'qq'</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;</span><br><span class="line">fn(p);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);</span><br></pre></td></tr></table></figure><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><blockquote><p>JS内置对象就是指Javascript自带的一些对象，供开发者使用，这些对象提供了一些常用的的功能。</p><p>常见的内置对象有Math、String、Array、Date等</p></blockquote><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><blockquote><p>Math对象中封装很多与数学相关的属性和方法。</p></blockquote><ul><li><p><strong>圆周率</strong></p><p><code>Math.PI</code></p></li><li><p><strong>最大值/最小值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.max(1,2,3,4,5,6);</span><br><span class="line">Math.min(1,2,3,4,5,6);</span><br></pre></td></tr></table></figure></li><li><p><strong>取整</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil();<span class="comment">//天花板，向上取整，取大的那个</span></span><br><span class="line"><span class="built_in">Math</span>.floor();<span class="comment">//地板，向下取整，取小的那个</span></span><br><span class="line"><span class="built_in">Math</span>.round();<span class="comment">//四舍五入，如果是.5，则取更大的那个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Math</span>.ceil(<span class="number">1.1</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Math</span>.ceil(<span class="number">1.9</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Math</span>.ceil(<span class="number">-1.1</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Math</span>.ceil(<span class="number">-1.9</span>) );</span><br></pre></td></tr></table></figure></li><li><p><strong>随机数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random();<span class="comment">//返回一个[0,1)之间的数，能取到0，取不到1</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>小案例：</strong>随机获取0、1、2这三个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------获取0~2.9999的随机数</span></span><br><span class="line">  <span class="built_in">Math</span>.random()*<span class="number">3</span></span><br><span class="line"><span class="comment">//---------------只需要把小数点之后的去掉即可</span></span><br><span class="line">  <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>&gt; 求0~n的整数随机数&gt;&gt; `parseInt(Math.random()*(n+1))`</code></pre><ul><li><p><strong>小案例：</strong> 随机生成一个rbg颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colorA = <span class="built_in">parseInt</span>( <span class="built_in">Math</span>.random() * <span class="number">256</span> );</span><br><span class="line"><span class="keyword">var</span> colorB = <span class="built_in">parseInt</span>( <span class="built_in">Math</span>.random() * <span class="number">256</span> );</span><br><span class="line"><span class="keyword">var</span> colorC = <span class="built_in">parseInt</span>( <span class="built_in">Math</span>.random() * <span class="number">256</span> );</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'rgb('</span>+ colorA + <span class="string">","</span> + colorB + <span class="string">','</span> + colorC +<span class="string">')'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//----------------------设置body的颜色（web api内容）</span></span><br><span class="line"><span class="built_in">document</span>.body.style.backgroundColor = str;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>绝对值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs();<span class="comment">//求绝对值</span></span><br><span class="line"><span class="comment">//-----------------------------</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">1</span>));  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-1</span>));  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>次幂（次方）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(num, power);<span class="comment">//求num的power次方</span></span><br><span class="line"><span class="comment">//-----------------------------</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">3</span>, <span class="number">2</span>));  <span class="comment">// 3的平方  9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="number">3</span>)); <span class="comment">// 10的三次方 1000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">100</span>, <span class="number">0.5</span>));  <span class="comment">// 100的开方  10</span></span><br></pre></td></tr></table></figure></li><li><p><strong>开方</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sqrt(num);<span class="comment">//对num开平方</span></span><br><span class="line"><span class="comment">//-----------------------------</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sqrt(<span class="number">9</span>));  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="————————-4"><a href="#————————-4" class="headerlink" title="————————"></a>————————</h5><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><blockquote><p>js提供了一个<strong>Date构造函数</strong>，通过Date构造函数可以创建不同的日期对象</p><p>——》因为日期都是不同的！！！</p><p>Date对象用来处理日期和时间</p></blockquote><ul><li><p><strong>创建一个日期对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//不传参，默认是一个当前时间的对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2019-05-20 12:00:00"</span>);<span class="comment">//(格式固定)指定具体的时间对象，后面的时分秒可以省略</span></span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">//-----------------------------不常用的方式</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>,<span class="number">4</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">// 可以把每一个项分别传入，但是注意月份从0开始的，0~11</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1558324800000</span>);<span class="comment">// 直接传入时间戳也行</span></span><br></pre></td></tr></table></figure></li><li><p><strong>日期格式化（了解，不用）</strong></p><blockquote><p>Date对象中有默认的方法可以进行日期格式化，但是不好看，一般不用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()；</span><br><span class="line"><span class="built_in">console</span>.log(now);<span class="comment">// 默认直接打印now对象，会默认调用toString方法，打印结果是一个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(now.toString());<span class="comment">// 转成标准的字符串日期数据输出（默认）</span></span><br><span class="line"><span class="built_in">console</span>.log(now.toLocaleString()); <span class="comment">// 输出本地格式日期</span></span><br><span class="line"><span class="built_in">console</span>.log(now.toLocaleDateString());  <span class="comment">// 本地格式日期，只输出日期部分</span></span><br><span class="line"><span class="built_in">console</span>.log(now.toLocaleTimeString());  <span class="comment">// 本地格式日期，只输出时间部分</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取日期的指定部分</strong></p><blockquote><p>之前默认的日期格式化格式很丑，一般不用——》通过获取日期的指定部分，可以自定义格式化日期</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 当前时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取年份</span></span><br><span class="line"><span class="keyword">var</span> year = now.getFullYear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取月份——》月份从0开始，范围是0~11，一般会+1</span></span><br><span class="line"><span class="keyword">var</span> month = now.getMonth() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取日——》一个月的几号——》getDay表示获取星期几（从0开始，0表示周日，1表示周一）</span></span><br><span class="line"><span class="keyword">var</span> day = now.getDate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取时</span></span><br><span class="line"><span class="keyword">var</span> hours = now.getHours();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取分</span></span><br><span class="line"><span class="keyword">var</span> minutes = now.getMinutes();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取秒</span></span><br><span class="line"><span class="keyword">var</span> seconds = now.getSeconds();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = year + <span class="string">'年'</span> + month + <span class="string">'月'</span> + day + <span class="string">'日, '</span> + hours + <span class="string">'时'</span> + minutes + <span class="string">'分'</span> + seconds + <span class="string">'秒'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str);</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="————————-5"><a href="#————————-5" class="headerlink" title="————————"></a>————————</h5><ul><li><p><strong>时间戳</strong></p><blockquote><p>一般日期打印出来，是字符串的形式</p><p><strong>时间戳则是日期的数字形式</strong>，可以运算</p></blockquote><p><strong>时间戳：</strong>表示距离1970年01月01日00时00分00秒起，过去的总毫秒数</p><p><strong>作用：</strong> 用来计算时间差</p><p><strong>代码：</strong> <code>var date = +new Date();</code></p><ul><li><p>可以统计代码执行的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------获取开始的时间</span></span><br><span class="line"><span class="keyword">var</span> begin = +<span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">// -------------------------------获取结束的时间</span></span><br><span class="line"><span class="keyword">var</span> end = +<span class="keyword">new</span> <span class="built_in">Date</span>();  </span><br><span class="line"><span class="built_in">console</span>.log(end - begin);  <span class="comment">// 计算时间差，可以得出代码的执行时间毫秒数</span></span><br></pre></td></tr></table></figure></li><li><p>倒计时（距离下课的时间）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----------------------------------当前时间</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// ----------------------------------将来需要倒计时的时间</span></span><br><span class="line"><span class="keyword">var</span> future = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-5-20 12:00:00'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------得到时间差——》转换成秒数（小数后忽略）</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">parseInt</span>((future - now) / <span class="number">1000</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------秒数中获取时——》1小时=3600秒</span></span><br><span class="line"><span class="keyword">var</span> hours = <span class="built_in">parseInt</span>(time / <span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------秒数中获取分——》1分钟=60秒, 对所有的分钟数, 对60求余数即可(超过60的进位到小时中了）</span></span><br><span class="line"><span class="keyword">var</span> minutes = <span class="built_in">parseInt</span>(time / <span class="number">60</span>) % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------获取秒数，对秒数求60的余数（超过60的部分进位到分钟去了)</span></span><br><span class="line"><span class="keyword">var</span> seconds = time % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"距离下课还有: "</span> + hours + <span class="string">'小时'</span> + minutes + <span class="string">'分钟'</span> + seconds + <span class="string">'秒'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>##### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/js基础day05部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js基础" scheme="http://yoursite.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js基础day04笔记</title>
    <link href="http://yoursite.com/2020/02/10/1-js%E5%9F%BA%E7%A1%80day04%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/10/1-js基础day04笔记/</id>
    <published>2020-02-10T02:00:04.000Z</published>
    <updated>2020-03-11T11:13:36.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/js基础day04部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标（全天模式）"><a href="#学习目标（全天模式）" class="headerlink" title="学习目标（全天模式）"></a>学习目标（全天模式）</h1><blockquote><ul><li><p>[ ] 能够说出函数的形参和实参的区别</p></li><li><p>[ ] 能够使用函数封装一段代码重复使用</p></li><li><p>[ ] 能够说出函数中return的作用</p></li><li><p>[ ] 能够封装一个函数返回两个数的最大值</p></li><li><p>[ ] 能够说出全局作用域和局部作用域的区别</p></li><li><p>[ ] 能够说出预解析的过程</p></li><li><p>[ ] 能够书写定义函数的两种不同方式</p></li><li><p>[ ] 能够自定义创建对象</p></li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><blockquote><p>上面写的计算两个数的和存在问题，如果第一次求10+20的和，第二次求100+200的和，此时怎么办？</p></blockquote><p><strong>需求：</strong>计算两个数的和，封装成一个函数</p><blockquote><p>可以把需要求和的两个数作为参数传到函数里面，函数体中计算参数的和即可。</p></blockquote><ul><li>形参（形式参数）<ul><li>在函数声明时，设置的参数</li><li>作用：占位置。</li></ul></li><li>实参（实际参数）<ul><li>在函数调用时，传入的参数。</li><li>作用：函数调用时，会把实参的值赋值给形参，这样形参就有了值。</li></ul></li></ul><p><strong>例子：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSum(a,b) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">getSum(<span class="number">10</span> + <span class="number">20</span>);</span><br><span class="line">getSum(<span class="number">100</span> + <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p><strong>形参：</strong> </p><ul><li>在函数声明时，（）中的参数</li><li>形式参数：默认没有具体的值或者类型，只有当调用时，形参才有具体的值或者类型</li><li>作用：占位置</li></ul><p><strong>实参：</strong></p><ul><li>在函数调用时，给函数传递的参数</li><li>实际参数：默认有具体的值或者类型</li><li>作用：函数调用时，会将实参的值，传递给形参</li></ul><p><strong>函数声明与调用的进阶写法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参<span class="number">3</span>,...</span>)</span>&#123;</span><br><span class="line">  函数体；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>,....);</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-函数参数的练习"><a href="#ヾ-๑╹◡╹-ﾉ”-函数参数的练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 函数参数的练习"></a>ヾ(๑╹◡╹)ﾉ” 函数参数的练习</h5><blockquote><p>发生变化的值，都能提取成函数的参数（形参）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 计算1-n之间所有数的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 计算m-n之间所有数的积</span></span><br></pre></td></tr></table></figure><blockquote><p>初学者关键在于熟悉语法，对于复杂的情况之后的课程会不断拓展。</p></blockquote><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><blockquote><p>当函数执行完的时候，我们希望函数可以返回执行的结果（返回值）。也就是返回值。</p><p>此时可以通过在函数中设置一个return返回一个返回值</p><p>买一瓶爽歪歪~</p></blockquote><p><strong>返回值语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参...</span>)</span>&#123;</span><br><span class="line">  函数体;</span><br><span class="line">  <span class="comment">// 函数的返回值，就是函数的结构</span></span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过变量来接收这个返回值</span></span><br><span class="line"><span class="keyword">var</span> 变量 = 函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>);<span class="comment">// 此时变量的值等于函数的返回值</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong> 函数的返回值可以通过一个变量接收，然后对返回值进行之后的操作</p><h5 id="ヾ-๑╹◡╹-ﾉ”-函数返回值的练习"><a href="#ヾ-๑╹◡╹-ﾉ”-函数返回值的练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 函数返回值的练习"></a>ヾ(๑╹◡╹)ﾉ” 函数返回值的练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 计算1-n之间所有数的和,并且返回结果</span></span><br><span class="line"><span class="comment">// 2. 封装一个函数返回两个数的最大值</span></span><br></pre></td></tr></table></figure><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h2 id="函数三要素"><a href="#函数三要素" class="headerlink" title="函数三要素"></a>函数三要素</h2><ul><li><strong>函数名：</strong>函数可以一次声明，通过函数名()多次调用：比较重要</li><li><strong>函数的参数：</strong>可以没有，但是如果函数体内有需要变化的值，此时就需要把变化的量提取出形参</li><li><strong>函数的返回值：</strong> 可以没有，但是如果需要拿到函数的执行结果，就需要return返回值！！！</li></ul><blockquote><p>开发中：参数和返回值看实际需求决定！</p></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”-函数三要素的练习1"><a href="#ヾ-๑╹◡╹-ﾉ”-函数三要素的练习1" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 函数三要素的练习1"></a>ヾ(๑╹◡╹)ﾉ” 函数三要素的练习1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 求任意半径的圆的面积</span></span><br><span class="line"><span class="comment">//    圆的面积 = π（3.14） * r * r</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 求任意半径的圆的周长</span></span><br><span class="line"><span class="comment">//    圆的周长 = π * r * 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 求任意2个数中的最大值</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-函数三要素的练习2"><a href="#ヾ-๑╹◡╹-ﾉ”-函数三要素的练习2" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 函数三要素的练习2"></a>ヾ(๑╹◡╹)ﾉ” 函数三要素的练习2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 求任意数组中的最大值</span></span><br><span class="line"><span class="comment">// 2. 求任意数组中的最小值</span></span><br><span class="line"><span class="comment">// 3. 翻转任意数组，返回一个新的数组</span></span><br><span class="line"><span class="comment">// 4. 对任意数组从小到大排序</span></span><br></pre></td></tr></table></figure><h2 id="函数参数与返回值的说明"><a href="#函数参数与返回值的说明" class="headerlink" title="函数参数与返回值的说明"></a>函数参数与返回值的说明</h2><p><strong>需求：</strong>封装成函数，求两个任意数的和并且返回结果</p><blockquote><p>要求形参与实参需要一一对应！！但是如果在调用是，传实参写少了，或者写多了，是什么情况呢？？</p></blockquote><p><strong>函数参数的注意点：</strong></p><blockquote><p><strong>规范形参与实参的个数需要一一对应！</strong></p></blockquote><ul><li>如果参数传少了，没有接收到的值就是undefined（避免这种情况，代码有问题）</li><li>如果参数传多了，前面的会一一对应，对于多出的会被忽略（不会影响结果）</li></ul><p><strong>函数返回值的注意点：</strong></p><blockquote><p>一个函数的返回值，指的是函数调用的结果</p></blockquote><ul><li>return表示函数返回结果，函数已经结束，return之后的代码就不执行了！！</li></ul><h1 id="函数的高级知识"><a href="#函数的高级知识" class="headerlink" title="函数的高级知识"></a>函数的高级知识</h1><h2 id="函数内部可以调用函数"><a href="#函数内部可以调用函数" class="headerlink" title="函数内部可以调用函数"></a>函数内部可以调用函数</h2><blockquote><p>在函数内部是可以继续调用别的函数的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">study</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'早上8点，开始学习'</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 在study函数的函数体中调用了play函数</span></span><br><span class="line">    play();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'晚上9点，结束学习'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'早上8点半开始玩手机'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'晚上8点半结束玩手机'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有在调用时, 浏览器才会执行函数体中的代码</span></span><br><span class="line">study();</span><br></pre></td></tr></table></figure><h2 id="函数的调试"><a href="#函数的调试" class="headerlink" title="函数的调试"></a>函数的调试</h2><blockquote><p>如果需要看上面函数的执行过程，可以通过调试工具调试一下</p></blockquote><p><img src="/images/调试工具-1573908363491.png" alt="调试工具"></p><p><strong>从左往右看：</strong></p><ul><li><p>第一个：瞬间执行到下一个断点处</p></li><li><p>第二个：让代码往下执行一步（如果遇到函数的调用，瞬间执行完得出结果，不显示过程）</p></li><li><p>第三个：让代码往下执行一步（如果遇到函数的调用，会进入函数体中显示过程）</p><blockquote><p>想进入函数看里面的代码使用</p></blockquote></li><li><p>第四个：瞬间执行完当前函数（不显示过程）</p><blockquote><p>不想看函数里面的代码了，可以使用跳出</p></blockquote></li></ul><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p>变量起作用的区域</p></blockquote><ul><li><p><strong>局部作用域：</strong></p><ul><li>在函数内部，就是局部作用域</li><li>在函数内部声明的变量，就叫做<strong>局部变量</strong></li></ul><p><strong>注意点：</strong> 局部变量，只能在<strong>当前函数</strong>内部，使用！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">22</span>;<span class="comment">// num是fn函数内部的变量，是局部变量，只能在fn中使用</span></span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p><strong>全局作用域：</strong></p><ul><li>在script标签内，函数外，就是全局作用域</li><li>在全局作用域中，声明的变量，就叫做<strong>全局变量</strong></li></ul><p><strong>注意点：</strong> 全局变量，在任何地方，都可以使用！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">// 可以访问全局变量num</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">// 可以访问全局变量num</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="全局变量与局部变量的访问规则"><a href="#全局变量与局部变量的访问规则" class="headerlink" title="全局变量与局部变量的访问规则"></a>全局变量与局部变量的访问规则</h2><p><strong>下列打印的结果是什么：</strong></p><blockquote><p><strong>先明确是什么变量，再判断值</strong></p><p>模拟浏览器的执行</p></blockquote><h5 id="◕ᴗ◕✿-画图演示"><a href="#◕ᴗ◕✿-画图演示" class="headerlink" title="(◕ᴗ◕✿)画图演示"></a>(◕ᴗ◕✿)画图演示</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">22</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;  </span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><ul><li>如果自己作用域中有<strong>声明这个变量</strong>，就用自己的！</li></ul><h5 id="◕ᴗ◕✿-画图演示-1"><a href="#◕ᴗ◕✿-画图演示-1" class="headerlink" title="(◕ᴗ◕✿)画图演示"></a>(◕ᴗ◕✿)画图演示</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    num = <span class="number">22</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;  </span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><ul><li>如果自己作用域中<strong>没有声明这个变量</strong>，就用外面的（全局作用域）</li></ul><p><strong>归纳：自己有就用自己的，自己没有就用外面的！</strong></p><h5 id="ヾ-๑╹◡╹-ﾉ”-作用域访问规则练习-◕ᴗ◕✿-画图演示"><a href="#ヾ-๑╹◡╹-ﾉ”-作用域访问规则练习-◕ᴗ◕✿-画图演示" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 作用域访问规则练习 (◕ᴗ◕✿)画图演示"></a>ヾ(๑╹◡╹)ﾉ” 作用域访问规则练习 (◕ᴗ◕✿)画图演示</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">22</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    num = <span class="number">11</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><h3 id="隐式全局变量"><a href="#隐式全局变量" class="headerlink" title="隐式全局变量"></a>隐式全局变量</h3><blockquote><p>开发中避免出现（一般只会在面试题中提问）</p></blockquote><p><strong>问题：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">// 当前作用域中没有声明，但是已经是全局作用域了没有上一级了，此时浏览器会隐式的去把该变量声明成全局变量</span></span><br></pre></td></tr></table></figure><ul><li>一个变量如果从头到尾没有使用var声明，直接赋值，浏览器会默认变成全局变量——》隐式全局变量</li></ul><h5 id="◕ᴗ◕✿-画图演示-2"><a href="#◕ᴗ◕✿-画图演示-2" class="headerlink" title="(◕ᴗ◕✿)画图演示"></a>(◕ᴗ◕✿)画图演示</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log( num );</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-隐式全局变量的小练习"><a href="#ヾ-๑╹◡╹-ﾉ”-隐式全局变量的小练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 隐式全局变量的小练习"></a>ヾ(๑╹◡╹)ﾉ” 隐式全局变量的小练习</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    num = <span class="number">30</span>;<span class="comment">// 这个num是隐式全局变量吗？</span></span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><blockquote><p>隐式全局变量开发中避免！！！</p></blockquote><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><blockquote><p>预解析：预先解析代码</p><p>在代码开始执行之前，都会把变量和函数的声明进行提升！！——》预解析</p><p>可以看做浏览器预先想要知道，有哪些变量和函数~</p></blockquote><p><strong>js代码的执行步骤（两步）</strong></p><ol><li><p>预解析（把变量和函数的声明提升到最前面）</p><blockquote><p>预先解析代码，把所有变量和函数的声明都会提升（浏览器想要预先知道有哪些变量和函数）</p></blockquote></li><li><p>再一行一行执行代码</p></li></ol><p><strong>问题：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">// 讲道理此时还没有声明变量，应该会报错</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>所有的变量的声明，都会提升到最顶部，但是不会提升赋值！！！</li></ul><h5 id="◕ᴗ◕✿-画图演示-3"><a href="#◕ᴗ◕✿-画图演示-3" class="headerlink" title="(◕ᴗ◕✿)画图演示"></a>(◕ᴗ◕✿)画图演示</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步不是执行代码，而是预解析</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><ul><li><p>所有的函数的声明，都会提升到最顶部，但是不会提升函数的调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步不是执行代码，而是预解析</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是第一行代码"</span>);</span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'嘻嘻'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p>以下都是错误的写法</p></blockquote><ul><li><p>如果同时声明了多个同名的变量，只会提升第一个声明，后面的声明会忽略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">33</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">44</span></span><br></pre></td></tr></table></figure></li><li><p>如果同时声明了多个同名的函数，后面的函数声明会覆盖前面的！！（最后只剩一个函数声明）</p><blockquote><p><strong>开发时避免同名！！</strong></p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'呵呵'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'哈哈'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'嘻嘻'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li><li><p>如果同时声明了同名的变量和函数，函数声明优先！！</p><blockquote><p><strong>开发中必须避免！！</strong></p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是函数'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure></li></ul><h5 id="◕ᴗ◕✿-画图演示-4"><a href="#◕ᴗ◕✿-画图演示-4" class="headerlink" title="(◕ᴗ◕✿)画图演示"></a>(◕ᴗ◕✿)画图演示</h5><blockquote><p>一定要避免这种情况，否则会有bug</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'嘿嘿嘿'</span>);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-小练习"><a href="#ヾ-๑╹◡╹-ﾉ”-小练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 小练习"></a>ヾ(๑╹◡╹)ﾉ” 小练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、getCool() 比比谁最帅！！</span></span><br><span class="line"><span class="comment">//  1、声明多个cool的函数</span></span><br><span class="line"><span class="comment">//  2、不管在哪里调用，结果都是最后一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"呵呵呵"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><strong>代码规范：</strong></p><ul><li><strong>一般先声明，后使用</strong></li><li><strong>不要让函数名与变量名同名！！</strong></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-面试题"><a href="#ヾ-๑╹◡╹-ﾉ”-面试题" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 面试题"></a>ヾ(๑╹◡╹)ﾉ” 面试题</h5><blockquote><p>一般预解析的题目只在面试中会遇到，实际开发中避免</p><p>注意点：每个作用域中都有预解析（局部作用域中也有！）</p></blockquote><h5 id="◕ᴗ◕✿-画图演示-5"><a href="#◕ᴗ◕✿-画图演示-5" class="headerlink" title="(◕ᴗ◕✿)画图演示"></a>(◕ᴗ◕✿)画图演示</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、 每个作用域中都有预解析——》函数内部也会预解析</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">fn1();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line">fn2();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="————————-3"><a href="#————————-3" class="headerlink" title="————————"></a>————————</h5><h5 id="◕ᴗ◕✿-画图演示-6"><a href="#◕ᴗ◕✿-画图演示-6" class="headerlink" title="(◕ᴗ◕✿)画图演示"></a>(◕ᴗ◕✿)画图演示</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.</span></span><br><span class="line">fn3();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a = b = c = <span class="number">9</span>;<span class="comment">// 相当于： a = 9,b = 9,c = 9</span></span><br><span class="line">  <span class="comment">// var a = b = c = 9; // 相当于只声明了一个a var a = 9 ; b = 9 ; c = 9;</span></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义函数的两种方式"><a href="#定义函数的两种方式" class="headerlink" title="定义函数的两种方式"></a>定义函数的两种方式</h2><blockquote><p>两种方法各有千秋，都有使用的场景</p></blockquote><p><strong>函数声明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"呵呵"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p><strong>函数表达式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"呵呵"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p><strong>区别：</strong></p><ul><li>函数声明可以先调用，再声明（因为预解析）</li><li><strong>函数表达式必须先声明赋值，再调用</strong>（相当于变量赋值，只会提升变量声明，不会提升赋值）</li></ul><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><blockquote><p>匿名函数：没有名字的函数——》不能直接使用，有两个使用场景</p></blockquote><p><strong>场景一：函数表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'呵呵'</span>)；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将函数赋值给变量fn，此时函数没有名字</span></span><br></pre></td></tr></table></figure><p><strong>场景二：匿名函数自调用——》自执行——》自己调用自己</strong></p><blockquote><p><strong>函数可以自调用（声明后立马使用）</strong>，但是直接调用会报错，此时需要用（）把整个函数体包裹起来才行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    consolo.log(<span class="string">'呵呵'</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    consolo.log(<span class="string">'呵呵'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>注意点：一般规范匿名函数自调用之后需要加上分号</li></ul><h2 id="匿名函数自调用的应用（沙箱模式）"><a href="#匿名函数自调用的应用（沙箱模式）" class="headerlink" title="匿名函数自调用的应用（沙箱模式）"></a>匿名函数自调用的应用（沙箱模式）</h2><blockquote><p>在多人同时写代码时，如果都使用的是全局变量，很容易与其他人的全局变量互相影响，这叫做<strong>全局变量污染</strong></p><p>一般使用<strong>沙箱模式（匿名函数自调用）</strong>：每个人的代码在单独的作用域中，不会互相影响</p></blockquote><p><strong>例子：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小张写的代码，单独运行没毛病</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bbbb'</span>);</span><br><span class="line">&#125;</span><br><span class="line">b();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小王写的代码，单独运行没毛病</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">22</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'aaaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------但是如果一起运行，全局变量就会互相影响了（全局变量污染）</span></span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ul><li><p>只需要让每个人的代码中的变量变成局部变量即可</p><blockquote><p>js中只有函数里面才有局部作用域，只需要那函数包裹起来调用即可</p></blockquote></li><li><p>简写就是函数的自调用，但是有名字的函数还是会全局变量污染，所以使用匿名函数自调用</p></li></ul><h5 id="————————-4"><a href="#————————-4" class="headerlink" title="————————"></a>————————</h5><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="为什么学习对象？"><a href="#为什么学习对象？" class="headerlink" title="为什么学习对象？"></a>为什么学习对象？</h2><blockquote><p>为什么要学习数组：数组可以存储大量的数据，并且数组规范一般储存的是同类型的数据！！</p><p>对象：万物皆对象，在现实生活中，只要能被描述出来的就是对象</p><p>思考：如果需要在js中描述出一个人这个对象，怎么做？</p></blockquote><p><strong>描述人这个对象：</strong></p><ul><li>特征：姓名、年龄、性别、身高、体重……</li><li>行为：吃饭、睡觉、敲代码……</li></ul><p><strong>解决方案：</strong></p><ul><li><p>单独使用变量一个个存——》代码麻烦，需要多个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -------------------特征</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"张三"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">"男"</span>;</span><br><span class="line"><span class="keyword">var</span> height = <span class="number">180</span>;</span><br><span class="line"><span class="keyword">var</span> weight = <span class="number">150</span>；</span><br><span class="line"><span class="comment">// -------------------行为</span></span><br><span class="line"><span class="keyword">var</span> eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sleep = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------变量太多麻烦</span></span><br></pre></td></tr></table></figure></li><li><p>使用数组存——》数组规范一般储存同类型的数据，并且数组中的数据用户不明白分别表示什么意思</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'张三'</span>,<span class="number">18</span>,<span class="string">'男'</span>,<span class="number">180</span>,<span class="number">150</span>];</span><br><span class="line"><span class="comment">//-----------------------数组一般只存储同类型的数据，并且这样写每一项不明确表示什么含义</span></span><br></pre></td></tr></table></figure></li><li><p>如果需要描述现实中的对象，此时就需要通过js中的对象完成！</p></li></ul><h2 id="对象的基本概念"><a href="#对象的基本概念" class="headerlink" title="对象的基本概念"></a>对象的基本概念</h2><p><strong>数组：</strong>  一组有序的值的集合——》下标有序</p><p><strong>对象：</strong> 一组<strong>无序的键值对的集合</strong>——》可以用于描述生活中对象的特征与行为</p><blockquote><p>键值对就是类似于之前css中的样式</p><p>格式：<strong>键：值——》key：value</strong></p></blockquote><h2 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h2><ul><li><p><strong>字面量（用的最多）</strong></p><blockquote><p>123、’abc’、true、undefined、null、[]、{}</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;<span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">// ------------特征——》对象的属性</span></span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    sex:<span class="string">"男"</span>,</span><br><span class="line">    height:<span class="number">180</span>,</span><br><span class="line">    weight:<span class="number">150</span>,</span><br><span class="line">    <span class="comment">// ------------行为——》对象的方法（对象中的函数）</span></span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    sleep:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong> </p><ul><li>键值对之间以逗号隔开！！！</li><li>对象中的特征叫做<strong>对象的属性</strong></li><li>对象中的行为（函数）叫做<strong>对象的方法</strong></li></ul></li><li><p><strong>构造函数（用的较少）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();<span class="comment">//创建一个空的对象</span></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    sex:<span class="string">"男"</span>,</span><br><span class="line">    height:<span class="number">180</span>,</span><br><span class="line">    weight:<span class="number">150</span>,</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    sleep:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/js基础day04部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js基础" scheme="http://yoursite.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js基础day03笔记</title>
    <link href="http://yoursite.com/2020/02/10/1-js%E5%9F%BA%E7%A1%80day03%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/10/1-js基础day03笔记/</id>
    <published>2020-02-10T02:00:03.000Z</published>
    <updated>2020-03-11T11:10:44.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/js基础day03部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标（全天模式）"><a href="#学习目标（全天模式）" class="headerlink" title="学习目标（全天模式）"></a>学习目标（全天模式）</h1><blockquote><ul><li><p>[ ] 能够写出九九乘法表案例</p></li><li><p>[ ] 能够说出break和continue关键字的作用</p></li><li><p>[ ] 能够说出while do while 和for循环的区别</p></li></ul><ul><li><p>[ ] 能够说出数组的作用</p></li><li><p>[ ] 能够通过索引获取或设置数组中的数据</p><ul><li style="list-style: none"><input type="checkbox"> 能够通过for循环遍历数组中的数据并打印</li></ul></li><li><p>[ ] 能够求出一组数中的最大值</p></li><li><p>[ ] 能够说出冒泡排序的实现思路</p></li></ul><p> 。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h5 id="ヾ-๑╹◡╹-ﾉ”双重for循环的练习"><a href="#ヾ-๑╹◡╹-ﾉ”双重for循环的练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”双重for循环的练习"></a>ヾ(๑╹◡╹)ﾉ”双重for循环的练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 打印9*9的五角星★正方形</span></span><br><span class="line"><span class="comment">//  1、在页面中输出一个★</span></span><br><span class="line"><span class="comment">//  2、在页面中输出一行9个★</span></span><br><span class="line"><span class="comment">//  3、在页面中输出9行★</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 打印9*9的直角三角形</span></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="comment">//3 打印9*9乘法表</span></span><br><span class="line"><span class="comment">//  1、在页面中输出3 * 4 = 12</span></span><br><span class="line"><span class="comment">//  2、打印一个直角三角形</span></span><br><span class="line"><span class="comment">//  3、把三角形换成式子</span></span><br></pre></td></tr></table></figure><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p><strong>break：</strong> 如果循环遇到了break，就立刻<strong>结束整个循环</strong>，循环结束。执行循环之后的代码</p><p><strong>continue：</strong> 如果循环遇到了continue，就立刻<strong>结束本次循环</strong>，继续执行下一次循环（直接到i++的地方）。</p><p><strong>例子：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;   <span class="comment">// 结束整个循环——》执行循环之后的代码</span></span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 结束本次循环——》执行下一次循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我是循环之后的代码'</span>);</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-思考一下输出结果是什么？"><a href="#ヾ-๑╹◡╹-ﾉ”-思考一下输出结果是什么？" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”  思考一下输出结果是什么？"></a>ヾ(๑╹◡╹)ﾉ”  思考一下输出结果是什么？</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(i == <span class="number">7</span>)&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="ヾ-๑╹◡╹-ﾉ”-break和continue的练习"><a href="#ヾ-๑╹◡╹-ﾉ”-break和continue的练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” break和continue的练习"></a>ヾ(๑╹◡╹)ﾉ” break和continue的练习</h5><blockquote><p>只是为了练习break和continue</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 求1-100之间不能被7整除的整数的和（用continue）</span></span><br><span class="line"><span class="comment">//  ——》跳过能被7整除的数，不加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 求200-300之间所有的奇数的和（用continue）</span></span><br><span class="line"><span class="comment">//  ——》跳过所有的偶数，不加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 求200-300之间第一个能被7整数的数（break）</span></span><br><span class="line"><span class="comment">//  1、打印能被7整除的数</span></span><br><span class="line"><span class="comment">//  ——》遇到第一个能被7整除的数之后，直接结束循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 求200-300之间前3个能被7整数的数（break）</span></span><br><span class="line"><span class="comment">//  1、打印能被7整除的数</span></span><br><span class="line"><span class="comment">//  ——》打印到第三个（计数）能被7整除的数之后，直接结束循环</span></span><br></pre></td></tr></table></figure><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h2 id="循环的小结"><a href="#循环的小结" class="headerlink" title="循环的小结"></a>循环的小结</h2><ul><li>for循环：用的最多，适用于明确循环次数的情况</li><li>while循环：适用于不明确循环次数情况</li><li>do…while循环：适用于无论如何都需要执行一次代码的时候（很少）</li></ul><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><blockquote><p>数组：就是有序的值的集合</p></blockquote><h2 id="为什么要学习数组"><a href="#为什么要学习数组" class="headerlink" title="为什么要学习数组"></a>为什么要学习数组</h2><p><strong>需求：</strong> 现在需要存储一个班同学的名字</p><ul><li><p>如果使用简单数据类型存储，一个变量存一个，需要多个变量</p><blockquote><p>管理起来非常的麻烦，两个班呢？多个班呢？当数据量大时，变量多的要上天</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name1 = <span class="string">"名字1"</span>；</span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">"名字2"</span>；</span><br><span class="line"><span class="keyword">var</span> name3 = <span class="string">"名字3"</span>；</span><br><span class="line"><span class="keyword">var</span> name4 = <span class="string">"名字4"</span>；</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>如果使用数组存储，只需要一个变量即可</p><blockquote><p>一个数组中可以存储大量的数据，变量只需要一个，并且之后管理操作也很方便</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'名字1'</span>,<span class="string">'名字2'</span>,<span class="string">'名字3'</span>,<span class="string">'名字4'</span>,<span class="string">'名字5'</span>,......]</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建数组方式"><a href="#创建数组方式" class="headerlink" title="创建数组方式"></a>创建数组方式</h2><ul><li><p><strong>字面量（直接量）</strong></p><blockquote><p>从字面上，就能直接看出类型的量，浏览器直接认识</p><p>1，true，’abc’，undefined，null——》<strong>[]：表示一个数组</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []; <span class="comment">// 创建了一个空数组（没有数据的数组）</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'张飞'</span>,<span class="string">'赵云'</span>,<span class="string">'关羽'</span>,<span class="string">'刘备'</span>,<span class="string">'吕布'</span>]; <span class="comment">// 创建了存了数据的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">123</span>];<span class="comment">// 创建了一个存了123这个数据的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong> 数组中可以存任意类型的数据，但是规范一般存储相同类型的数据</p></li><li><p>构造函数的方法（了解，一般不用）</p><blockquote><p>函数还没学，先知道写法即可。并且一般不用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建了一个空数组（没有数据的数组）</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'张飞'</span>,<span class="string">'赵云'</span>,<span class="string">'关羽'</span>,<span class="string">'刘备'</span>,<span class="string">'吕布'</span>); <span class="comment">// 创建了存了数据的数组</span></span><br><span class="line"><span class="comment">//------------------有一个坑</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">123</span>);<span class="comment">// 创建了一个数组，并且占了123个位置，浪费空间</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组长度与下标"><a href="#数组长度与下标" class="headerlink" title="数组长度与下标"></a>数组长度与下标</h2><p><strong>需求：</strong> 用一个数组，存储3个人：刘备、关羽、张飞</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"刘备"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>];</span><br></pre></td></tr></table></figure><p><strong>数组的长度 :</strong> 通过arr.length属性，可以获取数据的长度</p><blockquote><p>类似于字符串长度的属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"刘备"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>数组的下标：</strong> 数组中的每一项，都有一个唯一的下标与之对应</p><blockquote><p>也有人把下标叫做索引</p></blockquote><p><img src="/images/数组的下标.png" alt="数组的下标"></p><h5 id="ヾ-๑╹◡╹-ﾉ”-数组类似于火车"><a href="#ヾ-๑╹◡╹-ﾉ”-数组类似于火车" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 数组类似于火车"></a>ヾ(๑╹◡╹)ﾉ” 数组类似于火车</h5><p><strong>注意点：</strong></p><ul><li>数组下标从0开始</li><li>数组下标的最大值：<code>arr.length-1</code></li></ul><h2 id="数组的取值与存值"><a href="#数组的取值与存值" class="headerlink" title="数组的取值与存值"></a>数组的取值与存值</h2><blockquote><p>数组中的数据可以通过下标进行取值与赋值</p><p>类似于列车长，可以查看每一节车厢里是谁，也可以给车厢里换人坐。</p></blockquote><p><strong>数组的取值：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法: 数组名[下标]</span></span><br><span class="line"><span class="comment">// 1、 如果下标存在, 返回具体的值</span></span><br><span class="line"><span class="comment">// 2、 如果下标不存在, 返回 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'刘备'</span>, <span class="string">'关羽'</span>, <span class="string">'张飞'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]);<span class="comment">// 有下标，返回具体的值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">100</span>]);  <span class="comment">// 没有这一项, 返回undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr[arr.length]);  <span class="comment">// 没有这一项，返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[arr.length<span class="number">-1</span>]);  <span class="comment">// 返回数组中最后一个值</span></span><br></pre></td></tr></table></figure><p><strong>数组的存值（改值）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法: 数组名[下标] = "新的值";</span></span><br><span class="line"><span class="comment">// 1、 如果下标存在, 直接用新的值覆盖（改值）</span></span><br><span class="line"><span class="comment">// 2、 如果下标不存在, 会新建一项（存值）</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'刘备'</span>, <span class="string">'关羽'</span>, <span class="string">'张飞'</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">'诸葛亮'</span>;<span class="comment">// 把数组中的 下标0 项覆盖掉</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">'赵云'</span>;<span class="comment">// 把数组中的 下标1 项覆盖掉</span></span><br><span class="line">arr[<span class="number">100</span>] = <span class="string">'吕布'</span>;  <span class="comment">// 可以存值，但是一般不会（浪费空间）</span></span><br><span class="line"></span><br><span class="line">arr[arr.length] = <span class="string">'曹操'</span>;<span class="comment">// 在数组的最后添加一项（推荐！！）</span></span><br></pre></td></tr></table></figure><hr><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><p><strong>数组最后添加元素的方法：</strong></p><blockquote><p>为了不开很多空的车厢，一般会在数组的最后添加一项</p></blockquote><ul><li><p>arr[arr.length] = 值：在数组最后添加一项</p><blockquote><p>随着数组的长度变长，arr.length也在变化，用于比下标多1</p></blockquote></li><li><p>arr.push(值)：专门用于给数组的最后添加一项（常用）</p></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-数组添加元素的练习"><a href="#ヾ-๑╹◡╹-ﾉ”-数组添加元素的练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 数组添加元素的练习"></a>ヾ(๑╹◡╹)ﾉ” 数组添加元素的练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 把1-100之间所有的数，放到一个空数组中</span></span><br><span class="line"><span class="comment">//2. 把1-100之间所有的奇数，放到一个空数组中</span></span><br><span class="line"><span class="comment">//3. 把1-100之间能被3整数的数字，放到一个空数组中</span></span><br></pre></td></tr></table></figure><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><blockquote><p>遍及所有项，从数组的第一项，访问到最后一项</p></blockquote><p><strong>low写法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'刘备'</span>, <span class="string">'关羽'</span>, <span class="string">'张飞'</span>, <span class="string">'赵云'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);<span class="comment">// 重复的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]);<span class="comment">// 重复的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]);<span class="comment">// 重复的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]);<span class="comment">// 重复的代码</span></span><br></pre></td></tr></table></figure><p><strong>遍历的写法：</strong></p><blockquote><p>注意点：从第一项访问到最后一项</p><ul><li>第一项：下标是0</li><li>最后一项：arr.length-1</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.length<span class="number">-1</span>; i++) &#123;<span class="comment">// 下标从0~arr.length-1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[i])；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --------------------------可以优化写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// 下标从0~arr.length-1(因为只是小于号，不能取到arr.length)</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[i])；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -----------------------------倒序遍历</span></span><br><span class="line"><span class="comment">// 倒序遍历：从最后一项开始，访问到第一项</span></span><br><span class="line"><span class="comment">//          arr.length-1       0 </span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = arr.length<span class="number">-1</span> ; i &gt;= <span class="number">0</span> ; i-- ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( arr[i] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以下作为思考的作业</p></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”数组遍历的练习1"><a href="#ヾ-๑╹◡╹-ﾉ”数组遍历的练习1" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”数组遍历的练习1"></a>ヾ(๑╹◡╹)ﾉ”数组遍历的练习1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">298</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">88</span>,<span class="number">77</span>,<span class="number">44</span>];</span><br><span class="line"><span class="comment">//1 求一组数中的所有数的和跟平均值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 求一组数中的最大值</span></span><br><span class="line"><span class="comment">// 1、先假定第一个数是最大的，用变量max存储</span></span><br><span class="line"><span class="comment">//  2、拿之后的每一项与max比较，如果发现更大的，此时更新最大值（把max换成这个更大的值）</span></span><br><span class="line"><span class="comment">//  3、比较到最后max就是最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 求一组数中的最小值和最小值所在的位置</span></span><br><span class="line"><span class="comment">//  位置先假定为下标为0，用变量minIndex存储</span></span><br><span class="line"><span class="comment">//  当更新最小值时，同时把minIndex更新即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4 求一组数中的最大值和最小值以及所在位置</span></span><br><span class="line"><span class="comment">//  上面两个合在一起写即可</span></span><br></pre></td></tr></table></figure><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><h5 id="ヾ-๑╹◡╹-ﾉ”数组遍历的练习2"><a href="#ヾ-๑╹◡╹-ﾉ”数组遍历的练习2" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”数组遍历的练习2"></a>ヾ(๑╹◡╹)ﾉ”数组遍历的练习2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"bb"</span>,<span class="string">"ccc"</span>,<span class="string">"dddd"</span>];</span><br><span class="line"><span class="comment">//1.让一个数组倒序保存另一个数组中的每一项</span></span><br><span class="line"><span class="comment">//  1、先把第一个数组倒序遍历</span></span><br><span class="line"><span class="comment">//  2、把倒序遍历的值存在数组中 newArr.push(arr[i])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 将字符串数组用|或其他符号分割</span></span><br><span class="line"><span class="comment">//  1、遍历数组</span></span><br><span class="line"><span class="comment">//  2、把每一项拼接字符串</span></span><br><span class="line"><span class="comment">//  3、在拼串的时候，中间加一个|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 有一个字符串数组，求字符串数组中每项的长度，并把长度的数值存储到新的数组中</span></span><br><span class="line"><span class="comment">//  1、打印出字符串数组中，每一项的长度: var str = arr[i];console.log(str.length);</span></span><br><span class="line"><span class="comment">//  2、把打印的结果放到新数组中去：newArr.push(str.length);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>];</span><br><span class="line"><span class="comment">//4 将数组中值为0的项去掉，将不为0的值存入一个新的数组</span></span><br><span class="line"><span class="comment">//   1、打印出数组中有除了0以外的数字（打印非0的数字）</span></span><br><span class="line"><span class="comment">//   2、把非0的数字存到新数组中</span></span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><blockquote><p>冒泡排序法属于算法的范畴，同学们一开始想不到很正常，不要纠结怎么想出来的，因为这都是前人长久的思考不断优化得来的。</p><p>关键点在于听懂思路。</p></blockquote><p><strong>排序：</strong>让一组没有顺序的数字，经过排列，排成一组有顺序的数字</p><blockquote><p><code>[3,2,4,1,5,7,9,8,6]</code>——》<code>[1,2,3,4,5,6,7,8,9]</code> ——》从小到大排序（升序）</p></blockquote><p><strong>冒泡：</strong>指的是排序的方式，小的在前面，大的在后面</p><blockquote><p>思路：两两比较，让较大的放到后面，一趟下来可以求出一个最大值。</p></blockquote><p><img src="/images/Bubble-sort-example-300px-1573908485522.gif" alt="Bubble-sort-example-300px"></p><p><strong>冒泡排序法的铺垫</strong></p><blockquote><p>冒泡排序：两两比较，让大的数排到后面去！！</p></blockquote><ul><li><p>交换两个数的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">var</span> temp = num1;</span><br><span class="line">    num1 = num2;</span><br><span class="line">    num2 = temp;</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"><span class="built_in">console</span>.log(num2);</span><br></pre></td></tr></table></figure></li><li><p>让数组中的最大值，跑到最后</p><ol><li><p>遍历数组</p></li><li><p>让 arr[i] 和 arr[i+1] 比较</p><blockquote><p>让当前元素与后一个比较</p></blockquote></li><li><p>如果 arr[i] &gt; arr[i+1]，表示前面的比后面的大，此时交换位置（往后沉）</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、 让数组中的一个最大值，跑到最后</span></span><br><span class="line"><span class="comment">//     1、遍历数组</span></span><br><span class="line"><span class="comment">//     2、让 arr[i] 和 arr[i+1] 比较</span></span><br><span class="line"><span class="comment">//     3、如果 arr[i] &gt; arr[i+1], 表示前面的比后面的大，此时交换位置</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 让 arr[i] 和 arr[i+1] 比较</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// 交换位置</span></span><br><span class="line">        <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">        arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul><h5 id="冒泡排序初级版本"><a href="#冒泡排序初级版本" class="headerlink" title="冒泡排序初级版本"></a>冒泡排序初级版本</h5><blockquote><p>找最大值的代码多执行几遍（0~arr.length-1）即可</p><p>双重for循环</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 外层for控制趟数, 7个数, 只需要比6趟即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="comment">// 一趟下来, 比出一个最大值, 7个数, 两两比较, 比6次即可</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 让 arr[i] 和 arr[i+1] 比较</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 交换位置</span></span><br><span class="line">            <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">            arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h5 id="————————-3"><a href="#————————-3" class="headerlink" title="————————"></a>————————</h5><h5 id="冒泡排序的中级版本"><a href="#冒泡排序的中级版本" class="headerlink" title="冒泡排序的中级版本"></a>冒泡排序的中级版本</h5><blockquote><p>优化点：每一趟比较之后，都可以比上一趟少比较一次</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="comment">// 每趟下来, 比上一趟少一次，累计每一趟可以少比较j次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">            arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p><strong>假设成立法：</strong></p><blockquote><p>对于某一些问题来说，可以先假设结果为多少，然后找打脸的情况</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 需求: 判断这个数组是否全是偶数</span></span><br><span class="line"><span class="comment">//   思路：先假设数组中全是偶数true，如果发现打脸的（有奇数），那么假设错误为false，就不全是偶数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 需求: 判断这个数组, 是否已经从小到大排好的</span></span><br><span class="line"><span class="comment">//   思路：先假设已经排好了true，如果一趟比较下来进行了交换（打脸了，还没比好），此时知道还没比好</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>];</span><br></pre></td></tr></table></figure><h5 id="冒泡排序法的高级版本"><a href="#冒泡排序法的高级版本" class="headerlink" title="冒泡排序法的高级版本"></a>冒泡排序法的高级版本</h5><blockquote><p>优化点：以下特殊情况</p><ul><li>如果数组本身排好序的，那么不需要排很多次</li><li>如果数组第一趟下来就排好了，后面的不需要排了</li></ul><p>假设成立法：假设这一趟已经排好了（那么一趟下来不会交换），设置变量flag=true，当交换的时候设置flag=false。</p><ul><li>如果真的排好了，一趟下来flag还是true，此时结束循环break</li><li>如果还没排好，一趟下来flag会改成false，此时不执行break</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;<span class="comment">// 假设这一趟已经排好的，true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">            arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">            flag = <span class="literal">false</span>; <span class="comment">// 只要交换位置，表示这一趟还没排好，下一次继续</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">// 如果flag在这一趟下来没有改变，还是true，说明已经排好，此时结束循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h1 id="函数基础知识"><a href="#函数基础知识" class="headerlink" title="函数基础知识"></a>函数基础知识</h1><h2 id="为什么要学习函数"><a href="#为什么要学习函数" class="headerlink" title="为什么要学习函数"></a>为什么要学习函数</h2><blockquote><p>在写代码的时候，有一些常用的代码需要书写多次，如果直接复制粘贴的话，会造成大量的冗余代码。</p><p>此时可以利用函数，将一段重复的代码进行封装（放到一块）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一天, 讲一遍故事</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'从前有座山'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'山里有座庙'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'庙里有个老和尚'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'老和尚给小和尚讲故事'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二天, 讲一遍故事</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'从前有座山'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'山里有座庙'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'庙里有个老和尚'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'老和尚给小和尚讲故事'</span>);</span><br><span class="line">......</span><br><span class="line">重复的代码（冗余）</span><br></pre></td></tr></table></figure><p><strong>函数的好处：</strong>函数可以一次声明，多次调用！！</p><h5 id="————————-4"><a href="#————————-4" class="headerlink" title="————————"></a>————————</h5><h3 id="函数的声明与调用"><a href="#函数的声明与调用" class="headerlink" title="函数的声明与调用"></a>函数的声明与调用</h3><p><strong>函数的声明语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line">函数体（需要重复的代码）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数调用的语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个讲故事的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tellStory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'从前有座山'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'山里有座庙'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'庙里有个老和尚'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'老和尚再给小尼姑讲故事'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用讲故事的函数</span></span><br><span class="line">tellStory()；</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><p>函数可以把一段重复的代码进行封装</p></li><li><p>函数一次声明，可以多次调用</p><blockquote><p>类似于录音机录了一次之后，可以播放很多次</p></blockquote></li><li><p>函数只声明，函数体是不会执行的</p><blockquote><p>类似于录音机有音乐，不会自己播放</p></blockquote></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-函数声明与调用练习"><a href="#ヾ-๑╹◡╹-ﾉ”-函数声明与调用练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 函数声明与调用练习"></a>ヾ(๑╹◡╹)ﾉ” 函数声明与调用练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 封装一个打招呼的函数</span></span><br><span class="line"><span class="comment">// 2. 封装一个函数，计算两个数的和</span></span><br><span class="line"><span class="comment">// 3. 封装一个函数，计算1-100之间所有数的和</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/js基础day03部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js基础" scheme="http://yoursite.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js基础day02笔记</title>
    <link href="http://yoursite.com/2020/02/10/1-js%E5%9F%BA%E7%A1%80day02%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/10/1-js基础day02笔记/</id>
    <published>2020-02-10T02:00:02.000Z</published>
    <updated>2020-03-11T11:09:04.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/js基础day02部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标（全天模式）"><a href="#学习目标（全天模式）" class="headerlink" title="学习目标（全天模式）"></a>学习目标（全天模式）</h1><blockquote><ul><li><p>[ ] 能够把其它转换成Number类型/String类型</p></li><li><p>[ ] 能够使用if语句实现求两个数最大值</p></li><li><p>[ ] 能够写出数字补0案例</p></li><li><p>[ ] 能够使用switch完成查询水果案例</p></li><li><p>[ ] 能够说出switch和if else if的区别</p></li><li><p>[ ] 能够使用循环语句重复执行一段代码</p></li><li><p>[ ] 能够使用断点调试代码</p></li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="比较运算符（关系运算符）"><a href="#比较运算符（关系运算符）" class="headerlink" title="比较运算符（关系运算符）"></a>比较运算符（关系运算符）</h2><blockquote><p> &lt;、 &lt;= 、&gt; 、&gt;=、==、!=、=== 、!==</p><p> 比较运算符的结果是布尔类型（true/false）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &gt; 、&gt;= 、&lt; 、&lt;=  比较大小、结果（返回的）为布尔值（简单的过一遍）</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a &gt; b);<span class="comment">//大于</span></span><br><span class="line"><span class="built_in">console</span>.log(a &lt; b);<span class="comment">//小于</span></span><br><span class="line"><span class="built_in">console</span>.log(a &gt;= b);<span class="comment">//大于等于 =》 大于或者等于  都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(a &lt;= b);<span class="comment">//小于等于</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ==（等于）、 !=（不等于）（需要说明）</span></span><br><span class="line"><span class="comment">// 比较的只是内容，不比较类型</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">12</span> == <span class="number">12</span> );<span class="comment">// 是否相等 true</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">12</span> == <span class="string">'12'</span> );<span class="comment">// 是否相等 true</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">12</span> != <span class="string">'12'</span> );<span class="comment">// 是否不相等 false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">12</span> != <span class="number">23</span> );<span class="comment">// 是否不等于 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ===（全等于）、!==（不全等）（需要区别）</span></span><br><span class="line"><span class="comment">// 比较：内容 + 类型</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">12</span> === <span class="number">12</span>);<span class="comment">// true 内容和类型都相等</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">12</span> === <span class="string">'12'</span>);<span class="comment">// false 内容相等，但是类型不等</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">12</span> !== <span class="string">'12'</span>);<span class="comment">// true 内容相等，类型不等，不全等</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li><code>= 赋值</code> 把一个值赋值给变量 </li><li><code>== 相等</code>  只比较内容 （只要内容相等就是true）。<code>12 == &#39;12&#39; =&gt; true</code></li><li><code>=== 全等</code> 比较内容和类型（必须内容和类型都相等才是true）。<code>12 === &#39;12&#39; =&gt; false</code></li></ul><h2 id="运算符优先级（了解）"><a href="#运算符优先级（了解）" class="headerlink" title="运算符优先级（了解）"></a>运算符优先级（了解）</h2><blockquote><p>运算符之间存在优先级关系（先算哪个呢？）</p></blockquote><ul><li><p><code>()</code>的优先级最高</p></li><li><p>一元运算符 <code>（++、--、!）</code></p></li><li><p>算术运算符 <code>（先 *、/、%, 后 +、- ）</code></p></li><li><p>比较运算符<code>(先 &gt;、&lt;、 &gt;= 、&lt;=， 后== 、=== 、!= 、!==)</code></p></li><li><p>逻辑运算符<code>（先 &amp;&amp; 后 || ）</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记忆方法：</span></span><br><span class="line"><span class="number">1</span>、() 优先级最高 。&amp;&amp; || 优先级最低</span><br><span class="line"><span class="number">2</span>、一元也高，</span><br><span class="line"><span class="number">3</span>、中间是算术和比较。先算出来再比较</span><br></pre></td></tr></table></figure><p><strong>不用死记，在开发过程中要先算的直接使用()增加优先级即可！！</strong></p><h5 id="ヾ-๑╹◡╹-ﾉ”猜猜看"><a href="#ヾ-๑╹◡╹-ﾉ”猜猜看" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”猜猜看"></a>ヾ(๑╹◡╹)ﾉ”猜猜看</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = ((<span class="number">4</span> &gt;= <span class="number">6</span>) || (<span class="string">"天"</span> != <span class="string">"地"</span>)) &amp;&amp; !(((<span class="number">12</span> * <span class="number">2</span>) == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h1 id="表达式的介绍（了解）"><a href="#表达式的介绍（了解）" class="headerlink" title="表达式的介绍（了解）"></a>表达式的介绍（了解）</h1><p><strong>表达式：</strong>就是可以由数字、运算符、变量等组成的有结果的式子</p><blockquote><p>比如：1 + 1 、a++、++num、a、b、’abc’、123……，一般可以直接打印出结果的就是一个表达式</p></blockquote><p>表达式的特点：表达式最终都会有一个结果，返回给我们。</p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="为什么要进行类型转换"><a href="#为什么要进行类型转换" class="headerlink" title="为什么要进行类型转换"></a>为什么要进行类型转换</h2><blockquote><p>在实际的开发过程中，有时候需要进行不同数据类型之间的转换</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如输入年龄，计算明年的年龄，演示使用输入框获取数据，此时获取的数据是字符串，如果直接相加是拼接</span></span><br><span class="line"> <span class="keyword">var</span> age = prompt();<span class="comment">// 此时age是一个字符串</span></span><br><span class="line"> <span class="built_in">console</span>.log( age + <span class="number">1</span> );<span class="comment">// + 两边中有一个是字符串，所以是字符串的拼接，但是真正需要实现的是加法运算</span></span><br></pre></td></tr></table></figure><h2 id="转换成数字类型"><a href="#转换成数字类型" class="headerlink" title="转换成数字类型"></a>转换成数字类型</h2><blockquote><p>转换成number类型</p></blockquote><ul><li><p><strong>Number（值）</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'300'</span>;<span class="comment">// str 是字符串 字符串打印是黑色</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Number</span>(str) );<span class="comment">// 数字类型打印是蓝色</span></span><br></pre></td></tr></table></figure></li><li><p><strong>parseInt（值）</strong></p><blockquote><p>把数据转换成数字类型（只能是整数）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'300'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseInt</span>(str) );<span class="comment">// 300</span></span><br><span class="line"><span class="comment">// -----------------------------------只能转换出整数部分，从小数点开始不转换</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'3.1415926'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseInt</span>(str) );<span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>parseFloat（值）</strong></p><blockquote><p>把数据转换成数字类型（可以是浮点数）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'300'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseFloat</span>(str) );<span class="comment">// 300</span></span><br><span class="line"><span class="comment">// -----------------------------------可以转换成小数</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'3.1415926'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( parseFloatt(str) );<span class="comment">// 3.1415926</span></span><br></pre></td></tr></table></figure><p><strong>特殊用法：</strong> parseInt（）和parseFloat（）可以获取字符串开头的数字</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之后可能会需要计算样式属性值，此时可以通过以上方法提取开头的数字</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'100px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str));</span><br></pre></td></tr></table></figure></li><li><p><strong>进行运算</strong></p><ul><li><p>算术运算符中除了+之外，其他元素运算符只有运算的功能，都会转化成数字类型</p><blockquote><p>所以只需要进行不改变值的计算即可</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'600'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str - <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str * <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str / <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>正号（用的最多）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'600'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( +str);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h2><blockquote><p>转换成字符串，手动加””即可，但是项目中需要通过js来控制</p></blockquote><ul><li><p><strong>String（值）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(num));<span class="comment">// 字符串的100</span></span><br></pre></td></tr></table></figure></li><li><p><strong>值.toString（）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log( num.toString() );<span class="comment">// 字符串的100</span></span><br></pre></td></tr></table></figure></li><li><p><strong>拼接字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log( num + <span class="string">'abc'</span> );<span class="comment">// 字符串 100abc</span></span><br><span class="line"><span class="built_in">console</span>.log( num + <span class="string">''</span> );<span class="comment">// 字符串的 100</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h2 id="转换成布尔类型（boolean）"><a href="#转换成布尔类型（boolean）" class="headerlink" title="转换成布尔类型（boolean）"></a>转换成布尔类型（boolean）</h2><blockquote><p>所有的值都可以转换成布尔类型    </p></blockquote><ul><li><p><strong>Boolean（值）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="number">123</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="string">'123'</span>) );</span><br></pre></td></tr></table></figure></li></ul><p><strong>转化布尔类型的规则：</strong>只有 <code>0</code>、 <code>&quot;&quot;</code>、 <code>undefined</code>、<code>null</code>、<code>false</code>、  <code>NaN</code>、这6个值会转换成false，其他都是true。</p><h5 id="ヾ-๑╹◡╹-ﾉ”-容易错的几个"><a href="#ヾ-๑╹◡╹-ﾉ”-容易错的几个" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 容易错的几个"></a>ヾ(๑╹◡╹)ﾉ” 容易错的几个</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"false"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"0"</span>));</span><br></pre></td></tr></table></figure><ul><li><p>!! 非非</p><blockquote><p>取反一次可以转化成布尔值，但是结果不对，所以需要取反两次保证值一样。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Boolean</span>(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log( !<span class="number">3</span> );</span><br><span class="line"><span class="built_in">console</span>.log( !!<span class="number">3</span> );</span><br></pre></td></tr></table></figure></li></ul><h2 id="NaN（了解）"><a href="#NaN（了解）" class="headerlink" title="NaN（了解）"></a>NaN（了解）</h2><blockquote><p>NaN：<code>NaN：not a number</code> </p></blockquote><p>在js中，如果把<strong>无法用数字表示的值</strong>转换为数字类型，此时浏览器不会报错，会用NaN表示。</p><blockquote><p>如果代码中出现了NaN，表示代码中有问题，将不能转换为数字的数据转化为数字了！</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( +str );<span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li><p>NaN的类型是number类型，表示一个非数字</p></li><li><p>NaN不等于任何值，包括它自己（六亲不认）</p></li></ul><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><blockquote><p>程序的三种基本结构</p></blockquote><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><blockquote><p>从上往下执行的代码就是顺序结构</p></blockquote><p><strong>程序默认就是由上往下一行一行的顺序执行的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'哈哈1'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'哈哈2'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'哈哈3'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'哈哈4'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'哈哈5'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'哈哈6'</span> );</span><br></pre></td></tr></table></figure><p><img src="/images/顺序结构.png" alt="顺序结构"></p><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><blockquote><p>分支结构：也叫选择结构，根据不同的情况，执行对应代码</p><p>比如路过一家烤鸭店~</p></blockquote><p><img src="/images/分支结构.png" alt="分支结构"></p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><blockquote><p>循环结构：重复做一件事情</p><p>比如男男女女的事情~</p></blockquote><p><img src="/images/循环结构.png" alt="循环结构"></p><h1 id="分支结构-1"><a href="#分支结构-1" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><ul><li><p><strong>单独的if语句</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 只有当满足条件时（true），才执行代码</span></span><br><span class="line">    代码；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------</span></span><br><span class="line"><span class="comment">// 如果成年了，就吃鸡了</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'今晚吃鸡，大吉大利'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>if…else语句</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 当满足条件1时，执行的代码1</span></span><br><span class="line">    代码<span class="number">1</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当不满足条件1时，执行的代码2（否则）</span></span><br><span class="line">    代码<span class="number">2</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------------------------</span></span><br><span class="line"><span class="comment">// 如果是成年人去吃鸡，否则喜洋洋</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'快去吃鸡'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'回家喜洋洋'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>if…else if…else语句</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 当条件1为 true（满足条件1） 时执行的代码1</span></span><br><span class="line">    代码<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">// 当条件2 为true (满足条件2) 时执行的代码2</span></span><br><span class="line">    代码<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当条件1和 条件2 都不为true （上面所有条件都不满足）时执行的代码3</span></span><br><span class="line">    代码<span class="number">3</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------</span></span><br><span class="line"><span class="comment">// 如果是0~18岁，回家喜洋洋</span></span><br><span class="line"><span class="comment">// 如果是18~80岁，吃鸡</span></span><br><span class="line"><span class="comment">// 如果是80以上，广场舞等你</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"回家喜洋洋"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃鸡"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"广场舞等你"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><h5 id="ヾ-๑╹◡╹-ﾉ”-if语句小练习："><a href="#ヾ-๑╹◡╹-ﾉ”-if语句小练习：" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” if语句小练习："></a>ヾ(๑╹◡╹)ﾉ” if语句小练习：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、判断一个数是偶数还是奇数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、求两个数中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、素质教育，把百分制分数转换成ABCDE   </span></span><br><span class="line"><span class="comment">//      A: 90-100</span></span><br><span class="line"><span class="comment">//      B: 80-89</span></span><br><span class="line"><span class="comment">//      C: 70-79</span></span><br><span class="line"><span class="comment">//      D: 60-69 </span></span><br><span class="line"><span class="comment">//      E: 0-59</span></span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><blockquote><p>用于处理简单的判断</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="comment">// var 最终结果 = 判断条件 ? 表达式1 ： 表达式2;</span></span><br><span class="line"><span class="comment">// 如果条件满足（true）， 最终结果就是表达式1的结果， </span></span><br><span class="line"><span class="comment">// 如果条件不满足（false），最终结果就是表达式2的结果</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-小练习"><a href="#ヾ-๑╹◡╹-ﾉ”-小练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 小练习"></a>ヾ(๑╹◡╹)ﾉ” 小练习</h5><blockquote><p>可以先使用if…else完成，再改写成三元表达式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、求两个数的最小值</span></span><br><span class="line"><span class="comment">// 2、求三个数的最小值</span></span><br><span class="line"><span class="comment">// 3、数字补0案例：用户输入一个数字，如果数字小于10，则在前面补0（比如：01/02/03...得到的是字符串类型的数据），如果数字大于10，则不需要补（比如：20/30/40...）</span></span><br></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><blockquote><p>switch..case可以用来判断具体值的情况</p></blockquote><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">如果表达式的结果等于值1, 执行语句1,</span></span><br><span class="line"><span class="comment">如果表达式的结果等于值2, 执行语句2</span></span><br><span class="line"><span class="comment">....</span></span><br><span class="line"><span class="comment">如果都不满足, 执行default默认语句</span></span><br><span class="line"><span class="comment">注意：break会结束整个switch, 跳出整个switch, 接着往下执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  …</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    默认语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需求：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请输入一个数字 0-6 之间,  0表示周日, 1表示周1, 2表示周2 ....在输入框中输入，在控制台中打印结果</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>switch语句进行的是全等比较，值和类型都相同才满足条件（10和’10’不同）</li><li>如果break省略了，代码会继续执行下一个case。</li></ul><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><h5 id="ヾ-๑╹◡╹-ﾉ”-switch测试题"><a href="#ヾ-๑╹◡╹-ﾉ”-switch测试题" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” switch测试题"></a>ヾ(๑╹◡╹)ﾉ” switch测试题</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"10"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"20"</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"30"</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"啦啦啦"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-switch小练习"><a href="#ヾ-๑╹◡╹-ﾉ”-switch小练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” switch小练习"></a>ヾ(๑╹◡╹)ﾉ” switch小练习</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询水果案例：用户在输入框中输入一个水果，如果有该水果就弹出价格，如果没有该水果就弹出"没有此水果"</span></span><br></pre></td></tr></table></figure><p><img src="/images/查询水果案例.gif" alt="查询水果案例"></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>if…else适合：范围性的判断（条件是一个范围）</li><li>switch适合：具体值的判断（条件为是否是一个具体的值）</li><li>三元运算符：可以改写简单的if…else语句</li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-作业"><a href="#ヾ-๑╹◡╹-ﾉ”-作业" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 作业"></a>ヾ(๑╹◡╹)ﾉ” 作业</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习1：土豪的儿子, 输入ABCDE</span></span><br><span class="line"><span class="comment">//如果考了A：  买玛莎拉蒂</span></span><br><span class="line"><span class="comment">//如果考了B：  买宝马</span></span><br><span class="line"><span class="comment">//如果考了C：  买三轮</span></span><br><span class="line"><span class="comment">//如果考了D：  买摩拜自行车</span></span><br><span class="line"><span class="comment">//如果考了E：  断绝父子关系</span></span><br><span class="line"><span class="comment">//如果是其他值，提示代码有bug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习2： 买手机，输入自己的工资</span></span><br><span class="line">   <span class="comment">//如果超过30000:  买苹果手机</span></span><br><span class="line">   <span class="comment">//如果10000-30000： 买vivo手机</span></span><br><span class="line">   <span class="comment">//如果5000-10000 ： 买魅族手机</span></span><br><span class="line">   <span class="comment">//如果低于5000   ： 买个锤子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习3： 输入自己的银行卡金额</span></span><br><span class="line"><span class="comment">//如果超过10000  : 高富帅</span></span><br><span class="line">    <span class="comment">//如果不超过      ：穷矮丑</span></span><br></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><blockquote><p>在javascript中，循环语句有三种while、do..while、for循环。</p></blockquote><p><strong>需求：</strong> 需要打印1~5怎么做？</p><ul><li><p>很简单，写5个console.log即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>那么打印1~100还能这么写吗？</p></li></ul><p>针对于需要<strong>重复执行的代码</strong>，此时就需要使用循环语句完成</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><blockquote><p>先问可不可以，同意了再执行代码……</p></blockquote><p><img src="/images/while-1573811233853.png" alt=""></p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">  循环体；<span class="comment">// 重复执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1、先判断条件，如果成立（true），执行循环体</span></span><br><span class="line"><span class="comment">2、再判断条件，如果成立（true），执行循环体</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">当条件不成立（false）时，此时跳出循环（执行循环之后的代码）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-通过while循环，打印-1-5-，再打印-1-100，再求和？"><a href="#ヾ-๑╹◡╹-ﾉ”-通过while循环，打印-1-5-，再打印-1-100，再求和？" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 通过while循环，打印 1~5 ，再打印 1~100，再求和？"></a>ヾ(๑╹◡╹)ﾉ” 通过while循环，打印 <code>1~5</code> ，再打印 <code>1~100</code>，再求和？</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">// 初始化语句</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">// 循环体：重复执行的代码</span></span><br><span class="line">    i++;<span class="comment">// 自增</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我是循环体之后的代码'</span>);</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>循环一定要能结束（否则就是死循环）——》<strong>在循环体中，需要让条件中的变量能变化！！！</strong></li></ul><h5 id="————————-3"><a href="#————————-3" class="headerlink" title="————————"></a>————————</h5><h5 id="ヾ-๑╹◡╹-ﾉ”-while的练习"><a href="#ヾ-๑╹◡╹-ﾉ”-while的练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” while的练习"></a>ヾ(๑╹◡╹)ﾉ” while的练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 计算1~100之间所有偶数的和</span></span><br><span class="line"><span class="comment">//  1、先打印1~100</span></span><br><span class="line"><span class="comment">//  2、打印1~100所有的偶数</span></span><br><span class="line"><span class="comment">//  3、累加</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 循环表白案例：弹出一个确认框confirm，问是否爱我，如果选择不，就一直问，直到是为止</span></span><br></pre></td></tr></table></figure><p><img src="/images/循环表白案例.gif" alt="循环表白案例"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 循环登录案例：弹出一个输入框prompt，只有当用户输入admin的时候才能登录成功，如果不正确，就一直弹框</span></span><br></pre></td></tr></table></figure><p><img src="/images/循环登录案例.gif" alt="循环登录案例"></p><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do..while循环"></a>do..while循环</h2><blockquote><p>do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。</p><p>区别在于：先执行一遍，再问可不可以，同意了在执行一遍……</p></blockquote><p><img src="/images/dowhile-1573811233854.png" alt=""></p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  循环体；<span class="comment">// 重复执行的代码</span></span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1、先执行一遍循环体</span></span><br><span class="line"><span class="comment">2、再判断条件，如果成立（true），执行循环体</span></span><br><span class="line"><span class="comment">3、再判断条件，如果成立（true），执行循环体</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">当条件不成立（false）时，此时跳出循环（执行循环之后的代码）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-通过do…while循环，打印-1-5-，再打印-1-100"><a href="#ヾ-๑╹◡╹-ﾉ”-通过do…while循环，打印-1-5-，再打印-1-100" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 通过do…while循环，打印 1~5 ，再打印 1~100"></a>ヾ(๑╹◡╹)ﾉ” 通过do…while循环，打印 <code>1~5</code> ，再打印 <code>1~100</code></h5><blockquote><p>先使用while语句写出来，再通过do…while改写一下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">// 初始化语句</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);<span class="comment">// 循环体</span></span><br><span class="line">  i++;<span class="comment">//自增</span></span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt;= <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li><p><strong>区别</strong></p><ul><li><p>while语句：先判断，如果成立，再执行循环体……</p><blockquote><p>如果条件开始就不成立，一次都不会执行</p></blockquote></li><li><p>do…while语句：先执行循环体，再判断，如果成立，再执行循环体……</p><blockquote><p>如果条件开始就不成立，也会执行一次</p></blockquote></li></ul></li><li><p>while用的场景较多，do…while很少会用到，但是需要知道区别。</p></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-do…while的练习"><a href="#ヾ-๑╹◡╹-ﾉ”-do…while的练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” do…while的练习"></a>ヾ(๑╹◡╹)ﾉ” do…while的练习</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 计算1~100之间所有偶数的和</span></span><br><span class="line"><span class="comment">//  1、先打印1~100</span></span><br><span class="line"><span class="comment">//  2、打印1~100所有的偶数</span></span><br><span class="line"><span class="comment">//  3、累加</span></span><br></pre></td></tr></table></figure><blockquote><p>课后自己试着把之前的while连写改写成do…while看看可不可以</p></blockquote><h2 id="for循环（重点）"><a href="#for循环（重点）" class="headerlink" title="for循环（重点）"></a>for循环（重点）</h2><blockquote><p>写while循环的经常会忘记自增，for循环其实是while循环演化过来的，语法更加的简洁明了，使用非常的广泛。</p></blockquote><p><img src="/images/for-1573811233854.png" alt=""></p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句;判断条件;自增或自减)&#123;</span><br><span class="line">  循环体</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、先执行初始化语句</span></span><br><span class="line"><span class="comment">2、再判断条件，如果成立（true）执行循环体，再自增或自减</span></span><br><span class="line"><span class="comment">3、再判断条件，如果成立（true），执行循环体，再自增或自减</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">当条件不成立时（false），跳出循环</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>顺序：</strong></p><ul><li><p>语句</p><ol><li>初始化语句</li><li>判断条件</li><li>自增或者自减</li><li>循环体</li></ol></li><li><p>序号表示顺序：</p><ul><li>1243</li><li>243</li><li>243</li><li>…..</li></ul></li><li>初始化语句只执行一次，之后就是243一直循环</li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-先使用while语句完成打印-1-5-，再改写成for循环，再打印-1-100"><a href="#ヾ-๑╹◡╹-ﾉ”-先使用while语句完成打印-1-5-，再改写成for循环，再打印-1-100" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 先使用while语句完成打印 1~5 ，再改写成for循环，再打印 1~100"></a>ヾ(๑╹◡╹)ﾉ” 先使用while语句完成打印 <code>1~5</code> ，再改写成for循环，再打印 <code>1~100</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="————————-4"><a href="#————————-4" class="headerlink" title="————————"></a>————————</h5><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><blockquote><p>对于以上for循环的执行顺序，可以通过断点调试查看代码执行的顺序</p><p>先简单了解，之后会不断拓展用法</p></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”-使用for循环计算1-100所有数的和"><a href="#ヾ-๑╹◡╹-ﾉ”-使用for循环计算1-100所有数的和" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 使用for循环计算1~100所有数的和"></a>ヾ(๑╹◡╹)ﾉ” 使用for循环计算1~100所有数的和</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><blockquote><p>接下来通过断点调试查看以上代码的执行顺序</p></blockquote><p><strong>操作：</strong></p><ul><li><p><strong>设置断点</strong></p><ol><li><p>打开控制台，查看sources窗口，点开对应的文件</p></li><li><p>在对应的行号上点一下（高亮表示一个断点），此时刷新页面，浏览器会自动在断点这一行停止执行。</p><blockquote><p>打上断点好比告诉浏览器代码执行到这一行，停下来容我看看</p></blockquote></li></ol></li><li><p><strong>如何查看</strong></p><ul><li><p>watch窗口：在右侧+中写变量名，可以监视变量值的变化</p><blockquote><p>watch中会实时展示该变量当前的值是多少</p></blockquote></li><li><p>往下执行一步（第二个按钮）：可以让代码往下执行一步</p></li><li><p>执行到下一个断点（第一个按钮）：可以让代码瞬间执行到下一个断点的位置停下</p></li></ul></li><li><p>调试完断点之后记得再点击一下删除掉，否则重新刷新又会在断点处停下。</p></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-for循环练习1"><a href="#ヾ-๑╹◡╹-ﾉ”-for循环练习1" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” for循环练习1"></a>ヾ(๑╹◡╹)ﾉ” for循环练习1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 求1-100之间所有数的和、平均值(和除以个数即可)</span></span><br><span class="line"><span class="comment">//2 求1-100之间所有数的乘积</span></span><br><span class="line"><span class="comment">//3 计算1-100之间能3整除的数的和</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-for循环练习2"><a href="#ヾ-๑╹◡╹-ﾉ”-for循环练习2" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” for循环练习2"></a>ヾ(๑╹◡╹)ﾉ” for循环练习2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 计算1-100之间不能被7整除的数的和</span></span><br><span class="line"><span class="comment">//2 同时求1-100之间所有偶数的和，奇数的和</span></span><br></pre></td></tr></table></figure><h5 id="—————————"><a href="#—————————" class="headerlink" title="—————————"></a>—————————</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/js基础day02部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js基础" scheme="http://yoursite.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js基础day01笔记</title>
    <link href="http://yoursite.com/2020/02/10/1-js%E5%9F%BA%E7%A1%80day01%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/10/1-js基础day01笔记/</id>
    <published>2020-02-10T02:00:01.000Z</published>
    <updated>2020-03-11T11:08:53.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/js基础day01部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标（全天模式）"><a href="#学习目标（全天模式）" class="headerlink" title="学习目标（全天模式）"></a>学习目标（全天模式）</h1><blockquote><ul><li><p>[ ] 能说出JavaScript三部分组成</p></li><li><p>[ ] 能够使用变量来存储数据</p></li><li><p>[ ] 能够说出变量的命名规范</p></li><li><p>[ ] 能够写出交换两个变量的值</p></li><li><p>[ ] 能够说出JavaScript中的基本数据类型</p></li><li><p>[ ] 能说出前置自增和后置自增运算符的区别</p></li><li><p>[ ] 能够使用一元运算符实现自身加1操作</p></li></ul><p>。。。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h1 id="JavaScript基本介绍（了解）"><a href="#JavaScript基本介绍（了解）" class="headerlink" title="JavaScript基本介绍（了解）"></a>JavaScript基本介绍（了解）</h1><h3 id="我们最开始认识的JS"><a href="#我们最开始认识的JS" class="headerlink" title="我们最开始认识的JS"></a>我们最开始认识的JS</h3><p>web标准的三部分（网页的三大部分）</p><ul><li><strong>HTML</strong>：控制页面的<strong>结构</strong></li><li><strong>CSS</strong>：控制页面的<strong>样式</strong></li><li><strong>JavaScript</strong>：控制网页的行为（动态效果）</li></ul><h3 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h3><blockquote><p>在学习JS之前，首先要明白JS的作用是什么？</p><p>远古时期：表单校验</p><p>现在：无所不能</p></blockquote><h4 id="最初的JavaScript：表单校验"><a href="#最初的JavaScript：表单校验" class="headerlink" title="最初的JavaScript：表单校验"></a>最初的JavaScript：表单校验</h4><ul><li>用于判断表单的输入是否正确（表单校验）</li></ul><h4 id="现在的JavaScript：无所不能"><a href="#现在的JavaScript：无所不能" class="headerlink" title="现在的JavaScript：无所不能"></a>现在的JavaScript：无所不能</h4><ul><li>前端的本职工作：网页中完成各种各样的特效</li><li>后端的事情也能做：服务端开发（nodejs）</li><li><p>前后端交互：异步与服务器交互（AJAX）</p></li><li><p>命令行工具开发（nodejs）</p></li><li>桌面程序（Electron）</li><li>app开发（ReatNative）</li><li>控制硬件——物联网（Ruff）</li><li>游戏开发（cavans）</li><li>等等……</li></ul><p>演示：<a href="https://www.html5tricks.com/8-html5-canvas-animation.html" target="_blank" rel="noopener">Canvas游戏</a> <a href="http://www.webhek.com/post/3d-album.html" target="_blank" rel="noopener">美女相册</a></p><h2 id="什么是JavaScript（知道）"><a href="#什么是JavaScript（知道）" class="headerlink" title="什么是JavaScript（知道）"></a>什么是JavaScript（知道）</h2><blockquote><p>JavaScript是一种运行在 <strong>浏览器</strong> 的 <strong>脚本语言</strong> ，现在也可以运行在服务器端</p></blockquote><p>不同于HTML和CSS，JavaScript是一门编程语言，因此比HTML和CSS会更加复杂一下，学习的时间也会更长。</p><h2 id="JavaScript历史（了解）"><a href="#JavaScript历史（了解）" class="headerlink" title="JavaScript历史（了解）"></a>JavaScript历史（了解）</h2><h3 id="开始阶段"><a href="#开始阶段" class="headerlink" title="开始阶段"></a>开始阶段</h3><ul><li>1995年，Netscape(网景)公司的<code>Brendan Eich(布兰登·艾奇)</code>（伊利诺伊大学香槟分校），花了10天时间为Netscape Navigator2.0开发了一个名为<code>LiveScript</code>的脚本程序，目的是在浏览器中执行预检测程序（表单校验）</li></ul><h3 id="发展阶段"><a href="#发展阶段" class="headerlink" title="发展阶段"></a>发展阶段</h3><ul><li>后来Netscape在与Sun合作之后将其改名为JavaScript。目的是为了利用 Java 这个因特网时髦词汇</li><li>微软发布了 IE 3.0 并搭载了一个 JavaScript 的克隆版，叫做 JScript（这样命名是为了避免与 Netscape 潜在的许可纠纷）</li></ul><h3 id="三足鼎立阶段"><a href="#三足鼎立阶段" class="headerlink" title="三足鼎立阶段"></a>三足鼎立阶段</h3><ul><li>CEnvi的scriptEase</li><li>Netscape的JavaScript</li><li>IE的JScript</li></ul><h3 id="标准化阶段"><a href="#标准化阶段" class="headerlink" title="标准化阶段"></a>标准化阶段</h3><ul><li>1997年，ECMA（欧洲计算机制造商协会）邀请了Netscape、Sun、微软、Borland等公司的一些程序员组成了TC39，最终锤炼出来了ECMA-262，该标准定义了一门全新的脚本语言，名为<code>ECMAScript</code>。</li></ul><h2 id="JavaScript的组成-记忆"><a href="#JavaScript的组成-记忆" class="headerlink" title="JavaScript的组成 (记忆)"></a>JavaScript的组成 (记忆)</h2><blockquote><p>JavaScript = ECMAScript + DOM + BOM</p></blockquote><p><img src="/images/javascript.png" alt="javascript"></p><ul><li><strong>ECMAScript（JavaScript的核心）</strong>：ECMAScript是一套标准，规范了语言的基本语法。</li><li><strong>DOM</strong>（Document Object Model）：一套操作网页元素的方法</li><li><strong>BOM</strong>（Browser Object Model）：一套操作浏览器功能的方法</li></ul><h1 id="JavaScript入门"><a href="#JavaScript入门" class="headerlink" title="JavaScript入门"></a>JavaScript入门</h1><h2 id="JavaScript书写位置"><a href="#JavaScript书写位置" class="headerlink" title="JavaScript书写位置"></a>JavaScript书写位置</h2><blockquote><p>css需要写在style标签中，而js需要写在script标签中</p></blockquote><ul><li><p><strong>写在<code>script</code>标签中</strong></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">'hello world'</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>写在一个单独的.js文件中，通过script的src属性引入即可</strong></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"demo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意点：</strong></p><ul><li>script标签可以放在很多地方，但是我们一般写在body标签内容的最下面</li><li>如果给script标签上有src属性，里面的代码会直接忽略</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>注释的作用就是：代码中可以看到，但是页面中不执行。注释仅仅起到一个提示的作用。</p></blockquote><ul><li><p><strong>单行注释</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释， 单行注释只能写一行代码</span></span><br><span class="line"><span class="comment">//  快捷键： ctrl + /  </span></span><br><span class="line"><span class="comment">// 注释的内容</span></span><br></pre></td></tr></table></figure></li><li><p><strong>多行注释</strong> </p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    这是多行注释，在多行注释中可以换行</span></span><br><span class="line"><span class="comment">    快捷键：alt + shift + a</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 注释的内容 */</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>在大家练习的时候，就养成一个喜欢写注释的好习惯！</p></blockquote><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h2 id="5种输出语句"><a href="#5种输出语句" class="headerlink" title="5种输出语句"></a>5种输出语句</h2><ul><li><p><strong>alert ： 弹框</strong></p><p>  <img src="/images/alert.png" alt="alert"></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//alert会弹出一个：弹框/警告框/提示框/弹窗</span></span><br><span class="line">alert(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>confirm ： 确认框</strong></p><p>  <img src="/images/confirm.png" alt="confirm"></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//confirm弹出一个确定框</span></span><br><span class="line">confirm(<span class="string">"偷电瓶车养你好不？"</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>prompt ： 输入框</strong></p><p>  <img src="/images/prompt.png" alt="prompt"></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//prompt：弹出一个输入框，可以输入值</span></span><br><span class="line">prompt(<span class="string">"请输入谁是最靓的仔！"</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>document.write ： 网页中写入内容</strong></p><p>  <img src="/images/document.png" alt="document"></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以识别标签</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;我是一个h1标签&lt;/h1&gt;"</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>控制台输出</strong></p><blockquote><p>也叫做控制台打印数据</p></blockquote><p>  <img src="/images/log.png" alt="log"></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开调试工具，选择Console选项（控制台），在console中可以看到打印的信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello word"</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意点：</strong></p><ul><li>alert、comfirm、prompt 三个用户体验不好，工作中几乎不用，但是在学习的时候会用到。</li><li><code>console.log</code>经常用来打印数据，项目调试的时候非常有用！！</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><blockquote><p>变量：可以变化的量（相当于一个储存数据的容器）</p><p>作用 ： 存储数据  </p><p>在使用变量之前需要先声明，才能使用变量。（相当于先做出一个容器，才能装东西）</p><p>声明 ：用 <strong>var（哇！）</strong>来声明</p><p>比如存储用户的年龄~年龄是不断变化的，可以使用变量存储</p></blockquote><h2 id="变量使用的几种形式（认识即可）"><a href="#变量使用的几种形式（认识即可）" class="headerlink" title="变量使用的几种形式（认识即可）"></a>变量使用的几种形式（认识即可）</h2><blockquote><p>规范：使用变量前要求声明</p><p>并且：初学者在写js一行语句写完之后，记得加上分号（规范），虽然不加分号也可以。</p></blockquote><ul><li><p><strong>先声明，后赋值</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age;  <span class="comment">// 声明一个变量 name</span></span><br><span class="line">age = <span class="number">18</span>; <span class="comment">// 一个等号表示赋值（把等号后面的赋值给前面的！）</span></span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure></li><li><p><strong>同时声明和赋值</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age2 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age2);</span><br></pre></td></tr></table></figure></li><li><p><strong>同时声明多个变量并赋值</strong></p><blockquote><p><strong>用的不多</strong> ，其实只是省略了一个var。</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ， =&gt; 并列</span></span><br><span class="line"><span class="keyword">var</span> age3 = <span class="number">30</span>，age4= <span class="number">40</span>;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> age3 = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> age4 = <span class="number">40</span>;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>直接声明变量，不赋值</strong></p><blockquote><p>变量的默认值是undefined</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age5;</span><br><span class="line"><span class="built_in">console</span>.log(age5);<span class="comment">// undefined =》 表示只声明，没有赋值</span></span><br></pre></td></tr></table></figure></li><li><p><strong>不声明变量，直接赋值</strong></p><blockquote><p>虽然浏览器可以识别，但是<strong>不推荐</strong>，这种写法之后会出现问题！！</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐 ，不符合规范</span></span><br><span class="line">age6 = <span class="number">60</span>;</span><br><span class="line"><span class="built_in">console</span>.log( age6 );</span><br></pre></td></tr></table></figure></li><li><p><strong>不声明变量，也不赋值变量，直接使用</strong></p><blockquote><p><strong>会报错！！！</strong></p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// age7 is not defined 表示是没有定义（说白了就是没有声明和赋值直接使用）</span></span><br><span class="line"><span class="built_in">console</span>.log(age7);</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意点：</strong></p><ul><li>js代码一旦报错了，后面的代码就不再执行了</li><li>变量需要声明之后，再使用，养成一个良好的编程习惯（规范）。</li></ul><h2 id="变量的命名规则和规范"><a href="#变量的命名规则和规范" class="headerlink" title="变量的命名规则和规范"></a>变量的命名规则和规范</h2><h3 id="命名规则（法律：必须遵守！！不遵守会报错！！）"><a href="#命名规则（法律：必须遵守！！不遵守会报错！！）" class="headerlink" title="命名规则（法律：必须遵守！！不遵守会报错！！）"></a>命名规则（法律：必须遵守！！不遵守会报错！！）</h3><ul><li><p>由数字、字母、_ 、$、组成 ，并且不能以数字开头</p><p>下列变量名是否符合规则?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a    </span><br><span class="line">1</span><br><span class="line">age18</span><br><span class="line">18age</span><br><span class="line">2b</span><br><span class="line">name</span><br><span class="line">$name</span><br><span class="line">_sex</span><br><span class="line">&amp;sex</span><br><span class="line">theworld</span><br><span class="line">a b</span><br></pre></td></tr></table></figure></li><li><p>区分大小写（大写和小写表示两个不同的变量）</p></li><li><p>不能是<strong>关键字</strong>或<strong>保留字</strong>（不用专门记忆，随着学习的深入不断会使用到）</p><blockquote><p>js中和语法相关的单词，不能作为变量名</p></blockquote><ul><li><strong>关键字</strong>：现在版本中语法相关的单词</li></ul><p><img src="/images/key1.png" alt="key1"></p><ul><li><strong>保留字</strong>：未来版本中语法相关的单词</li></ul><p><img src="/images/key2.png" alt="key2"></p></li></ul><h3 id="命名规范（道德：建议遵守，不遵守也不会报错）"><a href="#命名规范（道德：建议遵守，不遵守也不会报错）" class="headerlink" title="命名规范（道德：建议遵守，不遵守也不会报错）"></a>命名规范（道德：建议遵守，不遵守也不会报错）</h3><ul><li><p>变量名要有意义</p></li><li><p>遵守<strong>驼峰命名法</strong>。 从第二个单词开始首字母大写！</p><blockquote><p>为了可读性更好</p></blockquote><p>比如：userName、userAge</p></li></ul><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><h5 id="ヾ-๑╹◡╹-ﾉ”赋值的练习"><a href="#ヾ-๑╹◡╹-ﾉ”赋值的练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”赋值的练习"></a>ヾ(๑╹◡╹)ﾉ”赋值的练习</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. </span></span><br><span class="line"><span class="keyword">var</span>  a = <span class="number">10</span>;</span><br><span class="line">     a = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log( a );<span class="comment">// ??</span></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> b = a; <span class="comment">// 把a的值赋值给b</span></span><br><span class="line"><span class="built_in">console</span>.log( b );<span class="comment">// ?? </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>; <span class="comment">// 一个变量多次声明，只有第一次的声明生效！第二个声明相当于没写，但是赋值有效！！</span></span><br><span class="line"><span class="built_in">console</span>.log( a );<span class="comment">// ??</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-交换变量练习"><a href="#ヾ-๑╹◡╹-ﾉ”-交换变量练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 交换变量练习"></a>ヾ(๑╹◡╹)ﾉ” 交换变量练习</h5><p><strong>需求：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//要求：</span></span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log( b ); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><ul><li><p>使用临时变量、交换两个变量的值  <strong>（必须掌握！！记忆）</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                 <span class="comment">// a   b    temp</span></span><br><span class="line"><span class="keyword">var</span> temp = a;    <span class="comment">// 10  20    10</span></span><br><span class="line">       a = b; <span class="comment">// 20   20   10</span></span><br><span class="line">       b = temp; <span class="comment">// 20   10    10</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote><p>数据可以有多种类型，比如可以是数字（100，234……），也可以是一个文本（’棠哥’ 、’棠哥真帅！’，’小姐姐真漂亮’）、等等…….</p><p>我们需要学习数据类型，之后可以轻松的通过js操作不同的数据。</p></blockquote><p><strong>简单数据类型：</strong></p><ul><li>数字类型：number</li><li>字符串类型：string</li><li>布尔类型：boolean</li><li>undefined：声明未赋值</li><li>null：空类型</li></ul><p><strong>复杂数据类型：</strong></p><ul><li>数组：array</li><li>函数：function</li><li>对象：object</li></ul><h2 id="数字类型（number）"><a href="#数字类型（number）" class="headerlink" title="数字类型（number）"></a>数字类型（number）</h2><blockquote><p>所有数字都是数字类型</p></blockquote><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><h4 id="进制-拓展了解"><a href="#进制-拓展了解" class="headerlink" title="进制(拓展了解)"></a>进制(拓展了解)</h4><blockquote><p>在javascript中表示一个数字，除了有我们常用的十进制<code>11， 22，33</code>等，还可以使用八进制、十六进制表示等。</p></blockquote><ul><li>十进制 （0~9 逢十进一）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们最常用的进制，逢10进1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><ul><li>八进制（0~7 逢八进一）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0开头的数字（0只是一个标识），逢8进1</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">012</span>;</span><br></pre></td></tr></table></figure><ul><li>十六进制（0~9，a,b,c,d,e,f 逢十六进一）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0x开头的数字，逢16进1，  数字范围1-9A-F</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA</span>;<span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0x12</span>;<span class="comment">//1*16 + 2 = 18</span></span><br></pre></td></tr></table></figure><p><strong>tips ： 计算机只认识二进制，所有的代码最终都会转换成二进制数据</strong></p><h3 id="浮点数（小数）"><a href="#浮点数（小数）" class="headerlink" title="浮点数（小数）"></a>浮点数（小数）</h3><blockquote><p>浮点数就是小数</p></blockquote><h4 id="浮点数形式"><a href="#浮点数形式" class="headerlink" title="浮点数形式"></a>浮点数形式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0.1</span>;</span><br></pre></td></tr></table></figure><h4 id="科学计数法（了解）"><a href="#科学计数法（了解）" class="headerlink" title="科学计数法（了解）"></a>科学计数法（了解）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//e 10的多少次方  前面得有数字</span></span><br><span class="line"><span class="comment">//e+4 10^4</span></span><br><span class="line"><span class="comment">//e-4 10^-4</span></span><br><span class="line"><span class="comment">//当一次数字很大的时候，可以用科学计数法来表示</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1e+4</span>;  <span class="comment">//1乘以10的4次方</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1e-4</span>;<span class="comment">//1乘以10的-4次方</span></span><br></pre></td></tr></table></figure><h4 id="浮点数精度丢失问题（了解）"><a href="#浮点数精度丢失问题（了解）" class="headerlink" title="浮点数精度丢失问题（了解）"></a>浮点数精度丢失问题（了解）</h4><blockquote><p>尽量不要使用小数进行比较</p><p>计算机在计算小数时，有时计算会不准确。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在进行浮点数运算的时候，可能会出现精度丢失的问题</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> = <span class="number">0.30000000000000004</span>;<span class="comment">// 特殊情况</span></span><br><span class="line"><span class="comment">//尽量少用浮点数进行运算，不要让浮点数进行比较。</span></span><br></pre></td></tr></table></figure><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><h2 id="字符串类型（string）"><a href="#字符串类型（string）" class="headerlink" title="字符串类型（string）"></a>字符串类型（string）</h2><blockquote><p>使用双引号 <code>&quot;</code>  或者 <code>&#39;</code> 包裹起来的字符</p></blockquote><h3 id="字符串的格式"><a href="#字符串的格式" class="headerlink" title="字符串的格式"></a>字符串的格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双引号和单引号必须成对出现  以单引号开始到单引号结束都为字符串/以双引号开始到双引号结束都为字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><blockquote><p> 每一个字符串都有一个length属性，表示字符串长度（字符的个数）    </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"akdjflksjdflk"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><blockquote><p>1、如果要打印：好看的’外表’千篇一律</p><p>2、如果要打印：有趣的”灵魂”万里挑一</p><p>3、如果要打印：好看的’外表’千篇一律，有趣的”灵魂”万里挑一</p><p>怎么打印呢？？</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单引号和双引号可以互相嵌套，但是不能嵌套自己</span></span><br><span class="line"><span class="comment">// 如果需要打印单引号和双引号，可以使用转义符</span></span><br><span class="line"><span class="comment">// ' =&gt; \'</span></span><br><span class="line"><span class="comment">// " =&gt; \"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'你是喜欢\'好看\'的人，还是\"有趣\"的人'</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">输出</th></tr></thead><tbody><tr><td style="text-align:center"><code>\&#39;</code></td><td style="text-align:center"><strong>单引号</strong></td></tr><tr><td style="text-align:center"><code>\&quot;</code></td><td style="text-align:center"><strong>双引号</strong></td></tr><tr><td style="text-align:center"><code>\\</code></td><td style="text-align:center">反斜杠</td></tr><tr><td style="text-align:center"><code>\&amp;</code></td><td style="text-align:center">和号</td></tr><tr><td style="text-align:center"><code>\n</code></td><td style="text-align:center"><strong>换行符</strong></td></tr><tr><td style="text-align:center"><code>\r</code></td><td style="text-align:center">回车符</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:center">制表符</td></tr><tr><td style="text-align:center"><code>\b</code></td><td style="text-align:center">退格符</td></tr><tr><td style="text-align:center"><code>\f</code></td><td style="text-align:center">换页符</td></tr></tbody></table><h3 id="字符串拼接（拼串）"><a href="#字符串拼接（拼串）" class="headerlink" title="字符串拼接（拼串）"></a>字符串拼接（拼串）</h3><blockquote><p><strong>字符串类型</strong>可以通过 + 进行拼接</p></blockquote><p><strong>比如：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span> + <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">// helloworld</span></span><br></pre></td></tr></table></figure><p><strong>+号的规则：</strong></p><ul><li>如果两边只要有一个是字符串类型，就是拼接的功能</li><li>如果两边都是数字类型，此时就是加法运算</li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”小练习"><a href="#ヾ-๑╹◡╹-ﾉ”小练习" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”小练习"></a>ヾ(๑╹◡╹)ﾉ”小练习</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列哪一个选项可以打印出：我是棠哥</span></span><br><span class="line"><span class="keyword">var</span> nickname = <span class="string">'棠哥'</span>;</span><br><span class="line"><span class="comment">// A、console.log ( '我是' + 'nickname' );</span></span><br><span class="line"><span class="comment">// B、console.log ( '我是nickname' );</span></span><br><span class="line"><span class="comment">// C、console.log ( '我是' + nickname );</span></span><br></pre></td></tr></table></figure><h2 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h2><blockquote><p>布尔类型表示真或者假，只有两个值！！</p></blockquote><ul><li>true：真、对的、成立</li><li>false：假、错的，不成立</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">3</span> &gt; <span class="number">2</span> );<span class="comment">// true =&gt; 表示真/成立</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">3</span> &lt; <span class="number">2</span> );<span class="comment">// false =&gt; 表示假/不成立</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>写法上区分大小写：不要写成True或者是False</li><li>‘true’  和 true是两个东西，带引号的是字符串！！</li></ul><h2 id="undefined（声明未赋值）"><a href="#undefined（声明未赋值）" class="headerlink" title="undefined（声明未赋值）"></a>undefined（声明未赋值）</h2><blockquote><p>非正常值：一个变量只声明，未赋值。不符合规范</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log( num );<span class="comment">// undefined 表示变量声明当未赋值</span></span><br></pre></td></tr></table></figure><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><blockquote><p>非正常值：一般出现于获取页面元素未获取到的情况，web API阶段才会遇到</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在web api 阶段才会遇到这种情况！先有印象</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( div );</span><br></pre></td></tr></table></figure><h2 id="如何查看数据的类型（了解）"><a href="#如何查看数据的类型（了解）" class="headerlink" title="如何查看数据的类型（了解）"></a>如何查看数据的类型（了解）</h2><ul><li>最方便的是通过数据的颜色判断<ul><li>Number类型的数据偏向蓝色</li><li>String类型的数据是黑色</li><li>Boolean类型的数据偏向紫红色</li><li>Undefined的数据颜色是灰色</li><li>Null的数据颜色是灰色 </li></ul></li></ul><p><img src="/images/数据类型颜色-1573657157888.png" alt="数据类型颜色"></p><ul><li><p>通过<strong>typeof</strong>来查看数据的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">20</span> ;<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;<span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">var</span> un = <span class="literal">undefined</span>;<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> nu = <span class="literal">null</span>;<span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过typeof来查看数据的类型</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> num );<span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> str );<span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> bool );<span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> un );<span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> nu );<span class="comment">// object (特殊情况，记忆即可)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字面量赋值与变量赋值（了解）"><a href="#字面量赋值与变量赋值（了解）" class="headerlink" title="字面量赋值与变量赋值（了解）"></a>字面量赋值与变量赋值（了解）</h2><ul><li><p><strong>字面量（直接量）：</strong> 值是固定不变的，<strong>浏览器可以直接识别的量</strong></p><blockquote><p>简单数据类型比较简单，浏览器可以直接认识，都属于字面量（直接量）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要打印直接一眼就能看出来是什么类型的数据，就是字面量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"字符串"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>字面量赋值与变量赋值</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量赋值（直接量赋值）</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>；<span class="comment">// 直接把具体的值赋值给num变量</span></span><br><span class="line"><span class="comment">// 变量赋值 </span></span><br><span class="line"><span class="keyword">var</span> age = num； <span class="comment">// 通过num这个变量，把num变量的值给age变量</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意点：</strong></p><p>打印字符串务必注意字符串是用引号包裹起来的，没有用引号包裹起来的文本会被当做变量！！！</p><blockquote><p>一下结果会怎样？？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刚刚开始很容易犯错的点：想打印一个字符串，但是忘记写分号，最后打印成一个变量了。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(abc);</span><br></pre></td></tr></table></figure><h5 id="————————-3"><a href="#————————-3" class="headerlink" title="————————"></a>————————</h5><h1 id="运算符（操作符）"><a href="#运算符（操作符）" class="headerlink" title="运算符（操作符）"></a>运算符（操作符）</h1><blockquote><p>变量用于存储数据，开发中我们需要通过操作符来操作这些数据</p></blockquote><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><blockquote><p>一般用于数学计算</p></blockquote><p><img src="/images/算术运算符-1573656263257.png" alt="算术运算符"></p><p><strong><code>+</code> 、 <code>-</code> 、<code>*</code> 、<code>/</code></strong> </p><blockquote><p>和数学一样，简单过一遍</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">10</span> + <span class="number">2</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">10</span> - <span class="number">2</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">10</span> * <span class="number">2</span> );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">10</span> / <span class="number">2</span> );</span><br></pre></td></tr></table></figure><p><strong><code>%</code></strong></p><blockquote><p>数学中的求余数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">10</span> % <span class="number">2</span> );<span class="comment">// 10除以2余0</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">6</span> % <span class="number">2</span>  )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">9</span> % <span class="number">2</span> ); <span class="comment">// 7除以2余1</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">7</span> % <span class="number">2</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结：</span></span><br><span class="line"><span class="comment">// 1、 偶数  =》 % 2 == 0</span></span><br><span class="line"><span class="comment">// 2、 奇数  =》 % 2 == 1</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li><p><code>+</code> 有两个功能：</p><ul><li>拼接字符串：当两边只要有一个是字符串时，此时就是拼串</li><li>运算功能：当两边都是数字类型时，此时就是加法运算</li></ul></li><li><p><code>-</code> 、<code>*</code> 、<code>/</code> 、<code>%（求余）</code> 只有运算功能，不管两边是不是数字，都是全当做数字进行运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="string">'1'</span>);  <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">1</span>);    <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> / <span class="string">'1'</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'3'</span> * <span class="string">'3'</span>);<span class="comment">// 9</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”快速说出以下的结果"><a href="#ヾ-๑╹◡╹-ﾉ”快速说出以下的结果" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”快速说出以下的结果"></a>ヾ(๑╹◡╹)ﾉ”快速说出以下的结果</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> + <span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"123"</span> + <span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> - <span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> - <span class="string">"123"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span> * <span class="string">"12"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span> / <span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> % <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><blockquote><p> 赋值运算符有：=、 +=、 -=、 *=、 /=、 %= </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赋值，把后面的值赋值给前面的变量</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +=相当于简写形式</span></span><br><span class="line">num = num + <span class="number">10</span>；</span><br><span class="line">num += <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">num -= <span class="number">10</span>;<span class="comment">// num = num - 10</span></span><br><span class="line">num *= <span class="number">10</span>;<span class="comment">// num = num * 10</span></span><br><span class="line">num /= <span class="number">10</span>;<span class="comment">// num = num / 10</span></span><br><span class="line">num %= <span class="number">10</span>;<span class="comment">// num = num % 10</span></span><br></pre></td></tr></table></figure><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><blockquote><p>一元运算符：只有一个操作数的运算符，比如：num++ </p><p>二元运算符：有两个操作数的运算符，比如 ：num1 + num2，</p></blockquote><h3 id="自增运算符（-）"><a href="#自增运算符（-）" class="headerlink" title="自增运算符（++）"></a>自增运算符（++）</h3><ul><li>先自增：++num</li><li>后自增：num++</li></ul><p><strong>相同点：</strong></p><ul><li>代码执行完，数值都会+1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// num = num + 1;</span></span><br><span class="line"><span class="comment">// num += 1;</span></span><br><span class="line"><span class="comment">// num++;</span></span><br><span class="line"> ++num;</span><br><span class="line"><span class="built_in">console</span>.log( num );<span class="comment">// 11</span></span><br></pre></td></tr></table></figure><p><strong>不同点：</strong></p><ul><li>先自增：++a   ——》+号在前，表示先+1，后返回值</li><li>后自增：a++   ——》+号在后，表示先返回值，再+1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log( ++num ）;<span class="comment">// age == 7  先+1，再返回值</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log( num++ ）<span class="comment">// age == 6  先返回值，再+1</span></span><br></pre></td></tr></table></figure><h3 id="自减运算符（–）"><a href="#自减运算符（–）" class="headerlink" title="自减运算符（–）"></a>自减运算符（–）</h3><ul><li>先自减：–num</li><li>后自减：num–</li></ul><p><strong>相同点：</strong></p><ul><li>代码执行完，数值都会-1</li></ul><p><strong>不同点：</strong></p><ul><li>先自减：–a   ——》-号在前，表示先-1，后返回值</li><li>后自减：a–   ——》-号在后，表示先返回值，再-1</li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”小练习："><a href="#ヾ-๑╹◡╹-ﾉ”小练习：" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”小练习："></a>ヾ(๑╹◡╹)ﾉ”小练习：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.打印结果</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>; </span><br><span class="line"><span class="built_in">console</span>.log( num++ );  </span><br><span class="line"><span class="built_in">console</span>.log( ++num );  </span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 打印结果</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = ++a + ++a;</span><br><span class="line"><span class="built_in">console</span>.log( b );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a++ + a++;</span><br><span class="line"><span class="built_in">console</span>.log( b );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a++ + ++a;</span><br><span class="line"><span class="built_in">console</span>.log( b );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = ++a + a++;</span><br><span class="line"><span class="built_in">console</span>.log( b );</span><br></pre></td></tr></table></figure><h5 id="————————-4"><a href="#————————-4" class="headerlink" title="————————"></a>————————</h5><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><blockquote><p>判断逻辑是否成立的运算符，结果是布尔类型</p><p>类比于找男朋友~</p></blockquote><ul><li><p><code>&amp;&amp;</code>：与运算符，表示并且，只有当两个操作数都为 <code>true</code> 的时候，结果才是<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="literal">true</span> &amp;&amp; <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="literal">false</span> &amp;&amp; <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="literal">false</span> &amp;&amp; <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>||</code>：或运算符，表示或者，只要有其中一个操作数是 <code>true</code>，结果就是<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="literal">true</span> || <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="literal">true</span> || <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="literal">false</span> || <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="literal">false</span> || <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>!</code>：非运算符，取反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( !<span class="literal">true</span> );</span><br><span class="line"><span class="built_in">console</span>.log( !<span class="literal">false</span> );</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/js基础day01部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js基础" scheme="http://yoursite.com/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>移动webday06笔记</title>
    <link href="http://yoursite.com/2020/02/06/1-%E7%A7%BB%E5%8A%A8webday06%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/06/1-移动webday06笔记/</id>
    <published>2020-02-06T02:00:06.000Z</published>
    <updated>2020-03-11T08:51:56.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/移动webday06部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><blockquote><ul><li style="list-style: none"><input type="checkbox"> 了解less的作用</li><li style="list-style: none"><input type="checkbox"> 能够了解less的基本语法</li><li style="list-style: none"><input type="checkbox"> 能够理解rem和em的区别</li><li style="list-style: none"><input type="checkbox"> 掌握媒体查询+rem适配</li><li style="list-style: none"><input type="checkbox"> 能够完成苏宁rem布局首页</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h1 id="LESS的学习"><a href="#LESS的学习" class="headerlink" title="LESS的学习"></a>LESS的学习</h1><blockquote><p> 在写css的时候，可以直接写一个.css文件，但是实际开发中也会使用less的方法写css。</p><p>less的写法比css的写法功能更加强大。</p></blockquote><h2 id="维护css的弊端"><a href="#维护css的弊端" class="headerlink" title="维护css的弊端"></a>维护css的弊端</h2><blockquote><p>css是一门非编程式语言，没有变量、函数、作用域等概念</p></blockquote><ul><li><p>css需要书写大量没有逻辑的代码，冗余度较高</p><blockquote><p>比如：相同的样式往往css中需要写很多次，而你却无可奈何</p></blockquote></li><li><p>不方便维护和拓展，不利于复用</p><blockquote><p>比如：更改网页的主题色css需要一个一个的修改，而你却无可奈何</p></blockquote></li><li><p>css没有很好的计算能力</p><blockquote><p> 比如：css中的大小不能直接填写计算式子，一般要手动计算后填写结果</p></blockquote></li></ul><blockquote><p>使用less就能解决以上css中的弊端</p></blockquote><h2 id="Less的介绍"><a href="#Less的介绍" class="headerlink" title="Less的介绍"></a>Less的介绍</h2><blockquote><p><a href="http://lesscss.cn/" target="_blank" rel="noopener">Less</a> 是一门 CSS 预处理语言，也叫做css的预处理器。它扩展了 CSS 的写法，增加了变量、函数等特性。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">less</span>作为<span class="selector-tag">css</span>的拓展，并没有减少<span class="selector-tag">css</span>的功能，而是在现有的<span class="selector-tag">css</span>语法中，加入了程序式语言的特性</span><br><span class="line"><span class="selector-tag">less</span>在<span class="selector-tag">css</span>的语法基础上，引入了变量、<span class="selector-tag">Mixin</span>（混入）、运算以及函数等功能，大大简化了<span class="selector-tag">css</span>的编写，并且减低了<span class="selector-tag">css</span>的维护成本，正如其名字一样：<span class="selector-tag">less</span>可以让我们用更少（<span class="selector-tag">less</span>）的代码做更多的事情</span><br><span class="line">当然，常见的<span class="selector-tag">css</span>预处理器有：<span class="selector-tag">Less</span>、<span class="selector-tag">Sass</span>、<span class="selector-tag">Stylus</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>在less中，完全兼容css的语法，所以可以直接在less文件中写css没问题</li><li><strong>浏览器不认识less文件</strong>，需要需要使用less中的样式，需要先把less文件编译成.css文件，再使用！！</li></ul><h2 id="less的编译插件及配置"><a href="#less的编译插件及配置" class="headerlink" title="less的编译插件及配置"></a>less的编译插件及配置</h2><blockquote><p>less写完之后需要编译.css文件才能使用，此时可以使用VScode中的插件完成。</p></blockquote><p><strong>插件的安装步骤：</strong></p><ol><li><p>选择左侧第五个拓展按钮，下载插件 <strong><code>easy less</code></strong> ，点击安装，再点击重新加载</p><blockquote><p>安装好之后，重新加载或者关闭vscode重新打开</p></blockquote><p><img src="\images\easyless安装.gif" alt="easyless安装"></p></li><li><p>实际开发中需要对插件进行配置</p><blockquote><p>让编译好的css文件在css文件夹中</p></blockquote><p>在设置代码中添加一下配置即可</p><blockquote><p>使用的时候直接复制粘贴，<strong>注意在上一行的最后加一个逗号</strong></p><p>设置完之后需要<strong>重新打开vscode</strong>即可</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"less.compile": &#123;</span><br><span class="line">    "out": "../css/"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="\images\easyless配置.gif" alt="easyless配置"></p></li></ol><p><strong>注意点：</strong></p><ul><li><p>以后项目中如果有less文件之后，样式都在less文件中写即可，不用去修改css文件</p><blockquote><p>因为css文件都是less编译之后的结果，只需要关注less的修改即可</p></blockquote></li><li><p>但是页面中引入的必须是编译之后的css文件，因为less文件浏览器不认识。</p></li></ul><h2 id="Less语法"><a href="#Less语法" class="headerlink" title="Less语法"></a>Less语法</h2><h3 id="less的注释"><a href="#less的注释" class="headerlink" title="less的注释"></a>less的注释</h3><blockquote><p>在less文件中可以写两种注释</p></blockquote><ul><li>一种是css的注释：<code>/* 注释的内容 */</code> ，最后会编译展示在css文件中</li><li>一种是less的注释：<code>// 注释的内容</code> ，只在less中使用，不会编译展示在css文件中</li></ul><blockquote><p>一般在less文件中，推荐使用less的注释方法</p></blockquote><h3 id="less的变量"><a href="#less的变量" class="headerlink" title="less的变量"></a>less的变量</h3><blockquote><p>一般在网站中会有主题色（当前网页中用的较多的颜色），如果此时需要改换网页的主题色，一个个去改非常麻烦，此时可以使用less中的变量完成效果</p></blockquote><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量：可以变化的量</span><br><span class="line">语法：@变量名:变量值;</span><br><span class="line">作用：编译的时候会把<span class="selector-tag">less</span>中所有的变量名替换成变量值，这样可以统一修改某一个值（如主题色）</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@mainColor:</span><span class="number">#e92322</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less的嵌套"><a href="#less的嵌套" class="headerlink" title="less的嵌套"></a>less的嵌套</h3><blockquote><p>在less中，选择器的关系可以通过嵌套来表示</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less中的嵌套：less中选择器可以嵌套</span></span><br><span class="line"><span class="comment">// 1、后代选择器，选择器嵌套即可</span></span><br><span class="line"><span class="comment">// 2、子代选择器，前面使用&gt;</span></span><br><span class="line"><span class="comment">// 3、并集选择器，前面直接写,</span></span><br><span class="line"><span class="comment">// 4、交集选择器，前面使用&amp;（&amp;表示这一级选择器）</span></span><br><span class="line"><span class="comment">// 5、伪元素，前面使用&amp;（&amp;表示这一级选择器）</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 后代的关系，直接嵌套即可</span></span><br><span class="line">  <span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子代选择器，前面加一个&gt;</span></span><br><span class="line">    &gt;<span class="selector-class">.sun</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 并集选择器</span></span><br><span class="line">  <span class="selector-class">.box1</span>,</span><br><span class="line">  <span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 交集选择器</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 伪元素</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h3 id="less的运算"><a href="#less的运算" class="headerlink" title="less的运算"></a>less的运算</h3><blockquote><p>在less代码中可以直接写加减乘除进行计算</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 伪类的写法</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="comment">// less中可以直接计算加减乘除计算的，编译之后会把计算的结果直接显示在css文件中。之后学习的rem布局中需要使用到less运算的功能</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span> / <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span> + <span class="number">100</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span> - <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less的函数（了解）"><a href="#less的函数（了解）" class="headerlink" title="less的函数（了解）"></a>less的函数（了解）</h3><blockquote><p>针对于css中重复的样式，除了可以使用定义公共类的方式，还可以使用less中的函数来处理（函数在之后的js会详细说到，先简单了解下）</p></blockquote><p><strong>需求：</strong></p><blockquote><p>每一个选择器中的width和height代码都重复了，节省代码的方式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以提取出一个公共类出来，然后给对应的标签上加公共类</li><li>也可以使用less中的函数，给选择器上使用函数也可以</li><li>语法：<strong><code>.函数名(){重复的样式}</code></strong> </li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在less中也一种处理重复样式的方法：函数。直接在选择器里面使用</span></span><br><span class="line"><span class="comment">// 函数的写法和定义公共类很像，后面需要加上括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="selector-class">.common</span>() &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="comment">// 使用函数</span></span><br><span class="line">  <span class="selector-class">.common</span>();</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="selector-class">.common</span>();</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="selector-class">.common</span>();</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓展：</strong></p><p>函数里面可以传参，让函数中样式的取值变化（变化的量→变量）</p><blockquote><p>比如让红盒子<code>100*100</code>， 蓝盒子<code>200*200</code> ，绿盒子<code>300*300</code></p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.common</span>(<span class="variable">@value</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@value</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="comment">// 使用函数</span></span><br><span class="line">  <span class="selector-class">.common</span>(<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="selector-class">.common</span>(<span class="number">200px</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="selector-class">.common</span>(<span class="number">300px</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-使用less实现京东头部"><a href="#ヾ-๑╹◡╹-ﾉ”-使用less实现京东头部" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 使用less实现京东头部"></a>ヾ(๑╹◡╹)ﾉ” 使用less实现京东头部</h5><blockquote><p>带同学们熟悉less写项目的操作</p></blockquote><ul><li><p>视口：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>全局容器</p></li></ul><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><h1 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h1><h2 id="em和rem的认识"><a href="#em和rem的认识" class="headerlink" title="em和rem的认识"></a>em和rem的认识</h2><blockquote><p>在布局中，除了px之外，还有两个常见的单位，em和rem</p></blockquote><p><strong>em：</strong> 相对于当前元素的字体大小→ <code>1em = 当前标签的font-size</code></p><p><strong>rem：</strong> 相对于根元素（html）的字体大小→ <code>1rem = html标签的font-size</code></p><blockquote><p>浏览器默认的font-size的大小为16px</p></blockquote><p>之后会使用rem单位完成rem布局（等比例缩放）的效果</p><p><strong>rem布局的效果：</strong></p><ul><li>屏幕越大，标签就越大</li><li>屏幕越小，标签就越小</li></ul><p><strong>rem布局的原理：</strong></p><ul><li>当屏幕越大，让html标签的font-size变大即可</li><li>当屏幕越小，让html标签的font-size变小即可</li></ul><blockquote><p>怎么检测屏幕大小变化呢？通过媒体查询的方式动态改变html标签的font-size的大小</p></blockquote><h2 id="为什么要用rem布局"><a href="#为什么要用rem布局" class="headerlink" title="为什么要用rem布局"></a>为什么要用rem布局</h2><blockquote><p>之前的流式布局或者响应式布局并不能完美的显示设计图的效果，并不能解决所有屏幕适配的问题。而rem能做到：等比例的适配所有的屏幕。</p></blockquote><p><strong>现状：</strong></p><p>由于市面上手机种类繁多，导致移动端的屏幕种类非常的混乱，比如有常见的<code>320px 360px 375px 384px 480px 640px</code>等。在开发中，UI一般只会提供 <code>750px</code> 或者是 <code>640px</code> 的设计稿，这就要求我们通过一张设计稿能够适配所有的屏幕。常见的方案有以下：</p><ul><li><p><strong>流式布局：</strong> </p><blockquote><p>但是目前使用流式布局的网页还是较多的，比如 <a href="https://www.amazon.cn/" target="_blank" rel="noopener">亚马逊</a> </p></blockquote><ul><li>优点：各种屏幕都适配，都能看</li><li>缺点：只有当屏幕大小和设计图相同时才能完美还原设计图，其他屏幕下都会拉伸</li></ul></li><li><p><strong>响应式布局：</strong></p><blockquote><p>一般多用于简单的网页和从零开始的站点。</p></blockquote><ul><li>优点：一套页面可以适配多个客户端。</li><li>缺点：对于复杂的网页来说工作量太大，维护性太难。</li></ul></li><li><p><strong>rem布局：</strong></p><blockquote><p>与less配合使用更加方便，目前使用rem布局的有：<a href="https://m.taobao.com" target="_blank" rel="noopener">淘宝</a> 、 <a href="https://m.suning.com/" target="_blank" rel="noopener">苏宁</a></p></blockquote><ul><li>优点：rem布局盒子适配所有的屏幕，并且可以在多个屏幕大小中完美还原设计图（等比例缩放）</li></ul></li></ul><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><h2 id="rem布局适配多个屏幕"><a href="#rem布局适配多个屏幕" class="headerlink" title="rem布局适配多个屏幕"></a>rem布局适配多个屏幕</h2><blockquote><p>rem布局适配的原理说白了，就是根据屏幕的大小，动态的改变html标签的font-size的大小，此时就可以配合媒体查询做到不同屏幕的适配</p></blockquote><p><strong>需求：</strong></p><p>当320设计图中div的宽高为200*200，此时要求使用rem适配 <code>375</code>、 <code>414</code>、<code>640</code>  的屏幕</p><ol><li><p>先把px的单位转换成rem单位——》需要除以html标签的font-size的大小</p><blockquote><p>针对于设计图的尺寸自定义一个好算的font-size的大小</p></blockquote></li><li><p>配合媒体查询适配不同的屏幕——》需要根据比例等比例缩放</p><blockquote><p>每一个屏幕的宽度与font-size的比例是相等的！！！</p><p>所以求出设计图尺寸的比例之后，之后的屏幕的font-size的值就是——》屏幕宽度/比例</p></blockquote></li></ol><p><strong>注意点：</strong></p><p>因为要求页面是<strong>等比例缩放</strong>的，所以：</p><p><code>屏幕1宽度/屏幕1html标签font-size</code> = <code>屏幕2宽度/屏幕2html标签font-size</code></p><blockquote><p>保证屏幕宽度与html标签font-size的比例相同，就可以轻松适配多个屏幕</p></blockquote><p><img src="\images\rem适配比例关系.png" alt="rem适配比例关系"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">适配320屏幕</span></span><br><span class="line"><span class="comment">屏幕宽度&gt;=320时生效</span></span><br><span class="line"><span class="comment">比例：3.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">适配375屏幕</span></span><br><span class="line"><span class="comment">屏幕宽度&gt;=375时生效</span></span><br><span class="line"><span class="comment">fons-size=375/3.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">117.1875px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">适配400屏幕</span></span><br><span class="line"><span class="comment">屏幕宽度&gt;=400时生效</span></span><br><span class="line"><span class="comment">font-size=400/3.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">400px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">125px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">129.375px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 把px单位换算成rem */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="苏宁易购"><a href="#苏宁易购" class="headerlink" title="苏宁易购"></a>苏宁易购</h1><blockquote><p><a href="https://m.suning.com/" target="_blank" rel="noopener">苏宁</a></p></blockquote><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ul><li><p>images文件夹</p></li><li><p>less文件夹（之后使用less写项目）</p><ul><li>有index.less</li><li>有base.less</li></ul></li><li><p>新建html页面</p><ul><li><p>引入css文件</p></li><li><p>移动端项目设置视口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>设置全局容器</li></ul><h2 id="rem布局首先进行适配工作"><a href="#rem布局首先进行适配工作" class="headerlink" title="rem布局首先进行适配工作"></a>rem布局首先进行适配工作</h2><p><strong>适配的步骤：</strong></p><ol><li>先适配设计图的屏幕大小（比如：750px），并且根据设计图屏幕大小定义一个html标签的font-size的大小（比如：50px），此时屏幕大小与font-size的比例为15</li><li>因为是等比例缩放的，所以每一个适配的屏幕大小与font-size的比例都是相同的，所以各个屏幕大小除以比例就能得出font-size的大小</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 苏宁官网中适配了：750 720 540 480 424 414 400 384 375 360 320</span></span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="variable">@width</span>) &#123;</span><br><span class="line">  <span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>:<span class="variable">@width</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">      <span class="comment">// round(数值)：让这个数值四舍五入</span></span><br><span class="line">      <span class="comment">// round(数值，保留几位小数)</span></span><br><span class="line">      <span class="attribute">font-size</span>: round(<span class="variable">@width</span>/<span class="number">15</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">320px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">360px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">375px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">384px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">400px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">414px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">424px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">480px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">540px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">720px</span>);</span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="number">750px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配750的屏幕</span></span><br><span class="line"><span class="comment">// 定义设计图屏幕大小html的font-size值为50px，</span></span><br><span class="line"><span class="comment">// 比例为15</span></span><br><span class="line"><span class="comment">// @media screen and (min-width:750px) &#123;</span></span><br><span class="line"><span class="comment">//   html &#123;</span></span><br><span class="line"><span class="comment">//     font-size: 50px;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h5 id="————————–"><a href="#————————–" class="headerlink" title="————————–"></a>————————–</h5><h2 id="px2rem插件的使用"><a href="#px2rem插件的使用" class="headerlink" title="px2rem插件的使用"></a>px2rem插件的使用</h2><blockquote><p>在写项目中，每一次都需要手动写式子把px转换成rem比较麻烦，此时可以使用vscode的插件，完成对应的效果</p></blockquote><ol><li><p>安装插件 <strong>px2rem</strong> </p><p><img src="\images\px2rem的安装.gif" alt="px2rem的安装"></p></li><li><p>每次写数字px之后，会有提示转换成rem，按下键回车即可</p></li><li><p>插件中默认html的font-size的大小为16px，所以默认是除以16的如果需要更改，需要进行配置（如：设计如是750，html标签的font-size的大小为50px，此时应该除以50）</p><blockquote><p>在设置中搜索px2rem，然后直接修改设置即可，<strong>注意设置完了之后需要重启才能生效！！</strong></p></blockquote><p><img src="\images\px2rem的设置.gif" alt="px2rem的设置"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/移动webday06部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="移动web" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
  </entry>
  
  <entry>
    <title>移动webday05笔记</title>
    <link href="http://yoursite.com/2020/02/06/1-%E7%A7%BB%E5%8A%A8webday05%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/06/1-移动webday05笔记/</id>
    <published>2020-02-06T02:00:05.000Z</published>
    <updated>2020-03-11T08:51:25.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/移动webday05部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><blockquote><ul><li style="list-style: none"><input type="checkbox"> 了解bootstrap的栅格系统的使用</li><li style="list-style: none"><input type="checkbox"> 能够完成微金所的头部</li><li style="list-style: none"><input type="checkbox"> 能够使用导航条组件完成微金所导航</li><li style="list-style: none"><input type="checkbox"> 能够完成微金所轮播图</li><li style="list-style: none"><input type="checkbox"> 能够完成微金所信息区块</li><li style="list-style: none"><input type="checkbox"> 能够完成微金所预约区块</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h1 id="bootstrap框架"><a href="#bootstrap框架" class="headerlink" title="bootstrap框架"></a>bootstrap框架</h1><blockquote><p>在之前使用媒体查询的方式能手动写出响应式的简单效果，但是非常的麻烦，代码非常的多。</p><p>在实际开发过程中，一般咱们会借助框架来完成响应式的开发，提高效率（但是底层仍然是媒体查询的原理）</p><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。<a href="https://www.awesomes.cn/rank" target="_blank" rel="noopener">前端流行框架排名</a> </p></blockquote><h2 id="bootstrap的初体验"><a href="#bootstrap的初体验" class="headerlink" title="bootstrap的初体验"></a>bootstrap的初体验</h2><blockquote><p> bootstrap框架现阶段可以简单的当做别人写好的代码。想要用，先去下载下来</p><p> <a href="http://www.bootcss.com/" target="_blank" rel="noopener">bootstrap中文网</a> </p></blockquote><p><strong>版本：</strong></p><ul><li><p>2.x.x 停止维护</p><blockquote><p>做了很多兼容性处理，但是代码不够简洁，功能不够完善</p></blockquote></li><li><p>3.x.x <strong>目前使用较多</strong></p><blockquote><p>偏向于响应式开发布局，稳定。但是放弃了IE67的兼容，对IE8支持但是界面效果不友好</p></blockquote></li><li><p>4.x.x 阶段</p></li></ul><p><strong>注意点：</strong> Bootstrap中的  <strong>js功能效果依赖于 jQuery</strong> （ 第三方库, 后面有专门的课程讲解）</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><blockquote><p>说白了，bootstrap框架就是别人写好的代码，类似于：需要使用别人写好的css文件，只需要直接引入即可</p></blockquote><ul><li><p><strong>引入文件</strong>：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.css&quot;&gt;</code></p></li><li><p>bootstrap样式文件中有一些简单的<strong>样式初始化</strong>，所以引入之后不用再引入 <code>base.css</code> 文件</p><blockquote><p>但是bootstrap并没有将所有样式都重置，所有之后还需要自己手动写代码重置</p></blockquote></li><li><p><strong>学习bootstrap框架说白了就是学习类（学习每一个类的含义）</strong></p><blockquote><p>比如：fl——》左浮动、fr——》右浮动、clearfix——》清除浮动</p></blockquote><p><strong>以部分按钮为例：</strong></p><p>|     类名     |             含义             |<br>| :———-: | :————————–: |<br>|     .btn     | 按钮的基础类（按钮必加的类） |<br>| .btn-success |           绿色按钮           |<br>| .btn-danger  |           红色按钮           |<br>| .btn-primary |           深蓝按钮           |<br>| .btn-default |           白色按钮           |</p></li></ul><h2 id="bootstrap的布局容器"><a href="#bootstrap的布局容器" class="headerlink" title="bootstrap的布局容器"></a>bootstrap的布局容器</h2><blockquote><p>之前给一个盒子设置响应式布局（不同屏幕下版心不同，移动端宽度100%），代码写了很多很麻烦</p><p>但是使用bootstrap框架之后就非常方便，框架中响应式的框架已经写好的，使用的之后直接给标签加类即可</p></blockquote><h3 id="响应式布局容器（-container）"><a href="#响应式布局容器（-container）" class="headerlink" title="响应式布局容器（.container）"></a>响应式布局容器（.container）</h3><blockquote><p><strong>比较常用</strong></p></blockquote><p><img src="\images\container容器.gif" alt="container容器"></p><ul><li><p>设置了该类的盒子，在不同屏幕下有不同的版心，到了移动端宽度为100%（之前写的效果一样）</p><blockquote><p>底层原理：就是之前写的媒体查询</p></blockquote></li><li><p>设置了该类的盒子，左右有默认15px的padding</p><blockquote><p>写框架的作者觉得内容直接贴两边不好看，就设置了左右15px的padding</p></blockquote></li></ul><h3 id="流式布局容器（-container-fluid）（了解）"><a href="#流式布局容器（-container-fluid）（了解）" class="headerlink" title="流式布局容器（.container-fluid）（了解）"></a>流式布局容器（.container-fluid）（了解）</h3><blockquote><p><strong>了解即可</strong></p></blockquote><p><img src="\images\container-fluid容器.gif" alt="container-fluid容器"></p><ul><li>设置了该类的盒子，宽度永远是100%</li><li>设置了该类的盒子，左右也有默认15px的padding</li></ul><h3 id="抵消父元素padding的类（-row）（了解）"><a href="#抵消父元素padding的类（-row）（了解）" class="headerlink" title="抵消父元素padding的类（.row）（了解）"></a>抵消父元素padding的类（.row）（了解）</h3><blockquote><p>bootstrap中的布局容器默认都设置了左右15px的padding。</p><p>如果不需要这个效果，除了<strong>可以通过选择器padding:0;直接覆盖</strong>，还<strong>可以通过.row类去掉</strong></p></blockquote><ul><li><p>设置了该类的子盒子，会抵消父元素左右15px的padding</p><blockquote><p>底层原理：通过margin为负值实现</p></blockquote></li></ul><h2 id="栅格系统（重点）"><a href="#栅格系统（重点）" class="headerlink" title="栅格系统（重点）"></a>栅格系统（重点）</h2><blockquote><p>在bootstrap中会把一行分成12列，通过对应的类名实现每个盒子宽度的动态变化</p><p>其实其中的原理大家一秒能懂</p></blockquote><h3 id="栅格系统的模拟"><a href="#栅格系统的模拟" class="headerlink" title="栅格系统的模拟"></a>栅格系统的模拟</h3><p><strong>需求：</strong> 响应式容器中有两个盒子，只在大屏设备中宽度各占一半一行中显示，其他屏幕占满一行</p><ul><li>使用之前的方法：浮动 + 宽度百分比 + 媒体查询 可以实现</li></ul><hr><ul><li><p>其实在bootstrap中，也可以通过类完成以上效果（如：给两个盒子设置<code>.col-lg-6</code>）</p><blockquote><p>底层原理也是通过：浮动 + 宽度百分比 + 媒体查询 做到的。</p></blockquote></li></ul><h3 id="栅格系统的介绍"><a href="#栅格系统的介绍" class="headerlink" title="栅格系统的介绍"></a>栅格系统的介绍</h3><blockquote><p>bootstrap中将一行分成了12份（12份更容易分配盒子的空间）</p></blockquote><p><strong>底层原理：</strong> <strong>浮动（一行中显示） + 百分比（宽度均分） + 媒体查询（不同屏幕时才生效）</strong></p><p><strong>比如： </strong><code>.col-lg-6</code> 表示在大屏及以上屏幕生效，盒子宽度为一行的6/12——》50%；浮动在一行中显示</p><p><strong>语法：</strong></p><h5 id="col-取值1-取值2"><a href="#col-取值1-取值2" class="headerlink" title=".col-取值1-取值2"></a><code>.col-取值1-取值2</code></h5><table><thead><tr><th style="text-align:center">取值1</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">lg</td><td style="text-align:center">大屏及以上屏幕时生效</td></tr><tr><td style="text-align:center">md</td><td style="text-align:center">中屏及以上屏幕时生效</td></tr><tr><td style="text-align:center">sm</td><td style="text-align:center">小屏及以上屏幕时生效</td></tr><tr><td style="text-align:center">xs</td><td style="text-align:center">超小屏及以上屏幕生效（所有屏幕生效）</td></tr></tbody></table><p><strong>取值2：</strong> 份数（0~12）</p><blockquote><p>表示在一行中的宽度占几份</p></blockquote><h3 id="栅格系统的练习"><a href="#栅格系统的练习" class="headerlink" title="栅格系统的练习"></a>栅格系统的练习</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    需求:  响应式布局容器中一共有 12 个div</span></span><br><span class="line"><span class="comment">      如果是大屏幕设备, 每行放 6 个 div,  共两行</span></span><br><span class="line"><span class="comment">      如果是中屏设备,   每行放 4 个 div,  共三行</span></span><br><span class="line"><span class="comment">      如果是小屏设备,   每行放 3 个 div,  共四行</span></span><br><span class="line"><span class="comment">      如果是超小屏设备, 每行放 2 个 div,  共六行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    .col-取值1-取值2</span></span><br><span class="line"><span class="comment">      lg：大屏及以上生效</span></span><br><span class="line"><span class="comment">      md：中屏及以上生效</span></span><br><span class="line"><span class="comment">      sm：小屏及以上生效</span></span><br><span class="line"><span class="comment">      xs：所有屏幕都生效</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-写微金所新手体验模块的响应式效果"><a href="#ヾ-๑╹◡╹-ﾉ”-写微金所新手体验模块的响应式效果" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 写微金所新手体验模块的响应式效果"></a>ヾ(๑╹◡╹)ﾉ” 写微金所新手体验模块的响应式效果</h5><blockquote><p>栅格系统中一般先从小屏开始写！</p></blockquote><h5 id="————————–"><a href="#————————–" class="headerlink" title="————————–"></a>————————–</h5><h2 id="bootstrap全局样式阅读（了解）"><a href="#bootstrap全局样式阅读（了解）" class="headerlink" title="bootstrap全局样式阅读（了解）"></a>bootstrap全局样式阅读（了解）</h2><blockquote><p><a href="https://v3.bootcss.com/css/" target="_blank" rel="noopener">bootstrap全局样式</a></p></blockquote><p><strong>排版：对齐</strong></p><blockquote><p>底层原理：就是一个text-align：left/center/right</p></blockquote><table><thead><tr><th style="text-align:center">类名</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">.text-left</td><td style="text-align:center">文本左对齐</td></tr><tr><td style="text-align:center">.text-center</td><td style="text-align:center">文本居中对齐</td></tr><tr><td style="text-align:center">.text-right</td><td style="text-align:center">文本右对齐</td></tr></tbody></table><p><strong>表格：基本（了解）</strong></p><table><thead><tr><th style="text-align:center">类名</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">.table</td><td style="text-align:center">表格的基本样式（配合thead和tbody使用）</td></tr><tr><td style="text-align:center">.table-striped</td><td style="text-align:center">隔行变色</td></tr></tbody></table><p><strong>按钮：颜色</strong></p><blockquote><p>按钮需要加上基本类 <code>.btn</code></p></blockquote><table><thead><tr><th style="text-align:center">类名</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">.btn-danger</td><td style="text-align:center">红色按钮</td></tr><tr><td style="text-align:center">.btn-success</td><td style="text-align:center">绿色按钮</td></tr><tr><td style="text-align:center">.btn-primary</td><td style="text-align:center">深蓝按钮</td></tr><tr><td style="text-align:center">.btn-default</td><td style="text-align:center">白色按钮</td></tr><tr><td style="text-align:center">.btn-info（了解）</td><td style="text-align:center">浅蓝按钮</td></tr><tr><td style="text-align:center">.btn-warning（了解）</td><td style="text-align:center">黄色按钮</td></tr><tr><td style="text-align:center">.btn-link（了解）</td><td style="text-align:center">链接按钮</td></tr></tbody></table><p><strong>按钮：尺寸</strong></p><blockquote><p>按钮默认是中按钮</p></blockquote><table><thead><tr><th style="text-align:center">类名</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">.btn-lg</td><td style="text-align:center">大按钮</td></tr><tr><td style="text-align:center">.btn-sm</td><td style="text-align:center">小按钮</td></tr><tr><td style="text-align:center">.btn-xs</td><td style="text-align:center">超小按钮</td></tr></tbody></table><h2 id="响应式工具介绍"><a href="#响应式工具介绍" class="headerlink" title="响应式工具介绍"></a>响应式工具介绍</h2><blockquote><p>在响应式布局中，有时候会设置不同屏幕下元素的显示或者隐藏</p></blockquote><p><strong>需求：</strong> 一个盒子大屏、中屏显示，小屏、超小屏隐藏</p><ul><li>自己通过媒体查询实现</li></ul><hr><ul><li>使用bootstrap中预定的.hidden相关类实现</li></ul><p><strong>代码：</strong></p><blockquote><p>bootstrap中预定了一些类，可以控制盒子的显示或者隐藏</p></blockquote><table><thead><tr><th style="text-align:center">类名</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">.hidden</td><td style="text-align:center">所有屏幕都隐藏</td></tr><tr><td style="text-align:center">.hidden-xs</td><td style="text-align:center">只在超小屏隐藏</td></tr><tr><td style="text-align:center">.hidden-sm</td><td style="text-align:center">只在小屏隐藏</td></tr><tr><td style="text-align:center">.hidden-md</td><td style="text-align:center">只在中屏隐藏</td></tr><tr><td style="text-align:center">.hidden-lg</td><td style="text-align:center">只在大屏隐藏</td></tr></tbody></table><h2 id="组件介绍（了解）"><a href="#组件介绍（了解）" class="headerlink" title="组件介绍（了解）"></a>组件介绍（了解）</h2><blockquote><p>组件比全局样式会多出一些功能出来，但是注意这些功能需要配合js文件一起使用</p></blockquote><p><strong>组件：字体图标</strong></p><blockquote><p>在bootstrap内部，内置了字体图标，只需要直接复制粘贴类名即可</p></blockquote><p><strong>比如：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件：导航条</strong></p><blockquote><p>bootstrap中已经写好导航条的代码，使用的时候直接复制粘贴即可</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>如果需要实现组件中如导航条的功能，需要引入bootstrap中的js文件才行</li><li>bootstrap中的js需要依赖与jquery这个js文件的，所以需要一起引入jquery这个js文件才能生效！</li><li>js文件通过script的src属性引入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bootstrap/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="—————————"><a href="#—————————" class="headerlink" title="—————————"></a>—————————</h5><h1 id="微金所项目"><a href="#微金所项目" class="headerlink" title="微金所项目"></a>微金所项目</h1><h2 id="微金所项目搭建"><a href="#微金所项目搭建" class="headerlink" title="微金所项目搭建"></a>微金所项目搭建</h2><ul><li><p>新建项目文件夹</p><ul><li><p>images文件夹：放项目需要的图片</p></li><li><p>css文件夹：放自己写的css文件</p></li><li><p>fonts文件夹：放自己项目的字体图标文件</p><blockquote><p>虽然bootstrap框架中内置了字体图标，但是实际开发中设计师会针对每个网页单独设计字体图标，使用方法和基础班一样</p></blockquote></li><li><p><strong>lib文件夹</strong>：放项目中框架相关的代码</p><blockquote><p>lib文件夹中一般放框架（别人写好的代码）相关的代码</p></blockquote></li></ul></li><li><p>放入.ico图标</p></li><li><p>在 <code>index.html</code> 文件中引入相关文件</p><ul><li><p>引入.ico图标</p></li><li><p>引入字体图标文件</p></li><li><p>引入框架的css文件和js文件和jquery文件（因为bootstrap框架中的js依赖jquery）</p><blockquote><p>知道引入js之后能生效即可，js之后会详细去说</p></blockquote></li><li><p>引入自己写的css文件</p></li></ul></li></ul><h2 id="微金所模块划分"><a href="#微金所模块划分" class="headerlink" title="微金所模块划分"></a>微金所模块划分</h2><p><img src="\images\微金所模块划分.png" alt=""></p><h2 id="响应式项目的思路"><a href="#响应式项目的思路" class="headerlink" title="响应式项目的思路"></a>响应式项目的思路</h2><ol><li><p>先看有没有响应式版心（版心会不会跟随屏幕大小变化而变化）</p><blockquote><p>如果有响应式版心，设置 <code>.container</code> 即可</p></blockquote></li><li><p>在响应式版心中分配每一个盒子的空间</p><blockquote><p>利用栅格系统进行空间的分配</p></blockquote></li><li><p>设置整体大模块是否有显示与隐藏，直接给大模块设置hidden相关属性即可</p></li></ol><h2 id="bootstrap导航条的改写（不做要求）"><a href="#bootstrap导航条的改写（不做要求）" class="headerlink" title="bootstrap导航条的改写（不做要求）"></a>bootstrap导航条的改写（不做要求）</h2><blockquote><p>在bootstrap文档的组件中，有写好的导航条的代码，使用的时候直接复制改写即可。</p><p>因为现在还没学js等相关内容，所以对于以下改写的内容同学们可以直接复制改好的代码，现在学习的重点在于之后样式的覆盖（如果能理解是一种进阶）</p></blockquote><p><strong>改写前先把不需要的属性和标签删除：</strong></p><blockquote><p>以下属性和标签，在改写过程中可以直接删除，因为是给盲人设备使用的，删除之后便于理解结构（不删也可以）</p></blockquote><ul><li><code>aria-</code> 开头的属性，该属性可以直接删除</li><li><code>role</code> 属性，该属性可以直接删除</li><li>有 <code>sr-only</code> 类的标签，该标签可以直接删除 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 有版心的布局容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 小屏设备显示的左边大标题和右边切换按钮的组合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 小屏下右边的按钮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 左边的大标题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>左边的大标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!---------------------------------------------------------------------------------------&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于切换显示内容的结构 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 左侧的导航 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我要投资<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我要借贷<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>平台介绍<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新手专区<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>最新动态<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>微平台<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 右侧的导航 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bootstrap标签页（tab栏）的改写"><a href="#bootstrap标签页（tab栏）的改写" class="headerlink" title="bootstrap标签页（tab栏）的改写"></a>bootstrap标签页（tab栏）的改写</h2><blockquote><p>在bootstrap文本的JavaScript插件中，有写好的标签页（tab栏）的代码，使用的时候直接复制改写即可。</p></blockquote><p><strong>改写前先把不需要的属性和标签删除：</strong></p><ul><li><code>aria-</code> 开头的属性，该属性可以直接删除</li><li><code>role</code> 属性，该属性可以直接删除</li><li>有 <code>sr-only</code> 类的标签，该标签可以直接删除 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1、先去除没用的标签和属性</span></span><br><span class="line"><span class="comment">        1、aria-开头的属性，属性都删除</span></span><br><span class="line"><span class="comment">        2、role属性，该属性删除</span></span><br><span class="line"><span class="comment">        3、有sr-only类的标签，该标签直接删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2、bootstrap中，data-开头的属性，是用于添加js功能的，不要删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3、通过id属性将导航的按钮和面板绑定起来，所以id属性需要一一对应才行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    原理：点击某一个导航按钮时，让对应的导航面板显示，其他面板都隐藏即可！！！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于点击切换的按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#product01"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>特别推荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#product02"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>微平台1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#product03"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>微平台2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#product04"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>微平台3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#product05"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>微平台4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#product06"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>微平台5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#product07"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>微平台6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用于点击切换的面板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane active"</span> <span class="attr">id</span>=<span class="string">"product01"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"product02"</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"product03"</span>&gt;</span>333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"product04"</span>&gt;</span>444<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"product05"</span>&gt;</span>555<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"product06"</span>&gt;</span>666<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"product07"</span>&gt;</span>777<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/移动webday05部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="移动web" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
  </entry>
  
  <entry>
    <title>移动webday04笔记</title>
    <link href="http://yoursite.com/2020/02/06/1-%E7%A7%BB%E5%8A%A8webday04%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/06/1-移动webday04笔记/</id>
    <published>2020-02-06T02:00:04.000Z</published>
    <updated>2020-03-11T08:51:18.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/移动webday04部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够说出伸缩布局的主轴对齐方式和侧轴对齐方式</li><li style="list-style: none"><input type="checkbox"> 能够说出如何让伸缩布局换行</li><li style="list-style: none"><input type="checkbox"> 能够完成六面神骰</li><li style="list-style: none"><input type="checkbox"> 了解响应式开发的原理</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h1 id="flex布局（弹性布局）"><a href="#flex布局（弹性布局）" class="headerlink" title="flex布局（弹性布局）"></a>flex布局（弹性布局）</h1><blockquote><p>通过给父元素添加flex属性，调整子元素在水平和垂直方向上的位置</p></blockquote><p><img src="\images\传统布局和flex布局对比.png" alt="传统布局和flex布局对比"></p><p><strong>布局方法的选取：</strong></p><ul><li><p>如果是pc端页面布局，我们一般还是考虑传统布局方式</p></li><li><p>如果是移动端或者不考虑兼容性问题的pc端页面布局，我们一般就可以考虑flex弹性布局</p><blockquote><p>如果不用考虑兼容性问题，flex布局会更加方便</p></blockquote></li></ul><h2 id="flex布局的初体验"><a href="#flex布局的初体验" class="headerlink" title="flex布局的初体验"></a>flex布局的初体验</h2><h5 id="ヾ-๑╹◡╹-ﾉ”-让一个子盒子在父盒子中水平垂直居中"><a href="#ヾ-๑╹◡╹-ﾉ”-让一个子盒子在父盒子中水平垂直居中" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 让一个子盒子在父盒子中水平垂直居中"></a>ヾ(๑╹◡╹)ﾉ” 让一个子盒子在父盒子中水平垂直居中</h5><ul><li><p>之前使用子绝父相完成</p></li><li><p>通过flex布局，三行代码完成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置当前盒子为弹性盒子*/</span></span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="comment">/* 设置主轴方向的对齐方式：justify-content */</span></span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="comment">/* 设置侧轴方向的对齐方式：align-items */</span></span><br><span class="line"><span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure></li></ul><p>设置了 <code>display：flex;</code> 的盒子会变成一个<strong>弹性盒子</strong>。弹性盒子会多出了<strong>主轴</strong>和<strong>侧轴</strong>的概念。</p><p><strong>主轴：</strong> <strong>默认水平向右</strong> （类似于x轴）</p><p><strong>侧轴：</strong>与主轴垂直的就是侧轴，<strong>默认垂直向下</strong>（类似于y轴）</p><p>弹性盒子内部的<strong>子元素会默认沿着主轴方向</strong> 排布，默认水平向右布局。（类似于羊肉串）</p><hr><blockquote><p>接下来学习一些flex布局中相关的属性</p></blockquote><h2 id="主轴方向（flex-direction）（了解）"><a href="#主轴方向（flex-direction）（了解）" class="headerlink" title="主轴方向（flex-direction）（了解）"></a>主轴方向（flex-direction）（了解）</h2><blockquote><p>弹性盒子中主轴方向默认是水平向右的。</p><p>但是其实可以通过<code>flex-diretion</code> 属性修改主轴的方向（一般很少改变）</p></blockquote><p><strong>取值（主轴方向）：</strong></p><table><thead><tr><th style="text-align:center">取值</th><th style="text-align:center">效果（主轴方向）</th></tr></thead><tbody><tr><td style="text-align:center">row</td><td style="text-align:center">水平向右（默认）</td></tr><tr><td style="text-align:center">row-reverse</td><td style="text-align:center">水平向左</td></tr><tr><td style="text-align:center">column</td><td style="text-align:center">垂直向下</td></tr><tr><td style="text-align:center">column-reverse</td><td style="text-align:center">垂直向上</td></tr></tbody></table><h2 id="主轴对齐方式（justify-content）（重点）"><a href="#主轴对齐方式（justify-content）（重点）" class="headerlink" title="主轴对齐方式（justify-content）（重点）"></a>主轴对齐方式（justify-content）（重点）</h2><blockquote><p>元素在主轴上排布，可以通过 <code>justify-content</code> 属性设置元素的对齐方式</p></blockquote><p><strong>取值：</strong></p><ul><li><p><strong>flex-start：向主轴的开始位置对齐</strong></p><blockquote><p>默认相当于左对齐</p></blockquote><p><img src="\images\flex-start.png" alt="flex-start"></p></li><li><p><strong>flex-end：向主轴的结束位置对齐</strong></p><blockquote><p>默认相当于右对齐</p></blockquote><p><img src="\images\flex-end.png" alt="flex-end"></p></li><li><p><strong>center：居中对齐</strong></p><p><img src="\images\center.png" alt="center"></p></li><li><p><strong>space-around：让空白环绕盒子显示</strong></p><p><img src="\images\space-around.png" alt="space-around"></p></li><li><p><strong>space-between：让空白只在盒子之间显示</strong></p><p><img src="\images\space-between.png" alt="space-between"></p></li></ul><h2 id="单行侧轴对齐方式（align-items）（重点）"><a href="#单行侧轴对齐方式（align-items）（重点）" class="headerlink" title="单行侧轴对齐方式（align-items）（重点）"></a>单行侧轴对齐方式（align-items）（重点）</h2><blockquote><p>可以通过 <code>align-items</code> 设置单行元素在侧轴的对齐方式。 </p></blockquote><p><strong>取值：</strong></p><ul><li><p><strong>flex-start：向侧轴的开始位置对齐</strong></p><p><img src="\images\aflex-start.png" alt="aflex-start"></p></li><li><p><strong>flex-end：向侧轴的结束位置对齐</strong></p><p><img src="\images\aflex-end.png" alt="aflex-end"></p></li><li><p><strong>center：居中对齐</strong></p><p><img src="\images\acenter.png" alt="acenter"></p></li><li><p><strong>stretch：让子盒子的高度拉伸显示（默认值）</strong></p><blockquote><p>只有当子元素没有高度时，才会有拉伸效果（否则以设置的高度为准）</p></blockquote><p><img src="\images\astretch.png" alt="astretch"></p></li></ul><hr><h2 id="是否换行（flex-wrap）"><a href="#是否换行（flex-wrap）" class="headerlink" title="是否换行（flex-wrap）"></a>是否换行（flex-wrap）</h2><blockquote><p>flex布局中，默认是单行显示的，如果子元素的宽度之和超出了父元素的宽度，此时子盒子会默认压缩显示。</p><p>此时，如果需要设置子元素换行显示，可以使用属性 <code>flex-wrap</code></p></blockquote><p><strong>取值：</strong></p><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">nowrap</td><td style="text-align:center">不换行（默认值）</td></tr><tr><td style="text-align:center">wrap</td><td style="text-align:center">换行</td></tr></tbody></table><h2 id="多行侧轴对齐方式（align-content）"><a href="#多行侧轴对齐方式（align-content）" class="headerlink" title="多行侧轴对齐方式（align-content）"></a>多行侧轴对齐方式（align-content）</h2><blockquote><p>之前学习的 <code>align-items</code> 只是针对于单行元素的侧轴对齐方式。</p><p>如果需要设置多行元素的侧轴对齐方式，此时需要使用 <code>align-content</code> 才行</p></blockquote><p><strong>取值（和align-items差不多）：</strong></p><table><thead><tr><th style="text-align:center">取值</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">flex-start</td><td style="text-align:center">向侧轴的开始位置对齐</td></tr><tr><td style="text-align:center">flex-end</td><td style="text-align:center">向侧轴的结束位置对齐</td></tr><tr><td style="text-align:center">center</td><td style="text-align:center">居中对齐</td></tr><tr><td style="text-align:center">stretch</td><td style="text-align:center">子元素高度拉伸显示（只有没设高才有效果）</td></tr><tr><td style="text-align:center">space-around</td><td style="text-align:center">空白环绕盒子显示</td></tr><tr><td style="text-align:center">space-between</td><td style="text-align:center">空白只在盒子之间显示</td></tr></tbody></table><p><strong>align-items与align-content的区别：</strong></p><ul><li>如果子元素没有换行，<strong>只有一行</strong>的时候使用 <code>align-items</code></li><li>如果子元素有<strong>多行</strong>，此时使用 <code>align-content</code></li></ul><hr><h5 id="—————"><a href="#—————" class="headerlink" title="—————-"></a>—————-</h5><p>学习到这里，给父元素设置的相关样式已经说完了，稍微小结一下！</p><hr><p>以下都是给子元素设置的相关属性~</p><h2 id="分配子元素空间（flex属性）"><a href="#分配子元素空间（flex属性）" class="headerlink" title="分配子元素空间（flex属性）"></a>分配子元素空间（flex属性）</h2><blockquote><p>可以通过flex属性设置子元素的分配的空间</p></blockquote><p><strong>需求：</strong> 让弹性盒子中的三个子元素等分！</p><p><strong>作用：</strong> 按照份数分配父元素主轴（宽度）的剩余空间</p><blockquote><p>优先分配具体的宽度，剩余的空间再按照分数分配。</p></blockquote><p><strong>代码：</strong> <code>flex:份数;</code></p><p><strong>通过flex属性可以很轻松的完成圣杯布局。</strong></p><h2 id="子元素排序（order属性）-了解"><a href="#子元素排序（order属性）-了解" class="headerlink" title="子元素排序（order属性）(了解)"></a>子元素排序（order属性）(了解)</h2><blockquote><p>在不能修改html结构的时候，要求改变子元素的属性，此时可以使用order属性设置</p></blockquote><p><strong>需求：</strong> 让弹性盒子中第二个子元素显示在左边第一个？？</p><p><strong>作用：</strong> 设置弹性盒子中子元素的排列顺序，<strong>数值越小，排列靠前，默认是0</strong></p><p><strong>代码：</strong> <code>order：数字;</code></p><h2 id="单个子元素侧轴对齐方式（align-self）"><a href="#单个子元素侧轴对齐方式（align-self）" class="headerlink" title="单个子元素侧轴对齐方式（align-self）"></a>单个子元素侧轴对齐方式（align-self）</h2><blockquote><p>可以通过 <code>align-self</code> 属性设置单个子元素侧轴的对齐方式</p></blockquote><p><strong>需求：</strong> 让父元素中的单行子元素居中，然后让第一个子元素跑到侧轴开始位置！</p><p><strong>作用：</strong> 设置单个子元素在侧轴的对齐方式</p><p><strong>取值（和align-items取值一样）：</strong></p><table><thead><tr><th style="text-align:center">取值</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">flex-start</td><td style="text-align:center">向侧轴的开始位置对齐（默认相当于顶部对齐）</td></tr><tr><td style="text-align:center">flex-end</td><td style="text-align:center">向侧轴的结束位置对齐（默认相当于底部对齐）</td></tr><tr><td style="text-align:center">center</td><td style="text-align:center">居中对齐</td></tr><tr><td style="text-align:center">stretch</td><td style="text-align:center">子元素高度拉伸显示（只有没设高才有效果）</td></tr></tbody></table><blockquote><p>对于其他内容有兴趣可以看看<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰的博客</a></p></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”-六面神骰"><a href="#ヾ-๑╹◡╹-ﾉ”-六面神骰" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 六面神骰"></a>ヾ(๑╹◡╹)ﾉ” 六面神骰</h5><h5 id="———————–"><a href="#———————–" class="headerlink" title="———————–"></a>———————–</h5><h1 id="携程网移动端首页项目"><a href="#携程网移动端首页项目" class="headerlink" title="携程网移动端首页项目"></a>携程网移动端首页项目</h1><blockquote><p><a href="https://m.ctrip.com/html5/" target="_blank" rel="noopener">携程网移动端</a></p></blockquote><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>方案：单独制作移动端页面</li><li>技术：采用flex布局</li></ul><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><blockquote><p>和之前的操作一样</p></blockquote><ul><li><p>新建一个项目文件夹</p><ul><li><p>新建images文件夹：放入常用的图片资源</p></li><li><p>新建css文件夹：放入index.css</p></li></ul></li></ul><h2 id="代码的编写"><a href="#代码的编写" class="headerlink" title="代码的编写"></a>代码的编写</h2><ul><li><p><strong>视口</strong>需要设置完整：</p><blockquote><p>移动端开发第一个注意点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在html中引入css文件</p></li><li><p>移动端网页整体需要有一个<strong>整体的大容器</strong></p><ul><li>可以直接把body当做整体大容器</li><li>或者设置一个全局容器：container</li></ul></li><li><p>先把整个网页的各个模块划分好</p><ul><li><strong>携程轮播：xc_banner</strong></li><li><strong>携程导航：xc_nav</strong></li><li><strong>携程产品：xc_product</strong></li><li><strong>携程底部：xc_footer</strong></li></ul></li><li><p>再每一个部分写</p></li></ul><h1 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1><blockquote><p>响应式布局（respond layout）是Ethan Marcotte在2010年5月份提出的一个概念，简而言之，就是<strong>一个网站能够兼容多个终端（pc、手机、平板）</strong></p></blockquote><h2 id="什么是响应式布局"><a href="#什么是响应式布局" class="headerlink" title="什么是响应式布局"></a>什么是响应式布局</h2><p><strong>单独制作移动端页面方案（主流）：</strong> </p><blockquote><p>同一个页面需要开发两套不同设备的版本</p></blockquote><ul><li>pc端需要开发写一套页面，专门给pc端看</li><li>移动端再开发一套页面，专门给移动端看</li></ul><p><strong>响应式布局方案（较少）：</strong></p><blockquote><p>同一个页面只需要开发一套网页</p></blockquote><ul><li>只需要写一套代码，同时给pc端和移动端看</li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-看看微金所项目"><a href="#ヾ-๑╹◡╹-ﾉ”-看看微金所项目" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”  看看微金所项目~"></a>ヾ(๑╹◡╹)ﾉ”  看看微金所项目~</h5><h2 id="响应式开发的原理（记忆）"><a href="#响应式开发的原理（记忆）" class="headerlink" title="响应式开发的原理（记忆）"></a>响应式开发的原理（记忆）</h2><p><strong><em>动态根据当前屏幕的宽度，自动改变页面中盒子的宽度、盒子的显示或隐藏</em></strong></p><h2 id="响应式开发的优缺点"><a href="#响应式开发的优缺点" class="headerlink" title="响应式开发的优缺点"></a>响应式开发的优缺点</h2><p><strong>优点：</strong> </p><ul><li>一套网页可以适配多个终端。只需要开发一套网页即可</li></ul><p><strong>缺点： </strong></p><ul><li>一个页面需要兼容多个终端，考虑的情况多种，开发效率较慢</li><li>代码会更多，网页的加载速度较慢</li></ul><h2 id="响应式开发的现状"><a href="#响应式开发的现状" class="headerlink" title="响应式开发的现状"></a>响应式开发的现状</h2><blockquote><p>在国内并不是很流行，国外较多</p></blockquote><ul><li><p>如果已经有了一套pc端网页，此时直接再写一套移动端网页即可，此时不需要使用响应式布局（比如：京东、淘宝）</p></li><li><p>如果开发一套网页都没有，是<strong>新建的项目</strong>，此时可以考虑使用响应式，写一套即可兼容多个设备。</p></li><li><p>比较<strong>简单的网页</strong>，可以考虑使用响应式，但是复杂的网页考虑的情况会很多，一般不用。</p></li></ul><h5 id="——————"><a href="#——————" class="headerlink" title="——————-"></a>——————-</h5><h1 id="响应式开发的屏幕分类"><a href="#响应式开发的屏幕分类" class="headerlink" title="响应式开发的屏幕分类"></a>响应式开发的屏幕分类</h1><blockquote><p>在响应式开发中需要动态根据屏幕的宽度改变样式，但是不可能每变化1px就改变样式。</p><p>在响应式开发中，把各种屏幕宽度分为四大类，开发中只需要考虑这四种屏幕的情况即可</p></blockquote><h2 id="设备屏幕的分类"><a href="#设备屏幕的分类" class="headerlink" title="设备屏幕的分类"></a>设备屏幕的分类</h2><table><thead><tr><th style="text-align:center">分类名称</th><th style="text-align:center">宽度范围</th></tr></thead><tbody><tr><td style="text-align:center">超小屏设备</td><td style="text-align:center">0 ~ 768px</td></tr><tr><td style="text-align:center">小屏设备</td><td style="text-align:center">768px ~ 992px</td></tr><tr><td style="text-align:center">中屏设备</td><td style="text-align:center">992px ~ 1200px</td></tr><tr><td style="text-align:center">大屏设备</td><td style="text-align:center">1200px ~ 正无穷</td></tr></tbody></table><p><img src="\images\123.png" alt="1"></p><h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><blockquote><p>刚刚说了响应式原理是：<strong><em>动态根据当前屏幕的宽度，自动改变页面中盒子的宽度、盒子的显示或隐藏</em></strong></p><p>所以需要根据不同屏幕的宽度改变样式。</p><p>可以通过css3中新增的媒体查询完成效果。</p></blockquote><p><strong>媒体查询（Media Query）：</strong>是CSS3新增的方法，媒体查询可以动态查询屏幕的宽度，根据不同的屏幕宽度设置样式是否生效！！</p><p><strong>语法：</strong> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (条件) &#123;</span><br><span class="line">    选择器......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>作用：</strong> 只有当屏幕宽度满足条件时，媒体查询中的选择器才能生效！！！</p><p><strong>注意点：</strong> 媒体查询仅仅只是控制选择器是否生效，不会提升选择器的优先级！！</p><blockquote><p>具体谁说了算，还是需要看优先级</p></blockquote><p><strong>条件：</strong></p><ul><li><p><code>min-width</code>：样式生效的屏幕最小宽度</p><blockquote><p>只有当屏幕宽度大于等于该宽度时，样式才会生效</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 样式生效的最小宽为600px——》只有当屏幕宽度大于等于600px时，样式才会生效！！*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>max-width</code> ：样式生效的屏幕最大宽度</p><blockquote><p>只有当屏幕宽度小于等于该宽度时，样式才会生效</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 样式生效的最大宽为800px——》只有当屏幕宽度小于等于800px时，样式才会生效*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>width</code> ：样式生效的宽度</p><blockquote><p>只有当屏幕宽度正好等于该宽度时，样式才会生效</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 样式只在700px宽度的时候才会生效 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (width:<span class="number">700px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: purple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-如果需要在600-800之间样式生效，怎么写？？"><a href="#ヾ-๑╹◡╹-ﾉ”-如果需要在600-800之间样式生效，怎么写？？" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 如果需要在600~800之间样式生效，怎么写？？"></a>ヾ(๑╹◡╹)ﾉ” 如果需要在600~800之间样式生效，怎么写？？</h5><blockquote><p>一个媒体查询中可以同时写多个条件，中间通过and连接即可</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 样式在 600~800中间生效 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">600px</span>) and (max-width:<span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用媒体查询完成响应式适配"><a href="#使用媒体查询完成响应式适配" class="headerlink" title="使用媒体查询完成响应式适配"></a>使用媒体查询完成响应式适配</h2><blockquote><p>可以通过媒体查询实现不同终端的布局和样式的切换，完成响应式布局。</p></blockquote><p><strong>需求：</strong>手动设置全局容器.container的响应式适配四种屏幕。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 需求： */</span></span><br><span class="line"><span class="comment">/* 超小屏幕: 0 - 768px      版心：100% 背景颜色：绿色 */</span></span><br><span class="line"><span class="comment">/* 小屏设备: 768px - 992px  版心：750px 背景颜色：蓝色 */</span></span><br><span class="line"><span class="comment">/* 中屏设备: 992px - 1200px 版心：970px 背景颜色：黄色 */</span></span><br><span class="line"><span class="comment">/* 大屏设备: 1200 ~  正无穷     版心：1170px   背景颜色：粉色 */</span></span><br></pre></td></tr></table></figure><p><strong>弊端：现在只有一个div，要做一套响应式布局，就需要如此多的代码，非常的麻烦。真正开发中我们会借助一些响应式的框架，比如bootstrap。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/移动webday04部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="移动web" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
  </entry>
  
  <entry>
    <title>移动webday03笔记</title>
    <link href="http://yoursite.com/2020/02/06/1-%E7%A7%BB%E5%8A%A8webday03%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/06/1-移动webday03笔记/</id>
    <published>2020-02-06T02:00:03.000Z</published>
    <updated>2020-03-11T08:51:14.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/移动webday03部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够说出流式布局的基本特征</li><li style="list-style: none"><input type="checkbox"> 能够使用2倍图进行页面开发</li><li style="list-style: none"><input type="checkbox"> 能够实现京东首页的头部布局</li><li style="list-style: none"><input type="checkbox"> 能够完成京东首页的静态结构</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h1 id="移动端开发选择"><a href="#移动端开发选择" class="headerlink" title="移动端开发选择"></a>移动端开发选择</h1><h2 id="常见移动端开发方案"><a href="#常见移动端开发方案" class="headerlink" title="常见移动端开发方案"></a>常见移动端开发方案</h2><blockquote><p>在写移动web代码之前，先了解移动中主流的方案，明确方向</p></blockquote><ul><li><p><strong>单独制作移动端网页（目前主流）</strong></p><blockquote><p>此类网站会检测用户的设备，如果是pc端则显示pc端页面，如果是移动端则显示移动端页面（通常移动端是网址前加了m：mobile）</p><p>特点：一个网站有两套网页</p></blockquote><ul><li><a href="https://www.jd.com/" target="_blank" rel="noopener">京东商城</a>，<a href="https://m.jd.com/" target="_blank" rel="noopener">手机京东</a></li><li><a href="https://www.taobao.com/" target="_blank" rel="noopener">淘宝网</a>，<a href="https://main.m.taobao.com/" target="_blank" rel="noopener">淘宝网触屏版</a></li><li><a href="https://www.suning.com/" target="_blank" rel="noopener">苏宁易购</a>，<a href="https://m.suning.com/" target="_blank" rel="noopener">手机苏宁</a></li><li>等等……</li></ul></li><li><p><strong>响应式网页（很少）</strong></p><blockquote><p>此类网站只有一个网页，通过判断屏幕宽度的变化从而改变页面的样式，从而适配多个终端</p><p>特点：一个网站只需要一个网页</p><p><strong>但是有显而易见的缺点：</strong>网页制作麻烦，需要考虑很多兼容性问题</p></blockquote><ul><li><a href="https://www.samsung.com/cn/" target="_blank" rel="noopener">三星官网</a></li></ul></li></ul><h2 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h2><blockquote><p>之前pc端布局的时候通过版心进行屏幕布局适配的</p><p>但是现在移动端中屏幕本身较小，再设置版心不合适，所以此时需要使用特殊的布局套路才行</p></blockquote><p><img src="\images\移动端技术选型.png" alt="移动端技术选型"></p><h1 id="流式布局的介绍"><a href="#流式布局的介绍" class="headerlink" title="流式布局的介绍"></a>流式布局的介绍</h1><blockquote><p>在移动端中需要使用一些特殊的布局方式，流式布局就是其中的一种，也叫百分比布局。</p><p><strong>通过盒子的宽度设置成百分比</strong>来根据屏幕的宽度进行伸缩，不受具体像素的限制，可以自行填充。</p><p>流式布局是移动web开发中较为常见的布局方式</p></blockquote><p><strong>布局特征：</strong></p><ul><li><p>一般盒子高度写死，宽度百分比或者自适应</p></li><li><p>小图片、小图标、文字大小一般写死</p></li><li><p>大图片一般宽度自适应（100%），高度不设置让其等比例缩放</p></li></ul><p><strong>经典的流式布局：</strong></p><ul><li><p>左侧固定，右侧自适应</p><p><img src="\images\左固定右适应.gif" alt="左固定右适应"></p></li><li><p>右侧固定，左侧自适应</p><p><img src="\images\右固定左适应.gif" alt="右固定左适应"></p></li><li><p>两侧固定，中间自适应（圣杯布局、双飞翼布局）</p><p><img src="\images\左右固定中间自适应.gif" alt="左右固定中间自适应"></p></li><li><p>等分布局</p><blockquote><p>按照之前写的宽度百分比可以完成，但是当给每一个盒子<strong>设置border之后</strong>，会发现盒子掉下来了~</p><p>只要进行移动端布局，盒子约定俗成都需要加上自动内减。</p></blockquote></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”演示场景的流式布局"><a href="#ヾ-๑╹◡╹-ﾉ”演示场景的流式布局" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”演示场景的流式布局"></a>ヾ(๑╹◡╹)ﾉ”演示场景的流式布局</h5><p><strong>拓展：</strong></p><blockquote><p><code>overflow:hidden</code> 会触发盒子的BFC</p></blockquote><p>触发BFC的盒子的特点：</p><ul><li>解决margin的塌陷</li><li>清除浮动</li><li>不会在浮动元素下面，会被挤到一边去</li></ul><h1 id="JDM京东移动端项目"><a href="#JDM京东移动端项目" class="headerlink" title="JDM京东移动端项目"></a>JDM京东移动端项目</h1><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li><p>方案：单独制作移动端网页</p></li><li><p>技术：采用流式布局</p></li></ul><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h2 id="项目的搭建"><a href="#项目的搭建" class="headerlink" title="项目的搭建"></a>项目的搭建</h2><blockquote><p>和之前的操作一样</p></blockquote><ul><li><p>新建一个项目文件夹</p><ul><li><p>新建images文件夹：放入常用的图片资源</p></li><li><p>新建css文件夹：放入index.css和base.css</p></li></ul></li><li><p>引入favicon.ico图标</p></li><li><p>base.css的阅读</p><blockquote><p>大部分来说和之前基础班的base.css文件是一样的，但是有个别的几个区别</p></blockquote><ul><li><p><strong>取消a标签移动端点击高亮的效果</strong></p><p><code>-webkit-tap-highlight-color: rgba(0, 0, 0, 0);</code></p></li></ul></li></ul><h2 id="代码的编写"><a href="#代码的编写" class="headerlink" title="代码的编写"></a>代码的编写</h2><ul><li><p><strong>视口</strong>需要设置完整：</p><blockquote><p>移动端开发第一个注意点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在html中引入css文件</p><ul><li>先引入base.css</li><li>再引入index.css</li></ul></li><li><p>移动端网页整体需要有一个<strong>整体的大容器</strong></p><ul><li>可以直接把body当做整体大容器</li><li>或者<strong>京东整体的大盒子：jd_container</strong><ul><li>宽度设置100%</li><li>高度由内容撑开：先写随便写一个</li><li>针对于大屏幕如pc端来说，占满一行就有问题了，此时需要设置最大宽度：max-length一般给设计图的大小。（因为比设计图还要大图片会放大失真）</li><li>针对于移动端有最小的宽度：min-width一般给需要适配的最小宽度（320px即可）</li><li>居中：margin：0 auto；</li></ul></li></ul></li><li><p>先把整个网页的各个模块划分好</p><p><img src="\images\京东模块划分.png" alt="京东模块划分"></p></li><li><p>再每一个部分写</p></li></ul><p><strong>注意点：</strong> 设计师给的设计图是是二倍图，所以量取的大小应该缩小2倍才行。（精灵图也是一样的）</p><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><ul><li><p><strong>设置精灵图有背景颜色</strong></p><ol><li>ps右下角倒数第二个按钮点击一下（新建图层）</li><li>左侧选择一个颜色，然后鼠标点击新建的图层，使用快捷键 <code>alt + backspace(删除键)</code> （填充图层颜色）</li><li>将有颜色的图片拖到精灵图层的下面即可 </li></ol><p><img src="\images\设置精灵图背景颜色.gif" alt="设置精灵图背景颜色"></p></li></ul><hr><ul><li><p><strong>改变图片的大小</strong></p><blockquote><p>设计师给的图片是2倍图，此时量取之后还要缩小2倍比较麻烦，此时可以直接把图片大小整体缩小两倍。之后再直接量取即可。</p></blockquote><ol><li>选择上方的<strong>图像</strong>按钮</li><li>选择<strong>图像</strong>中的<strong>图像大小</strong>选项</li><li>在对话框中设置修改之后的图像大小，只需要把宽度设置为原来的一半即可。</li></ol><p><strong>注意点：</strong> 此操作<strong>仅仅只是为了量取</strong>更加便捷，但是项目中为了图片清晰还是需要引入2倍图（400px*400px的图片）<img src="\images\改变图片的大小.gif" alt="改变图片的大小"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/移动webday03部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="移动web" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
  </entry>
  
  <entry>
    <title>移动webday02笔记</title>
    <link href="http://yoursite.com/2020/02/06/1-%E7%A7%BB%E5%8A%A8webday02%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/06/1-移动webday02笔记/</id>
    <published>2020-02-06T02:00:02.000Z</published>
    <updated>2020-03-11T09:02:43.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/移动webday02部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够理解过渡transition的使用方式</li><li style="list-style: none"><input type="checkbox"> 能够实现基本的动画</li><li style="list-style: none"><input type="checkbox"> 了解动画的八大参数</li><li style="list-style: none"><input type="checkbox"> 能够理解视口的概念并进行视口的设置（快捷键）</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="过渡（transition）"><a href="#过渡（transition）" class="headerlink" title="过渡（transition）"></a>过渡（transition）</h2><blockquote><p>昨天学习了过渡属性，直接设置的是 <code>transition:1s;</code> ，其实 <code>transition</code> 属性是一个复合属性</p></blockquote><p>让一个盒子hover之后慢慢的变宽~</p><h3 id="过渡相关属性"><a href="#过渡相关属性" class="headerlink" title="过渡相关属性"></a>过渡相关属性</h3><blockquote><p>其实过渡属性可以分为多个单独的属性进行设置</p></blockquote><h4 id="过渡的时间（transition-duration）"><a href="#过渡的时间（transition-duration）" class="headerlink" title="过渡的时间（transition-duration）"></a>过渡的时间（transition-duration）</h4><blockquote><p>设置完成过渡效果需要多少时间</p></blockquote><p><strong>代码：</strong><code>transition-duration：1s;</code></p><p><strong>取值：</strong></p><ul><li>具体的时间（1s）</li></ul><h4 id="过渡的属性（transition-property）"><a href="#过渡的属性（transition-property）" class="headerlink" title="过渡的属性（transition-property）"></a>过渡的属性（transition-property）</h4><blockquote><p>设置过渡效果的css属性的名称</p></blockquote><p><strong>代码：</strong><code>transition-property:all;</code></p><p><strong>取值：</strong></p><ul><li><p>可以是具体的属性（width、height、……）</p></li><li><p><strong>all</strong>（表示所有属性都有过渡的效果，默认值）</p><blockquote><p>但是从效果来说，不是每一个属性都有过渡效果，比如：display：none这种不可以过渡的属性，是没有过渡的效果的（因为不存在中间状态）</p></blockquote></li></ul><h4 id="过渡的变化效果（transition-timing-function）"><a href="#过渡的变化效果（transition-timing-function）" class="headerlink" title="过渡的变化效果（transition-timing-function）"></a>过渡的变化效果（transition-timing-function）</h4><blockquote><p>设置过渡变化速度效果的不同</p></blockquote><p><strong>代码：</strong> <code>transition-timing-function：linear;</code></p><p><strong>取值：</strong> </p><ul><li>ease：慢速→快速→慢速</li><li>linear：匀速变化</li><li>steps（n）：过渡分为几步完成（n个步骤完成）</li></ul><h4 id="过渡的延时（transition-delay）"><a href="#过渡的延时（transition-delay）" class="headerlink" title="过渡的延时（transition-delay）"></a>过渡的延时（transition-delay）</h4><blockquote><p>设置过渡在多少时间之后开始</p></blockquote><p><strong>代码：</strong> <code>transition-delay：2s;</code></p><p><strong>取值：</strong></p><ul><li>具体的时间</li></ul><h3 id="过渡的连写形式（transition）"><a href="#过渡的连写形式（transition）" class="headerlink" title="过渡的连写形式（transition）"></a>过渡的连写形式（transition）</h3><blockquote><p>过渡相关属性都是以transition开头，可以通过transition属性设置相关属性</p></blockquote><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 过渡的属性 */</span></span><br><span class="line">    <span class="attribute">transition-property</span>: all;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 过渡的时间 */</span></span><br><span class="line">    <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 过渡的变化效果 */</span></span><br><span class="line">    <span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 过渡的延时 */</span></span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*----------------------------------*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 连写形式 */</span></span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> linear <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>连写的注意点：</strong></p><ul><li><p><strong>省略问题</strong>：按照需求省略，省略相当于设置了默认值</p></li><li><p><strong>顺序问题</strong>：没有要求，但是注意第一个时间永远是过渡时间</p><blockquote><p>如果连写中只设置了一个时间，这个时间表示的是过渡的时间</p><p>如果连写中设置了两个时间，则第一个时间表示过渡的时间，第二个时间表示延时的时间</p></blockquote></li></ul><h3 id="过渡属性的小结"><a href="#过渡属性的小结" class="headerlink" title="过渡属性的小结"></a>过渡属性的小结</h3><ul><li>过渡的时间：<code>transition-duration</code></li><li>过渡的属性：<code>transition-property</code></li><li>过渡的效果：<code>transition-timing-function</code></li><li>过渡的延时：<code>transition-delay</code></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-3D相册案例"><a href="#ヾ-๑╹◡╹-ﾉ”-3D相册案例" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 3D相册案例"></a>ヾ(๑╹◡╹)ﾉ” 3D相册案例</h5><p>300*400</p><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h2 id="css3动画"><a href="#css3动画" class="headerlink" title="css3动画"></a>css3动画</h2><blockquote><p>动画可以通过设置多个节点来精确控制一个或者一组动画，常用来实现复杂的动画效果。</p></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”动画的初体验（让一个div一直旋转）"><a href="#ヾ-๑╹◡╹-ﾉ”动画的初体验（让一个div一直旋转）" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”动画的初体验（让一个div一直旋转）"></a>ヾ(๑╹◡╹)ﾉ”动画的初体验（让一个div一直旋转）</h5><blockquote><p>看写好的动画效果</p></blockquote><p><img src="\images\动画旋转-1582361435595.gif" alt="动画旋转"></p><p><strong>问题：</strong> 动画和过渡的区别？</p><ul><li><p>过渡必须要触发条件（如：hover），动画则可以不需要（浏览器一刷新就动起来）</p></li><li><p>过渡最后肯定会停下来，动画则可以一直运行下去</p></li><li><p>过渡需要两个状态的不同，动画则可以设置多个状态</p><blockquote><p> <strong>效果</strong>上来说相似，但是动画比过渡跟复杂点</p></blockquote></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-把刚刚的hover效果改写成一刷新就一直旋转动画"><a href="#ヾ-๑╹◡╹-ﾉ”-把刚刚的hover效果改写成一刷新就一直旋转动画" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 把刚刚的hover效果改写成一刷新就一直旋转动画"></a>ヾ(๑╹◡╹)ﾉ” 把刚刚的hover效果改写成一刷新就一直旋转动画</h5><blockquote><p>动画的实现两步：</p><ol><li>定义动画：@keyframes 动画名{}</li><li>使用/调用动画：给对应的元素设置animation属性</li></ol></blockquote><h3 id="定义动画（-keyframes）"><a href="#定义动画（-keyframes）" class="headerlink" title="定义动画（@keyframes）"></a>定义动画（@keyframes）</h3><blockquote><p>使用动画前首先要定义一个动画出来，需要通过<strong>动画序列</strong>设计动画→说白了就是控制动画的不同状态</p></blockquote><p><strong>需求：(动画需要考虑状态)</strong></p><ol><li>默认盒子宽度200，让盒子变宽为800的动画。</li><li>默认盒子宽高都是200，先让盒子变宽为800，再让盒子变高为800</li></ol><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. 定义一个动画 */</span></span><br><span class="line"><span class="comment">/* 定义动画方式一：from-to两个状态 */</span></span><br><span class="line">@<span class="keyword">keyframes</span> dong &#123;</span><br><span class="line">    <span class="comment">/* 动画的开始状态 */</span></span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 动画的结束状态 */</span></span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------------------*/</span></span><br><span class="line"><span class="comment">/* 定义动画方式二：百分比设置多个状态 */</span></span><br><span class="line">@<span class="keyword">keyframes</span> bian &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-调用动画（animation）"><a href="#使用-调用动画（animation）" class="headerlink" title="使用/调用动画（animation）"></a>使用/调用动画（animation）</h3><blockquote><p>其实animation属性是一个复合属性，一共是8个属性的连写形式</p></blockquote><p><strong>设置元素宽度变长的动画</strong></p><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">使用动画相关的属性：</span></span><br><span class="line"><span class="comment">1、动画的名字：animation-name------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">animation-name</span>: <span class="selector-tag">big</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">2、动画的持续时间（一次动画持续的时间）：animation-duration------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">animation-duration</span>: 1<span class="selector-tag">s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">3、动画的延时：animation-delay------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">animation-delay</span>: 1<span class="selector-tag">s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">4、动画的效果：animation-timing-function------------------------------------</span></span><br><span class="line"><span class="comment">取值：</span></span><br><span class="line"><span class="comment">1、ease：先慢——》再快——》再慢</span></span><br><span class="line"><span class="comment">2、linear：匀速</span></span><br><span class="line"><span class="comment">3、steps()：分步进行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">animation-timing-function</span>: <span class="selector-tag">linear</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">5、动画的执行次数：animation-iteration-count------------------------------------</span></span><br><span class="line"><span class="comment">取值：</span></span><br><span class="line"><span class="comment">1、次数（默认是1次）</span></span><br><span class="line"><span class="comment">2、infinite：无限次</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">animation-iteration-count</span>: <span class="selector-tag">infinite</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">6、指定动画的方向（按照什么顺序执行）：animation-direction------------------------------------</span></span><br><span class="line"><span class="comment">取值：</span></span><br><span class="line"><span class="comment">1、normal：正常（从from——》to）</span></span><br><span class="line"><span class="comment">2、reverse：反转（从to——》from）</span></span><br><span class="line"><span class="comment">3、alternate：交替（from——》to——》from——》to——》from....）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">animation-direction</span>: <span class="selector-tag">alternate</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">7、动画结束的状态：animation-fill-mode------------------------------------</span></span><br><span class="line"><span class="comment">取值：</span></span><br><span class="line"><span class="comment">1、backwards：（默认值）回到开始状态结束</span></span><br><span class="line"><span class="comment">2、forwards：动画在结束状态结束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">animation-fill-mode</span>: <span class="selector-tag">forwards</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">8、动画执行的状态：animation-play-state------------------------------------</span></span><br><span class="line"><span class="comment">取值：</span></span><br><span class="line"><span class="comment">1、默认执行</span></span><br><span class="line"><span class="comment">2、paused：暂停动画（一般给hover状态加，让鼠标移入之后暂停动画）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">animation-play-state</span>: <span class="selector-tag">paused</span>;</span><br></pre></td></tr></table></figure><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><p><strong>注意点：</strong></p><ul><li>一般使用动画用的都是animation的连写形式<ul><li>连写形式中只需要注意第一个时间是动画持续时间，第二个时间是延时时间即可。此外没任何顺序问题</li><li>一般只设置动画的名字、动画的持续时间、动画的次数即可</li></ul></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-大风车案例"><a href="#ヾ-๑╹◡╹-ﾉ”-大风车案例" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 大风车案例"></a>ヾ(๑╹◡╹)ﾉ” 大风车案例</h5><blockquote><p>本质上来说就是让一个盒子旋转，而盒子里面有四个扇叶</p></blockquote><p><img src="\images\大风车效果-1582361435598.gif" alt="大风车效果" style="zoom:80%;"></p><h5 id="ヾ-๑╹◡╹-ﾉ”-小鱼游动案例"><a href="#ヾ-๑╹◡╹-ﾉ”-小鱼游动案例" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 小鱼游动案例"></a>ヾ(๑╹◡╹)ﾉ” 小鱼游动案例</h5><p>一共有两个动画</p><blockquote><ol><li><p>小鱼原地抖动的动画（通过切换背景位置设置完成效果，类似于翻书动画）</p><p><img src="\images\dou-1582361435598.gif" alt="dou" style="zoom:80%;"></p></li><li><p>小鱼游动的动画</p><p><img src="\images\you-1582361435598.gif" alt="you" style="zoom:80%;"></p></li></ol></blockquote><h5 id="—————————–"><a href="#—————————–" class="headerlink" title="—————————–"></a>—————————–</h5><h2 id="背景图片大小（background-size）"><a href="#背景图片大小（background-size）" class="headerlink" title="背景图片大小（background-size）"></a>背景图片大小（background-size）</h2><blockquote><p>通过css可以设置背景图片的大小</p></blockquote><p><strong>语法：</strong> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-size</span>: 背景图片宽度  背景图片高度：</span><br></pre></td></tr></table></figure><p><strong>取值（分别设置的是宽度和高度）：</strong></p><ul><li><p>数字+px</p></li><li><p>百分比（相对于盒子的宽高百分比）</p></li><li><p>关键字</p><p><strong>默认尺寸：</strong></p><p><img src="\images\1.1.png" alt="1.1"></p><ul><li><p><strong>contain（包含）</strong>：将背景图片等比例缩放，直到<strong>不会超出盒子</strong>的最大</p><blockquote><p>直到宽度或者高度中<strong>有一个和盒子相等</strong>，并且背景图片<strong>没有溢出部分</strong>即止。</p></blockquote><p><img src="\images\1.3.png" alt="1.3"></p></li></ul></li></ul><ul><li><p><strong>cover（覆盖）</strong>：将背景图片等比例缩放，直到<strong>填满整个盒子刚好</strong>没有空白</p><blockquote><p>直到宽度或者高度中<strong>有一个和盒子相等</strong>，并且<strong>背景图片填充满盒子</strong>如果有溢出部分则被隐藏</p></blockquote><p><img src="\images\1.2-1550336266662.png" alt="1.2"></p></li></ul><hr><p><strong>注意点：</strong></p><ul><li><p>在设置<code>background-size</code> 和<code>background</code>连写的时候注意覆盖问题</p><ul><li><p>要么单独写的写在连写的下面</p></li><li><p>要么单独写的写在连写的里面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 连写完整版中，也有background-size属性，注意连写的覆盖问题 */</span></span><br><span class="line">background：color image repeat attachment position / size</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><h2 id="css3私有前缀（了解）"><a href="#css3私有前缀（了解）" class="headerlink" title="css3私有前缀（了解）"></a>css3私有前缀（了解）</h2><blockquote><p>私有前缀是为了兼容老版本浏览器的写法，</p><ul><li><p>对于新版本的浏览器无需添加。</p></li><li><p>如果需要兼容老版本浏览器，需要在css3属性前添加私有前缀。</p></li></ul></blockquote><p><strong>私有前缀的作用：</strong>兼容老版本浏览器</p><p><strong>常见不同浏览器的私有前缀代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">谷歌、苹果浏览器：<span class="selector-tag">-webkit-</span></span><br><span class="line">火狐浏览器：<span class="selector-tag">-moz-</span></span><br><span class="line"><span class="selector-tag">IE</span>浏览器：<span class="selector-tag">-ms-</span></span><br><span class="line">欧朋浏览器：<span class="selector-tag">-o-</span></span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-演示不同浏览器支持的情况"><a href="#ヾ-๑╹◡╹-ﾉ”-演示不同浏览器支持的情况" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 演示不同浏览器支持的情况"></a>ヾ(๑╹◡╹)ﾉ” 演示不同浏览器支持的情况</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*谷歌浏览器和safari浏览器的前缀 -webkit-*/</span></span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="comment">/*火狐浏览器的前缀 -moz-*/</span></span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="comment">/*ie浏览器的前缀 -ms-*/</span></span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="comment">/*opera浏览器的前缀 -o-*/</span></span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">    <span class="comment">/*规范阶段的标准写法*/</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 对于移动端来说，大多都是ios和Android的操作系统，浏览器内核都是webkit内核，所以前缀只需要写<code>-webkit-</code> 即可</p><blockquote><p>真正开发中，前缀会通过自动化打包工具自动添加，不用程序员一个个加。</p></blockquote><h5 id="————————————————"><a href="#————————————————" class="headerlink" title="————————————————"></a>————————————————</h5><h1 id="移动web的初识"><a href="#移动web的初识" class="headerlink" title="移动web的初识"></a>移动web的初识</h1><blockquote><p>移动web说白了就是移动设备中的web网页</p></blockquote><h2 id="移动web的开发现状"><a href="#移动web的开发现状" class="headerlink" title="移动web的开发现状"></a>移动web的开发现状</h2><blockquote><p>移动web开发与传统pc端开发的异同点</p></blockquote><h3 id="浏览器不同（兼容性不同）"><a href="#浏览器不同（兼容性不同）" class="headerlink" title="浏览器不同（兼容性不同）"></a>浏览器不同（兼容性不同）</h3><p><img src="\images\浏览器的现状.png" alt="浏览器的现状" style="zoom:50%;"></p><blockquote><p>其实：国内的UC、QQ、百度等手机浏览器大部分都是根据webkit修改过来的内核，国内暂无自主研发的内核。</p></blockquote><ul><li><p>pc端：浏览器种类很多，如果需要做兼容性处理，需要添加很多不同的私有前缀</p></li><li><p>移动端：兼容移动端主流浏览器，一般只需要兼容webkit内核即可，前缀只需要添加<code>-webkit-</code> 即可</p><blockquote><p>并且手机更新换代很快，所以浏览器版本都比较新，对于css3新属性的支持会更好</p></blockquote></li></ul><h3 id="屏幕尺寸不同（适配不同）"><a href="#屏幕尺寸不同（适配不同）" class="headerlink" title="屏幕尺寸不同（适配不同）"></a>屏幕尺寸不同（适配不同）</h3><ul><li><p>pc端：屏幕较大，一般通过版心进行不同屏幕的适配</p></li><li><p>移动端：移动端设备屏幕尺寸较小，并且碎片化严重（即有很多不同尺寸的屏幕）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Android</span>设备有多种分辨率：480<span class="selector-tag">x800</span>, 480<span class="selector-tag">x854</span>, 540<span class="selector-tag">x960</span>, 720<span class="selector-tag">x1280</span>，1080<span class="selector-tag">x1920</span>等，现在还有2<span class="selector-tag">K</span>，4<span class="selector-tag">k</span>屏等</span><br><span class="line"><span class="selector-tag">iPhone</span>主要分辨率有：640<span class="selector-tag">x960</span>, 640<span class="selector-tag">x1136</span>, 750<span class="selector-tag">x1334</span>, 1242<span class="selector-tag">x2208</span>等</span><br></pre></td></tr></table></figure></li></ul><p>  此时再使用版心适配就不合适了，需要使用一些特殊的布局方法→流式布局等</p><p><strong><em>其实移动web和之前学习的pc端开发也是有相同点的：使用的技术本质上一样，还是HTML/CSS/JavaScript的技术。所以同学们学习上并不难，只需要学习几种其他的布局方式即可</em></strong></p><h2 id="移动端调试方法"><a href="#移动端调试方法" class="headerlink" title="移动端调试方法"></a>移动端调试方法</h2><blockquote><p>针对于移动web开发，肯定需要在移动端上调试网页，那怎么操作呢？</p></blockquote><ul><li><p>真机调试：使用真正的手机进行访问</p><blockquote><p>等后期学到服务器内容，我们就能会：</p><ul><li><p>使用本地服务器，在局域网中通过手机访问服务器上网页</p></li><li><p>使用外网服务器，在互联网中通过手机访问</p></li></ul></blockquote></li><li><p>模拟器调试：Chrome DevTools（谷歌浏览器）的模拟手机调试</p><blockquote><p>手机设备五花八门，屏幕尺寸都大不一样，尤其是安卓端，给我们的页面预览带来了一些麻烦。在实际工作中，作为开发者一般不可能有足够的设备让我们去测试（<strong>除了测试部门</strong> ），即便有，效率也特别的低，因此开发者一般都是通过浏览器的手机模拟器来模拟不同的设备。</p></blockquote></li></ul><p>当然，虽然开发阶段一般使用模拟器调试，但是在实际工作中，最终还是需要通过真机调试的。</p><h2 id="视口（viewport）（了解）"><a href="#视口（viewport）（了解）" class="headerlink" title="视口（viewport）（了解）"></a>视口（viewport）（了解）</h2><blockquote><p>先把vscode默认设置的视口参数去掉。</p></blockquote><p>在浏览器中存在视口的概念。视口其实就是浏览器显示页面内容的屏幕区域。可以把视口当做是盛放网页的容器。</p><p><strong>问题：</strong> 写四个div宽度为320px，都左浮动，在pc端中是一行中显示的，那么在手机端比如：iPhone4打开猜猜看效果是怎样的？</p><blockquote><p>还是一行中显示，此时html标签的宽高是980px。</p><p>原因是因为手机端的页面打开的时候会在视口中打开，而视口宽度默认是980px正好可以放下</p></blockquote><h5 id="————————————–"><a href="#————————————–" class="headerlink" title="————————————–"></a>————————————–</h5><h3 id="布局视口（layout-viewport）"><a href="#布局视口（layout-viewport）" class="headerlink" title="布局视口（layout viewport）"></a>布局视口（layout viewport）</h3><blockquote><p>用于在手机上查看pc端网页的问题</p></blockquote><p><strong>历史原因</strong>：乔布斯提出了布局视口的概念</p><ul><li>早期，只有pc端网页，早期网页的版心为980px，手机端如果直接查看980px宽度的网页，布局可能会乱掉，效果不好，用户体验极差！！</li><li>后来乔布斯为了让移动端可以看到完整的网页，发明了布局视口这个概念！<strong>解决移动端查看pc端网页的问题</strong> </li></ul><p><strong>布局视口</strong>：相当于盛放网页的容器。并且一般宽度默认是980px。</p><blockquote><p>当使用布局视口980来打开网页时，此时早期的网页可以放下，布局不会乱掉。</p></blockquote><p><img src="\images\布局视口.png" alt="布局视口" style="zoom:70%;"></p><p><strong>布局视口作用的过程：</strong></p><p>移动端打开网页——》先把网页在980px的布局视口中打开（完美展示，不会乱掉）——》再把布局视口中的完美布局效果，缩放显示在移动端中（让用户可以在屏幕中看到全部的网页）</p><h3 id="理想视口（ideal-viewport）"><a href="#理想视口（ideal-viewport）" class="headerlink" title="理想视口（ideal viewport）"></a>理想视口（ideal viewport）</h3><blockquote><p>其实就是布局视口的一个理想尺寸，也是实际开发移动web的常见设置。</p></blockquote><p>刚刚我们发现了，如果布局视口是980px这种较大的情况</p><ul><li>此时为了看到网页的全貌会缩小网页的效果，此时文字看起来很小</li><li>此时如果为了看清实际的文字放大网页的效果，这时候网页又看不完全，需要左右滑动</li></ul><p>那么有没有一种情况：不缩放网页的同时，既可以文字正常阅读，又可以网页显示完全不用左右滑动呢？→理想视口</p><p><strong>理想视口：</strong>当布局视口的尺寸等于设备屏幕的尺寸，才是理想视口</p><blockquote><p>当然，为了保证在理想视口中网页效果不乱，我们之后布局的空间也会按照理想视口的空间进行布局，毕竟现在我们已经大量针对于移动端布局的网页了</p></blockquote><blockquote><p>那就剩一个问题了，我们如何设置布局视口的尺寸就等于当前设备屏幕的尺寸呢？→通过视口标签设置</p></blockquote><h3 id="meta标签的设置视口（记住）"><a href="#meta标签的设置视口（记住）" class="headerlink" title="meta标签的设置视口（记住）"></a>meta标签的设置视口（记住）</h3><blockquote><p>通过meta标签可以进行视口的设置</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">解释说明</th></tr></thead><tbody><tr><td style="text-align:center">width</td><td style="text-align:center">设置视口的宽度，device-width表示当前设备的宽度</td></tr><tr><td style="text-align:center">user-scalable</td><td style="text-align:center">设置用户是否可以缩放，yes/no</td></tr><tr><td style="text-align:center">initial-scale</td><td style="text-align:center">初识缩放比</td></tr><tr><td style="text-align:center">maximum-scale</td><td style="text-align:center">最大缩放比</td></tr><tr><td style="text-align:center">minimum-scale</td><td style="text-align:center">最小缩放比</td></tr></tbody></table><blockquote><p>之后开发专门针对于移动端网页时，一般都需要加上以上meta标签，这算是移动web的<strong>第一个注意点</strong>。</p></blockquote><h5 id="————————————–-1"><a href="#————————————–-1" class="headerlink" title="————————————–"></a>————————————–</h5><blockquote><p>接下来我们看下移动web中第二个指的注意点的点</p></blockquote><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><blockquote><p>在移动端开发的时候会使用到二倍图，这也是移动web中需要同学们注意的第二个注意的。</p><p>但是如果想理解二倍图，首先我们先认识几个移动端中相关概念</p></blockquote><h3 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h3><blockquote><p>我们平时买手机的时候可以看到手机的各项参数，比如：iphone6/7/8手机的分辨率是750*1334</p><p>你所看到的这个<strong>分辨率其实指的就是物理像素</strong></p></blockquote><p><strong>物理像素：</strong>指的是屏幕中显示的最小颗粒，是真实在物理现实中存在的。</p><blockquote><p>说白了就是拿放大镜看到的屏幕中的一个一个<strong>发光点</strong></p></blockquote><p><img src="\images\显微镜放大屏幕物理像素.gif" alt="显微镜放大屏幕物理像素"></p><p><img src="\images\物理像素.jpeg" alt="物理像素" style="zoom:40%;"></p><blockquote><p>我们知道了物理像素就是屏幕中的小小发光点之后，其实肯定有同学会联想到：css中的px，这个px我们平时也叫做css中的像素，那么物理像素和css像素px之间存在什么关系呢？？</p></blockquote><p>css像素px是我们在css中常见的长度单位。但是现在需要<strong>注意</strong>：</p><ul><li><p>之前pc端：1个px确实等于1个物理像素——》1个px对应于1个屏幕发光点</p></li><li><p>现在移动端：1个px可能等于多个物理像素——》1个px对应于多个屏幕发光点</p><blockquote><p><strong>比如：</strong>iphone6/7/8分辨率（物理像素）：750*1334——》一行只能放375px的盒子——》1px==2个物理像素（发光点）</p></blockquote></li></ul><h3 id="移动端屏幕的特点"><a href="#移动端屏幕的特点" class="headerlink" title="移动端屏幕的特点"></a>移动端屏幕的特点</h3><blockquote><p>说到这里，有同学可能会觉得：为啥到移动端屏幕和pc端屏幕的设备像素比不能都是1:1的关系了呢？1:1不行嘛？</p></blockquote><ul><li>其实pc端和早期的手机屏幕确实设备像素比是1:1，即：1px==1个物理像素（发光点）</li><li>后面随着技术的发展，出现了比如：<strong>Retina（视网膜屏幕）</strong>显示技术，可以将把更多的物理像素点压缩至一块屏幕，即1px==多个物理像素（发光点），从而达到更高的分辨率，并提高屏幕显示的细腻程度。</li></ul><p><img src="\images\屏幕放大图.jpg" alt="屏幕放大图"></p><p><img src="\images\2x-1582543853038.png" alt="2x"></p><blockquote><p>当物理像素发光点越密集，所以效果更加清晰细腻，因此现在越来越多的移动端屏幕都会选择1px对应多个物理像素的情况了。现在常见的情况就是1px==2个物理像素</p></blockquote><blockquote><p>那么既然随着技术的发展，1px==多个物理像素点，那么对于开发者来说的影响到底是什么呢？？此时我们在移动端中使用图片就会受到影响。</p></blockquote><h3 id="二倍图的出现"><a href="#二倍图的出现" class="headerlink" title="二倍图的出现"></a>二倍图的出现</h3><blockquote><p>图片也存在分辨率的概念</p></blockquote><p><strong>图片分辨率：</strong>指的是图片在水平垂直方向需要显示多少个物理像素（小光点）</p><blockquote><p>比如：图片的分辨率是 <code>200*200</code>，其实表示图片显示在屏幕中需要用到 <code>200*200</code> 的<strong>物理像素（发光点）</strong> </p></blockquote><h5 id="———————"><a href="#———————" class="headerlink" title="———————-"></a>———————-</h5><p><strong>存在的问题：以 <code>200*200</code>分辨率 的图片显示为例</strong></p><ul><li>之前在pc端中：图片需要 <code>200*200</code> 的发光点——》pc端中：1px==1发光点——》所以此时css中我们需要 <code>200*200</code> px即可</li><li>但是现在移动端中：图片需要 <code>200*200</code> 的发光点——》iphone4中：1px==2发光点——》所以此时css中需要 <code>100*100</code> px即可</li></ul><hr><p><strong>问题：</strong> 如果我们需要在移动端iphone4中显示 <strong><code>100*100</code> px</strong>的图片，其实我们需要多大分辨率的图片才行？？？</p><p><img src="\images\移动端实际效果截图.jpg" alt="移动端实际效果截图"></p><p><img src="\images\二倍图对比.png" alt="移动端实际效果截图"></p><p><strong>结论：</strong> 在移动端如：iphone4中，需要显示多少px的图片，为了清晰不被强行放大，其实需要使用宽高为2倍分辨率的图片才是最好的效果。而这使用的宽高为2倍分辨率大小的图片，称之为<strong>2倍图</strong></p><blockquote><p>实际开发中现在还存在2倍图、3倍图、4倍图之类的，但是具体使用哪一种看公司的需要或者要求</p></blockquote><p><strong>命名特点：</strong></p><ul><li><a href="mailto:xxxxx@2x.png" target="_blank" rel="noopener">xxxxx@2x.png</a>：二倍图</li><li><a href="mailto:xxxxx@3x.png" target="_blank" rel="noopener">xxxxx@3x.png</a>：三倍图</li></ul><p><strong>注意点：</strong> 二倍图是我们移动web开发时的第二个代码注意点，总结来说：一般移动web开发图片常是二倍图，使用的时候记得把图片的分辨率除以二设置px即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/移动webday02部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="移动web" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
  </entry>
  
  <entry>
    <title>移动webday01笔记</title>
    <link href="http://yoursite.com/2020/02/06/1-%E7%A7%BB%E5%8A%A8webday01%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/06/1-移动webday01笔记/</id>
    <published>2020-02-06T02:00:01.000Z</published>
    <updated>2020-03-11T08:51:05.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《部分案例代码下载》"><a href="#《部分案例代码下载》" class="headerlink" title="《部分案例代码下载》"></a><a href="/download/移动webday01部分案例代码.zip">《部分案例代码下载》</a></h2><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够使用2d转换属性</li><li style="list-style: none"><input type="checkbox"> 能够认识3d坐标系</li><li style="list-style: none"><input type="checkbox"> 能够使用3d转换属性</li><li style="list-style: none"><input type="checkbox"> 能够理解<code>perspective</code>和 <code>transform-style：preserve-3d</code>的区别</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h1 id="CSS3的补充知识点"><a href="#CSS3的补充知识点" class="headerlink" title="CSS3的补充知识点"></a>CSS3的补充知识点</h1><h2 id="过渡的基本认识（transition）"><a href="#过渡的基本认识（transition）" class="headerlink" title="过渡的基本认识（transition）"></a>过渡的基本认识（transition）</h2><blockquote><p>而在CSS3中，提供了一个过渡属性，可以让元素的样式慢慢的变化（过渡的效果）</p></blockquote><p><strong>需求：</strong> 一个div默认200*200，背景红色，要求鼠标移入之后宽度 <strong>变成800px</strong></p><blockquote><p>之前设置元素hover的样式，元素的样式是瞬间改变的，很突然。</p><p>如果需要让元素样式的变成慢慢的进行，可以怎么做呢？此时可以使用过渡来完成。</p></blockquote><ul><li>慢慢的变化是过渡的效果，除了宽度之外，其他属性都可以进行过渡，如颜色等</li></ul><p><strong>代码：</strong> <code>transition:1s;</code></p><p><strong>注意点：</strong></p><ul><li><p>过渡属性给需要过渡的元素本身加</p></li><li><p>过渡一般需要有两个状态不同的样式才能有效果</p><ul><li>默认状态</li><li>hover状态</li></ul><blockquote><p>默认一般只要两个状态的样式不同，都会有过渡效果（有特殊情况）</p></blockquote></li><li><p>transition属性设置在不同状态中，效果不同。</p><ul><li><p>如果写在默认状态中，那么鼠标移入移出时都有过渡效果</p></li><li><p>如果写在hover状态中，那么鼠标只有移入时有过渡效果，移出时没有。</p><blockquote><p>因为移出时hover选择器不能选中元素，此时元素上没有transition属性了，所以移出时就没有过渡效果了。</p></blockquote></li></ul></li></ul><h2 id="2D转换（transform）"><a href="#2D转换（transform）" class="headerlink" title="2D转换（transform）"></a>2D转换（transform）</h2><blockquote><p>transform: 转换，是CSS3最具颠覆性的几个特性之一，既可以用于2D转换，也可以用于3D转换。</p><p>transform：2D转换，元素在平面上实现缩放、旋转、平移等操作</p></blockquote><h3 id="缩放（scale）"><a href="#缩放（scale）" class="headerlink" title="缩放（scale）"></a>缩放（scale）</h3><p><img src="/images/2d转换缩放.gif" alt="2d转换缩放"></p><blockquote><p>缩放可以让元素进行放大或者缩小</p></blockquote><p><strong>需求：</strong>此时需要让一个<strong>有内容的div</strong>鼠标移入之后，让<strong>整体宽度放大</strong>为两倍，可以怎么实现呢？（如果包括内容也缩放呢？）</p><p><strong>方案：</strong></p><ul><li><p>可以hover之后设置width为原来的两倍</p><blockquote><p>但是div里面的内容并不会缩放</p></blockquote></li><li><p>可以使用<code>transform:scaleX(2);</code> 对div进行缩放，并且div的<strong>内容也会缩放</strong></p></li></ul><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 让宽度进行缩放 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleX</span>(2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 让高度进行缩放 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果需要同时设置宽度和高度进行缩放 */</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:scale(2</span>,2);</span><br><span class="line"><span class="comment">/* 特殊情况：或者只设置一个，表示宽高都是一个比例 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(2);</span><br></pre></td></tr></table></figure><p><strong>取值：</strong></p><ul><li><p>没有单位的数字（倍数）</p><blockquote><p>如果scale中是一个值，这个值表示宽高都是这个比例进行缩放</p></blockquote></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-图片放大效果（类似于穷游网的效果）"><a href="#ヾ-๑╹◡╹-ﾉ”-图片放大效果（类似于穷游网的效果）" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 图片放大效果（类似于穷游网的效果）"></a>ヾ(๑╹◡╹)ﾉ” 图片放大效果（类似于穷游网的效果）</h5><blockquote><p>如：<a href="https://www.qyer.com/" target="_blank" rel="noopener">穷游网</a></p><p>hover时，让其中的img图片放大</p></blockquote><blockquote><p>缩放效果默认是以元素中心点放大的，如果需要让元素以特殊的位置放大，可以怎么做呢？</p></blockquote><h3 id="转换原点（transform-origin）"><a href="#转换原点（transform-origin）" class="headerlink" title="转换原点（transform-origin）"></a>转换原点（transform-origin）</h3><blockquote><p>通过transform-origin可以设置转换的中心原点</p></blockquote><p><strong>代码：</strong> <code>transform-origin:center center;</code></p><p><strong>取值：</strong></p><blockquote><p>原点的取值和之前学习的background-position是一样的</p></blockquote><ul><li>方位名词：<ul><li>水平：left、center、right</li><li>垂直：top、center、bottom</li></ul></li><li>坐标点：以元素左上角为原点，水平向右是x轴，垂直向下是y轴</li></ul><h5 id="————————"><a href="#————————" class="headerlink" title="————————"></a>————————</h5><h3 id="旋转（rotate）"><a href="#旋转（rotate）" class="headerlink" title="旋转（rotate）"></a>旋转（rotate）</h3><p><img src="/images//2d转换旋转.gif" alt="2d转换旋转"></p><blockquote><p>通过rotate可以让元素进行旋转</p></blockquote><p><strong>代码：</strong> <code>transform:rotate(90deg);</code></p><p><strong>取值：</strong></p><ul><li><p>角度（deg）</p><blockquote><p>顺时针进行转动</p></blockquote></li></ul><p><strong>注意点：</strong></p><ul><li>也可以通过 <code>transform-origin</code> 属性来设置旋转原点</li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-扑克牌效果"><a href="#ヾ-๑╹◡╹-ﾉ”-扑克牌效果" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 扑克牌效果"></a>ヾ(๑╹◡╹)ﾉ” 扑克牌效果</h5><h3 id="平移（translate）"><a href="#平移（translate）" class="headerlink" title="平移（translate）"></a>平移（translate）</h3><p><img src="/images/2d转换平移.gif" alt="2d转换平移"></p><blockquote><p>可以通过translate让元素进行平移</p></blockquote><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 沿着x轴进行平移 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(100<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 沿着y轴进行平移 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(100<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 沿着x轴和y轴进行移动 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(100<span class="selector-tag">px</span>,100<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p><strong>取值：</strong></p><ul><li><p>可以是具体的数值</p></li><li><p>可以是百分比</p><blockquote><p>百分比是相对于自身元素的百分比！</p></blockquote></li></ul><p><strong>注意点：</strong></p><ul><li>translate平移不会影响其他盒子的位置，是相对于自己原来的位置进行移动的，类似于相对定位的效果。</li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”-让一个盒子水平垂直都居中"><a href="#ヾ-๑╹◡╹-ﾉ”-让一个盒子水平垂直都居中" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 让一个盒子水平垂直都居中"></a>ヾ(๑╹◡╹)ﾉ” 让一个盒子水平垂直都居中</h5><blockquote><p>之前我们使用定位居中时，是具体通过margin完成效果的。但是当元素的宽高不确定，如由内容撑开时，使用translate会更好点。</p></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”-2d转换的小结"><a href="#ヾ-๑╹◡╹-ﾉ”-2d转换的小结" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 2d转换的小结"></a>ヾ(๑╹◡╹)ﾉ” 2d转换的小结</h5><h3 id="转换的合写问题"><a href="#转换的合写问题" class="headerlink" title="转换的合写问题"></a>转换的合写问题</h3><blockquote><p>之前每种转换都是分开实现的，如果需要让一个盒子同时实现三种转换，就需要使用到转换的合写形式</p></blockquote><p><strong>需求：</strong> 一个盒子在页面中居中，当hover到body时，让一个盒子往右平移400px，同时旋转360度，同时宽高都缩小为原来的0.5倍，可以怎么实现？</p><blockquote><p>transform属性只能写一个，所以需要设置一个transform的连写形式。</p></blockquote><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(1000<span class="selector-tag">px</span>) <span class="selector-tag">rotate</span>(360<span class="selector-tag">deg</span>) <span class="selector-tag">scale</span>(0<span class="selector-class">.5</span>);</span><br></pre></td></tr></table></figure><blockquote><p>如果先写rotate（360deg）可不可以呢？</p></blockquote><p><strong>注意点：</strong></p><ul><li><p>transform属性值之间需要以空格隔开</p></li><li><p>rotate属性如果写在第一个，rotate会让坐标轴也一起旋转，坐标轴改变之后会平移的方向！</p><blockquote><p>写在<strong>第一个的属性值会影响坐标轴</strong></p></blockquote></li></ul><h5 id="————————-1"><a href="#————————-1" class="headerlink" title="————————"></a>————————</h5><h2 id="3D转换（transform）"><a href="#3D转换（transform）" class="headerlink" title="3D转换（transform）"></a>3D转换（transform）</h2><blockquote><p>transform不仅仅可以进行2D转换（平面内转换），还可以进行3D转换（立体的空间）</p></blockquote><p><strong>问题：</strong> 2D和3D的区别是什么呢？</p><blockquote><p>2D是一个平面，一个平面坐标系（只有x轴和y轴）</p><p>3D是一个立体的空间，一个立体坐标系（有x轴和y轴还有z轴）</p><p>说白了，3D就比2D多出了一个<strong>z轴</strong></p></blockquote><h3 id="3D坐标系"><a href="#3D坐标系" class="headerlink" title="3D坐标系"></a>3D坐标系</h3><blockquote><p>实际在浏览器中有一个立体坐标系，用x、y、z分别表示空间的3个维度，三条轴互相垂直。</p></blockquote><p><strong>x轴：</strong> 水平向右是x轴正方向</p><p><strong>y轴：</strong> 垂直向下是y轴正方向</p><p><strong>z轴：</strong> 做浏览器平面垂直向脸方向是z轴正方向</p><p><img src="/images/zbz.png" alt=""></p><p><img src="/images/3d坐标系.png" alt="3d坐标系"></p><h3 id="透视-视距（perspective）"><a href="#透视-视距（perspective）" class="headerlink" title="透视/视距（perspective）"></a>透视/视距（perspective）</h3><p><strong>需求：</strong> 让图片沿着x轴进行旋转，此时会立体旋转，看一下此时图片是往里还是往外旋转的？</p><blockquote><p>因为电脑显示屏是一个2D的平面，所以直接沿着x轴立体旋转看不出效果。</p><p>此时可以通过perspective属性，可以定义眼睛距视图的距离，单位是px。</p></blockquote><p><strong><code>perspective</code> 属性给父元素设置，可以让其子元素有近大远小的效果。</strong></p><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">perspective</span>：1000<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><strong>其实和生活中的场景是一样的：</strong></p><p><img src="/images/per1.jpg" alt="per1"></p><blockquote><p>路实质都是一样的宽的，那怎么看出来那边更近呢？近的会大一点，远的会小一点。</p></blockquote><p><img src="/images/per2.jpg" alt="per2"></p><blockquote><p>房子实质都是一样大的，那怎么看出来右边的更近，左边的更远？近大远小</p></blockquote><p><code>perspective</code> 的取值：设置的是观察者眼睛离元素初始平面（z=0平面）的距离</p><ul><li>如果取值越大，表示距离越远，近大远小的效果就越不明显</li><li>如果取值越小，表示距离越近，近大远小的效果就越明显</li></ul><blockquote><p>一般不会给太小，适中即可。</p></blockquote><p>接下来我们主要学习最常用的两个3d转换~</p><h3 id="3d旋转（rotate）"><a href="#3d旋转（rotate）" class="headerlink" title="3d旋转（rotate）"></a>3d旋转（rotate）</h3><blockquote><p>rotate直接设置就是2D平面效果。</p><p>当rotate沿着x轴或者y轴进行旋转时，此时就是3D的效果</p></blockquote><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 让元素沿着x轴旋转 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateX</span>(45<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/3d旋转rotateX.gif" alt="3d旋转rotateX" style="zoom:50%;"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 让元素沿着y轴旋转 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateY</span>(45<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/3d旋转rotateY.gif" alt="3d旋转rotateY" style="zoom:50%;"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 让元素沿着z轴旋转，就是默认平面的效果，即rotate() */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateZ</span>(45<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/3d旋转rotateZ.gif" alt="3d旋转rotateZ" style="zoom:50%;"></p><h5 id="ヾ-๑╹◡╹-ﾉ”-演示3D旋转沿着不同轴旋转的效果"><a href="#ヾ-๑╹◡╹-ﾉ”-演示3D旋转沿着不同轴旋转的效果" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 演示3D旋转沿着不同轴旋转的效果"></a>ヾ(๑╹◡╹)ﾉ” 演示3D旋转沿着不同轴旋转的效果</h5><blockquote><p>具体旋转的方向可以使用左手法则来判断：</p><ol><li>掏出你的左手，左手握拳，伸出大拇指</li><li>让大拇指的指向轴的正方向</li><li>此时四指弯曲的方向就是图片旋转的方向</li></ol></blockquote><p>当然，其实具体效果不用纠结，写出代码看效果调试即可！</p><h3 id="3d平移（translate）"><a href="#3d平移（translate）" class="headerlink" title="3d平移（translate）"></a>3d平移（translate）</h3><blockquote><p>translate属性如果沿着z轴平移也会有3D的效果</p></blockquote><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 沿着z轴的正方向移动100px */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateZ</span>(45<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><h4 id="3d移动的合写："><a href="#3d移动的合写：" class="headerlink" title="3d移动的合写："></a>3d移动的合写：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 如果需要同时设置三个轴方向的平移，可以写成 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(100<span class="selector-tag">px</span>) <span class="selector-tag">translateY</span>(100<span class="selector-tag">px</span>) <span class="selector-tag">translateZ</span>(100<span class="selector-tag">px</span>);</span><br><span class="line"><span class="comment">/* 也可以使用3d移动的简写方法 */</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate3d(x</span>,<span class="selector-tag">y</span>,<span class="selector-tag">z</span>);</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”-3D立方体效果"><a href="#ヾ-๑╹◡╹-ﾉ”-3D立方体效果" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 3D立方体效果"></a>ヾ(๑╹◡╹)ﾉ” 3D立方体效果</h5><p><strong>先是立方体的铺垫：</strong></p><blockquote><p>当一个元素rotateY(45deg)是什么效果？z轴指向哪里？</p><p>当一个元素rotateY(90deg)是什么效果？z轴指向哪里？</p></blockquote><ul><li>面朝向的方向就是z轴，旋转时，面朝的方向永远是z轴</li></ul><p>实现六个面的思路：</p><ol><li>先让这个面旋转到对应的方向</li><li>往z轴（面朝向）平移到对应的距离即可</li></ol><h5 id="————————-2"><a href="#————————-2" class="headerlink" title="————————"></a>————————</h5><p><strong>整体思路：</strong></p><blockquote><p>整体是一个ul，每一个面是li标签，然后让每一个面沿着不同方向旋转之后移动，组合成立方体</p><p>按照下方思路图一步步完成</p></blockquote><p><img src="/images/立方体思路2.gif" alt="3d正方体思路"></p><h3 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h3><blockquote><p>其实perspective是一个伪3D：说白了只是多个一个近大远小的效果而已，但是本质上来说还是一个平面元素</p><p>如果需要真正实现3D空间的转换，需要通过transform-style来实现</p></blockquote><p><strong>演示：</strong> ul里面两个li100*400，让第二个li标签沿着x轴旋转45deg，此时旋转ul盒子看的效果</p><p><strong>默认效果：</strong></p><blockquote><p>默认效果来说发现li标签变短了，看不出3d效果</p></blockquote><p><img src="/images/默认.gif" alt="默认"></p><p><strong>设置perspective：1000px之后：</strong></p><blockquote><p>设置视距之后只是有了近大远小的视觉效果，但是实际旋转看发现还是一个纸片人，不是真的3d元素</p></blockquote><p><img src="/images/perspective.gif" alt="perspective"></p><p><strong>设置<code>transform-style: preserve-3d;</code> 之后：</strong></p><blockquote><p>设置了<code>transform-style: preserve-3d;</code> 元素变成3d元素，是真的3d元素</p></blockquote><p><img src="/images/preserve-3d.gif" alt="preserve-3d"></p><p><strong>代码：</strong> <code>transform-style:preserve-3d;</code></p><p><strong>取值：</strong></p><ul><li>flat：子元素在2d平面中显示（默认值）</li><li>preserve-3d：子元素在3D空间中显示</li></ul><p><strong>注意点：</strong></p><ul><li>transform-style属性同样也是给父元素添加的！！</li></ul><p><strong>transform-style与perspective的区别：</strong></p><ul><li>perspective仅仅只是在平面中模拟出近大远小的效果，并不是真正的3D元素。</li><li>transform-style可以让其子元素在一个3D空间中布局，是真正的3D元素</li><li>以后真正需要完成真正的3D元素需要使用transform-style属性。如果需要有近大远小的视觉效果，可以加上perspective属性。</li></ul><h5 id="————————-3"><a href="#————————-3" class="headerlink" title="————————"></a>————————</h5><h5 id="ヾ-๑╹◡╹-ﾉ”-作业：3D导航效果"><a href="#ヾ-๑╹◡╹-ﾉ”-作业：3D导航效果" class="headerlink" title="ヾ(๑╹◡╹)ﾉ” 作业：3D导航效果"></a>ヾ(๑╹◡╹)ﾉ” 作业：3D导航效果</h5><p><img src="/images/3d导航.gif" alt="3d导航"></p><p><strong>思路：</strong> </p><ul><li>整体是ul，每个导航是1（100*50），li有两个面，使用a标签表示</li><li>通过定位先让两个a重叠，然后通过转换改变a标签面的位置<ul><li><code>web前端</code>首先需要沿着x轴旋转90deg，然后沿着z轴直走高度的一半（25）</li><li><code>传智播客</code> 直接沿着z轴直走高度的一半（25）</li></ul></li></ul><p><img src="/images/3d导航思路.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《部分案例代码下载》&quot;&gt;&lt;a href=&quot;#《部分案例代码下载》&quot; class=&quot;headerlink&quot; title=&quot;《部分案例代码下载》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/download/移动webday01部分案例代码.zip&quot;&gt;《部分案例代码下载》&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="移动web" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
  </entry>
  
  <entry>
    <title>二倍图对比</title>
    <link href="http://yoursite.com/2020/02/06/4-%E4%BA%8C%E5%80%8D%E5%9B%BE%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2020/02/06/4-二倍图对比/</id>
    <published>2020-02-06T02:00:01.000Z</published>
    <updated>2020-03-11T09:09:05.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二倍图对比"><a href="#二倍图对比" class="headerlink" title="二倍图对比"></a>二倍图对比</h1><p>  </p><h1>一倍图</h1><br>  <img src="/images/100.jpg" width="100px" alt="" border="1"><br>  <h1>二倍图</h1><br>  <img src="/images/200.jpg" width="100px" alt="" border="1 "><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二倍图对比&quot;&gt;&lt;a href=&quot;#二倍图对比&quot; class=&quot;headerlink&quot; title=&quot;二倍图对比&quot;&gt;&lt;/a&gt;二倍图对比&lt;/h1&gt;&lt;p&gt;  &lt;/p&gt;&lt;h1&gt;一倍图&lt;/h1&gt;&lt;br&gt;  &lt;img src=&quot;/images/100.jpg&quot; width=&quot;
      
    
    </summary>
    
    
      <category term="课堂测试demo" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E6%B5%8B%E8%AF%95demo/"/>
    
  </entry>
  
  <entry>
    <title>基础班PS的基本操作</title>
    <link href="http://yoursite.com/2019/02/20/1-PS%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/02/20/1-PS的基本操作/</id>
    <published>2019-02-20T02:15:00.000Z</published>
    <updated>2020-03-11T06:42:36.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ps的基本操作"><a href="#ps的基本操作" class="headerlink" title="ps的基本操作"></a>ps的基本操作</h2><blockquote><p>作为前端工程师来说，对于PS的使用要求是：</p><ul><li>会量尺寸</li><li>会量颜色</li></ul><p>前端的重点在代码的编写，按照设计图完成一个页面。</p></blockquote><h3 id="首选项设置"><a href="#首选项设置" class="headerlink" title="首选项设置"></a>首选项设置</h3><blockquote><p>在使用PS之前，需要先把首选项设置好</p></blockquote><p><strong>步骤：</strong></p><ol><li><code>ctrl+k</code> 打开首选项</li><li>选择<code>单位与标尺</code></li><li>将单位都设置为<code>像素</code></li></ol><p><img src="\images\css2.png" alt="css2"></p><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><blockquote><p>使用PS操作图片的第一步：打开图片</p></blockquote><ul><li>直接把图片拖拽进PS即可</li><li>或者点击左上角 <code>文件</code> → <code>打开</code> →选择对应文件即可</li></ul><h3 id="放大图片"><a href="#放大图片" class="headerlink" title="放大图片"></a>放大图片</h3><blockquote><p>有时候需要把图片放大方便量取</p></blockquote><ul><li>点击左侧工具栏中的<strong>缩放工具（Z）</strong><img src="\images\css3.png" alt="css3"></li><li><strong>使用快捷键</strong><ul><li>放大：<code>ctrl +</code></li><li>缩小：<code>ctrl -</code></li></ul></li></ul><h3 id="拖动图片"><a href="#拖动图片" class="headerlink" title="拖动图片"></a>拖动图片</h3><blockquote><p>有时候放大之后需要拖动图片查看其它部分</p></blockquote><ul><li>选择左侧工具栏中的<strong>抓手工具（H）</strong><img src="\images\css4-1550476689994.png" alt="css4"></li><li><strong>使用快捷键</strong><ul><li>按住空格不放手，然后鼠标左键按下拖动即可</li></ul></li></ul><h3 id="量颜色"><a href="#量颜色" class="headerlink" title="量颜色"></a>量颜色</h3><blockquote><p>前端必会的PS操作之一：量颜色</p></blockquote><ol><li>选择左侧工具栏的<strong>吸管工具（I）</strong></li></ol><p><img src="\images\xi.png" alt="xi"></p><ol start="2"><li><p>此时光标变成可以吸管，在需要量颜色的地方点击一下</p><p><img src="\images\css6.png" alt="css6"></p></li><li><p>点击之后，鼠标右击，选择 <code>拷贝颜色的十六进制代码</code> ，最后在代码中 <code>ctrl + v</code> 即可</p></li></ol><h3 id="量尺寸"><a href="#量尺寸" class="headerlink" title="量尺寸"></a>量尺寸</h3><blockquote><p>前端必会的PS操作之一：量尺寸</p></blockquote><ol><li><p>选择左侧工具栏的<strong>切片工具（C）</strong></p><blockquote><p>注意：默认显示的效果可能是剪裁工具，需要有以下操作</p></blockquote><p><img src="\images\tools.png" alt="tools"></p></li><li><p>把需要量取的部分切片出来</p><p><img src="\images\ps1.png" alt="ps1"></p></li><li><p>双击切好的切片，查看量取的尺寸即可</p><p><img src="\images\ps2.png" alt="ps2"></p></li></ol><h3 id="切图操作"><a href="#切图操作" class="headerlink" title="切图操作"></a>切图操作</h3><blockquote><p>一般工作中图片都是UI设计好的，但是如果公司不够大，UI妹子人手不够忙不过来，可能需要自己切图</p></blockquote><ol><li><p>选择切片：使用切片工具把图片切成切片</p><p><img src="\images\ps1.png" alt="ps1"></p></li><li><p>导出切片：按下 <code>ctrl + shift + alt + s</code>  （三键 + s）</p></li><li><p>在弹出窗口设置保存图片格式，点击储存</p><p><img src="\images\ps3.png" alt="ps3"></p></li><li><p>选择 <code>切片</code> → <code>选中的切片</code></p><p><img src="\images\切片保存1.png" alt=""></p></li><li><p>选择 <code>设置</code> → <code>其他</code> →<code>将图片放进文件夹</code> 前面的勾去掉</p><p><img src="\images\切片保存2.png" alt=""></p><p><img src="\images\切片保存3.png" alt=""></p></li><li><p>最后点击确定，点击保存即可</p></li></ol><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="导出有透明的图片（了解）"><a href="#导出有透明的图片（了解）" class="headerlink" title="导出有透明的图片（了解）"></a>导出有透明的图片（了解）</h3><blockquote><p>导出有透明的图片，需要保证图片是PSD格式的图片，并且UI有设置对应的透明图片</p><p>PSD图片：是由多张透明的图片重叠出来的，一张完整的PSD图片是由很多只图层构成的</p></blockquote><p><strong>步骤：</strong></p><ol><li><p>把PSD格式图片拖入PS中 </p></li><li><p>选择<strong>移动工具（V）</strong> <img src="\images\PS4.png" alt="PS4"> 按住 <code>ctrl</code> 点击需要导出的透明图片（有颜色的部分）</p></li><li><p>在图层面板中找到<strong>高亮的部分</strong>，右击选择<code>转换智能对象</code></p><p><img src="\images\ps5.png" alt="ps5"></p></li><li><p><strong>双击</strong>转换后图层前方的小图标，点击确定</p><p><img src="\images\ps6.png" alt="ps6"></p></li><li><p>此时透明的图片已经选取好了，再按下 <code>ctrl + shift + alt + s</code>  （三键 + s）<strong>直接保存</strong>即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ps的基本操作&quot;&gt;&lt;a href=&quot;#ps的基本操作&quot; class=&quot;headerlink&quot; title=&quot;ps的基本操作&quot;&gt;&lt;/a&gt;ps的基本操作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;作为前端工程师来说，对于PS的使用要求是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会量
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基础班day14笔记</title>
    <link href="http://yoursite.com/2019/02/20/1-%E5%9F%BA%E7%A1%80%E7%8F%ADday14%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/20/1-基础班day14笔记/</id>
    <published>2019-02-20T02:14:00.000Z</published>
    <updated>2019-03-02T05:17:17.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3相关属性拓展（了解）"><a href="#CSS3相关属性拓展（了解）" class="headerlink" title="CSS3相关属性拓展（了解）"></a>CSS3相关属性拓展（了解）</h2><blockquote><p>css这个语言是随着时间的推进，有不同的版本迭代更新的，而css3是对css2的一些效果的完善和拓充，新增了很多新功能。但是值得注意的是css3因为的新版本，一些老版本（低版本的浏览器是不支持的！！）这样就存在一些兼容性问题。</p></blockquote><p><strong>遇到问题可以查阅相关的CSS手册</strong> </p><h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><blockquote><p>通过标签的结构关系找到对应的元素</p><p>如果现在想找到ul标签下面的第几个li标签的时候，除了使用class大法之外，还可以使用结构伪类选择器完成效果</p></blockquote><p><strong>如果要找第一个li标签呢？</strong></p><ul><li><p><strong>E:first-child</strong> ：选择其父元素的第一个子元素</p><blockquote><p>还会判断是否是E元素，是才设置样式。（既是E标签，又是父元素的第一个子元素）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如：li：first-child &#123;css样式&#125;</span><br><span class="line">查找过程如下：</span><br><span class="line">1、首先找到li </span><br><span class="line">2、找li标签的父元素</span><br><span class="line">3、找父元素第一个子元素</span><br><span class="line">4、看这个子元素是不是li</span><br><span class="line">1、是-》加样式</span><br><span class="line">2、不是-》不加样式</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>如果要找最后一个li标签呢？</strong></p><ul><li><p><strong>E:last-child</strong> ：选择其父元素的最后一个子元素</p><blockquote><p>还会判断是否是E元素，是才设置样式。（既是E标签，又是父元素的最后一个子元素）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如：li：last-child &#123;css样式&#125;</span><br><span class="line">查找过程如下：</span><br><span class="line">1、首先找到li </span><br><span class="line">2、找li标签的父元素</span><br><span class="line">3、找父元素最后一个子元素</span><br><span class="line">4、看这个子元素是不是li</span><br><span class="line">1、是-》加样式</span><br><span class="line">2、不是-》不加样式</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>如果要找第12个li标签呢？</strong></p><ul><li><p><strong>E:nth-child(n)</strong> ： 选择其父元素的第n个子元素</p><blockquote><p>还会判断是否是E元素，是才设置样式（既是E元素，又是父元素的第n个子元素）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如：li：nth-child(n) &#123;css样式&#125;</span><br><span class="line">查找过程如下：</span><br><span class="line">1、首先找到li </span><br><span class="line">2、找li标签的父元素</span><br><span class="line">3、找父元素第n个子元素</span><br><span class="line">4、看这个子元素是不是li</span><br><span class="line">1、是-》加样式</span><br><span class="line">2、不是-》不加样式</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>针对于nth-child括号中可以写一个带n的式子，n的取值范围是<strong>0~正无穷的整数</strong></p><ul><li>找到所有的<strong>偶数</strong>：<code>2n/even</code></li><li>找到所有的<strong>奇数</strong>：<code>2n-1 / 2n+1 /odd</code></li><li>找到<strong>前12个</strong>：<code>-n+12</code></li><li>……(更多新奇的玩法等待你的发现)</li></ul></li></ul><hr><p><strong>如果要找倒数第12个li标签呢？</strong></p><ul><li><p><strong>E:nth-last-child(n)</strong>：选择其父元素的<strong>倒数</strong>第n个子元素</p><blockquote><p>判断是否是E元素。（既是E元素，又是父元素的<strong>倒数</strong>第n个子元素）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如：li：nth-last-child(n) &#123;css样式&#125;</span><br><span class="line">查找过程如下：</span><br><span class="line">1、首先找到li </span><br><span class="line">2、找li标签的父元素</span><br><span class="line">3、找父元素倒数第n个子元素</span><br><span class="line">4、看这个子元素是不是li</span><br><span class="line">1、是-》加样式</span><br><span class="line">2、不是-》不加样式</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>如果列表中混入了奸细，怎么才能找到第一个li标签呢？</strong></p><ul><li><p><strong>E:nth-of-type(n)</strong>：选择其父元素的第n个E元素</p><blockquote><p>选择的是子元素中的第n个E元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如：li：nth-of-type(n) &#123;css样式&#125;</span><br><span class="line">查找过程如下：</span><br><span class="line">1、首先找到li </span><br><span class="line">2、找li标签的父元素</span><br><span class="line">3、找父元素的第n个E元素</span><br></pre></td></tr></table></figure></li></ul><h2 id="盒子阴影-边框阴影（box-shadow）"><a href="#盒子阴影-边框阴影（box-shadow）" class="headerlink" title="盒子阴影/边框阴影（box-shadow）"></a>盒子阴影/边框阴影（box-shadow）</h2><blockquote><p>类似于京东网页上，有盒子阴影的效果，同样可以通过CSS3中的box-shadow完成</p></blockquote><p><strong>代码：</strong> <code>box-shadow: 10px 10px 10px #aaa;</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">h-shadow</td><td style="text-align:center">必需。水平阴影的位置。允许负值。</td></tr><tr><td style="text-align:center">v-shadow</td><td style="text-align:center">必需。垂直阴影的位置。允许负值。</td></tr><tr><td style="text-align:center">blur</td><td style="text-align:center">可选。模糊距离。</td></tr><tr><td style="text-align:center">spread</td><td style="text-align:center">可选。阴影的尺寸。</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">可选。阴影的颜色。</td></tr><tr><td style="text-align:center">inset</td><td style="text-align:center">可选。将外部阴影 (outset) 改为内部阴影。</td></tr></tbody></table><p><strong>注意点：</strong></p><ul><li>前两个属性是必须写的。其余的可以省略。</li><li>默认阴影是外部阴影，但是不能设置outset这个属性值。如果想要内部阴影，请设置inset </li></ul><h2 id="文字阴影（text-shadow）"><a href="#文字阴影（text-shadow）" class="headerlink" title="文字阴影（text-shadow）"></a>文字阴影（text-shadow）</h2><blockquote><p>在CSS3中除了可以给盒子设置阴影效果之外，还可以给文字设置阴影效果</p></blockquote><p><strong>代码：</strong> <code>text-shadow: 5px 5px 10px #000;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>:水平位置 垂直位置 模糊距离 阴影颜色;</span><br></pre></td></tr></table></figure><p><strong>取值：</strong></p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">h-shadow</td><td style="text-align:center">必需。水平阴影的位置。允许负值。</td></tr><tr><td style="text-align:center">v-shadow</td><td style="text-align:center">必需。垂直阴影的位置。允许负值。</td></tr><tr><td style="text-align:center">blur</td><td style="text-align:center">可选。模糊的距离。</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">可选。阴影的颜色。</td></tr></tbody></table><p><strong>有趣的案例：</strong></p><blockquote><p>可以给一个文字设置多个阴影效果，中间使用逗号 “,” 进行连接。</p></blockquote><p><img src="\images\aotu.png" alt="aotu"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*凸出来文字*/</span></span><br><span class="line"><span class="selector-tag">text-shadow</span>: 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#000</span>,<span class="selector-tag">-1px</span> <span class="selector-tag">-1px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#fff</span>;</span><br><span class="line"><span class="comment">/*凹进去文字*/</span></span><br><span class="line"><span class="selector-tag">text-shadow</span>: <span class="selector-tag">-1px</span> <span class="selector-tag">-1px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#000</span>,1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#fff</span>;</span><br><span class="line"><span class="comment">/* 背景颜色和文字颜色为#666即可 */</span></span><br></pre></td></tr></table></figure><h2 id="背景图片大小（background-size）"><a href="#背景图片大小（background-size）" class="headerlink" title="背景图片大小（background-size）"></a>背景图片大小（background-size）</h2><blockquote><p>有时候可以设置背景图片的大小</p></blockquote><p><strong>取值（分别设置的是宽度和高度）：</strong></p><ul><li><p>数字+px</p></li><li><p>百分比（相对于盒子的宽高百分比）</p></li><li><p>关键字</p><p><strong>默认尺寸：</strong></p><p><img src="\images\1.1.png" alt="1.1"></p><ul><li><ul><li><p><strong>contain</strong>：将背景图片等比例缩放，直到<strong>不会超出盒子</strong>的最大</p><blockquote><p>直到宽度或者高度中<strong>有一个和盒子相等</strong>，并且背景图片<strong>没有溢出部分</strong>即止。</p></blockquote><p><img src="\images\1.3.png" alt="1.3"></p></li></ul></li></ul></li></ul><ul><li><p><strong>cover</strong>：将背景图片等比例缩放，直到<strong>填满整个盒子</strong>没有空白</p><blockquote><p>直到宽度或者高度中<strong>有一个和盒子相等</strong>，并且<strong>背景图片填充满盒子</strong>如果有溢出部分则被隐藏</p></blockquote><p><img src="\images\1.2-1550336266662.png" alt="1.2"></p></li></ul><p><strong>注意点：</strong></p><ul><li><p>在设置<code>background-size</code> 和<code>background</code>连写的时候注意覆盖问题</p><ul><li><p>要么单独写的写在连写的下面</p></li><li><p>要么单独写的写在连写的里面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 连写完整版中，也有background-size属性，注意连写的覆盖问题 */</span></span><br><span class="line">background：color image repeat attachment position / size</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h2><blockquote><p>给一个元素设置 <strong>background-image</strong> 属性时，不仅可以通过url指定一张图片，还可以通过线性渐变(linear-gradient)或者径向渐变(radial-gradient)设置一张颜色渐变的背景图。</p></blockquote><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><blockquote><p>沿着一个方向颜色进行线性渐变</p></blockquote><p><strong>代码：</strong><code>background-image: linear-gradient(green,yellow);</code> <strong>（默认从上往下渐变）</strong></p><p><img src="\images\2.9.png" alt="2.9"></p><p><strong>取值：</strong></p><ul><li><p><strong>第一个值</strong>：可以是<strong>方向</strong>或者<strong>角度</strong>（<strong>可以省略</strong>）</p><ul><li><p><strong>方向</strong></p><ul><li><p><strong>to top</strong>：  渐变从下到上。相当于: <strong>0deg</strong> </p><p><code>background-image: linear-gradient(to top,green,yellow);</code></p><p><img src="\images\2.1-1550376839085.png" alt="2.1"></p></li><li><p><strong>to right</strong>：  渐变从左到右。相当于: <strong>90deg</strong> </p><p><code>background-image: linear-gradient(to right,green,yellow);</code></p><p><img src="\images\2.2.png" alt="2.2"></p></li><li><p><strong>to bottom</strong>：  渐变从上到下。相当于: <strong>180deg</strong>（<strong>默认值</strong>）</p><p><code>background-image: linear-gradient(to bottom,green,yellow);</code></p><p><img src="\images\2.3.png" alt="2.3"></p></li><li><p><strong>to left</strong>：  渐变为从右到左。相当于: <strong>270deg</strong> </p><p><code>background-image: linear-gradient(to left,green,yellow);</code></p><p><img src="\images\2.4.png" alt="2.4"></p></li></ul></li><li><p><strong>角度（效果对比上图）</strong></p><ul><li><strong>0deg</strong>：渐变从下往上</li><li><strong>90deg</strong>：渐变从左往右</li><li><strong>180deg</strong>：渐变从上往下（默认值）</li><li><strong>270deg</strong>：渐变从右往左</li></ul></li></ul></li></ul><ul><li><p><strong>第二个值</strong>：渐变的<strong>起止颜色</strong>（<strong>可以写两个或者多个</strong>）</p><p><code>background-image: linear-gradient(to right,red,green,blue);</code></p><p>第一个是开始颜色，在最左端是纯红色</p><p>中间是绿色，所以最中间是纯绿色</p><p>最后一个是结束颜色，在最右端是纯蓝色</p><p>（之后每对颜色之间就是渐变）</p><p><img src="\images\2.5.png" alt="2.5"></p></li></ul><p>  纯颜色的点默认是<strong>等分线段</strong>的。</p><p>  <img src="\images\线性渐变.png" alt="线性渐变"></p><blockquote><p>如果不想默认等分线段，想手动设置纯颜色的位置怎么做呢？</p></blockquote><p>  可以在颜色的后面加上<strong>对应的长度</strong>（类似于线段的坐标）</p><ul><li><p>可以在颜色的后面写上对应的长度</p><ul><li><p>具体的数值</p><blockquote><p>开始是第一个颜色，结束时最后一个颜色</p><p>然后把纯色放到对应的坐标上，再渐变即可</p></blockquote><p><code>background-image: linear-gradient(to right,red 100px,green 200px,blue 300px);</code></p><p><img src="\images\2.6.png" alt="2.6"></p><p><img src="\images\线性渐变2.png" alt="线性渐变2"></p></li><li><p>百分比（原理同上）</p></li></ul></li></ul><p><strong>拓展（了解）</strong>：</p><blockquote><p>如果要求是几个纯色块呢？</p></blockquote><p><img src="\images\2.8.png" alt="2.8"></p><p>其实，可以分析：</p><ul><li>开始是红色</li><li>结束时蓝色</li><li>中间一半的地方红色和蓝色（50%，先红色，在蓝色）</li></ul><p><code>background-image: linear-gradient(to right,red 50%,blue 50%);</code></p><blockquote><p>那如果是多个色块会不会呢？</p></blockquote><p><img src="\images\2.7-1550380975824.png" alt="2.7"></p><p><code>background-image: linear-gradient(to right,red 25%,blue 25%,blue 50%,red 50%,red 75%,blue 75%);</code></p><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><blockquote><p>由中心向四周渐变（圆或者椭圆的效果）</p></blockquote><p><strong>代码：</strong> <code>background-image: radial-gradient(green,yellow);</code> （<strong>默认从中点向四周渐变</strong>）</p><p><img src="\images\3.1.png" alt="3.1"></p><p><strong>取值：</strong></p><ul><li><p><strong>第一个值</strong>：可以是<strong>形状</strong>或者<strong>半径</strong>（<strong>可以省略</strong>）</p><ul><li><p><strong>形状</strong>：</p><ul><li><p><strong>circle</strong>：圆形</p><p><code>background-image: radial-gradient(circle,yellow,blue);</code></p><p><img src="\images\3.2.png" alt="3.2"></p></li><li><p><strong>ellipse</strong>：椭圆（默认值，要求盒子是一个矩形才会有效果，正方形时是圆形的效果）</p><p><code>background-image: radial-gradient(ellipse,yellow,blue);</code></p><p><img src="\images\3.3.png" alt="3.3"></p></li></ul></li><li><p><strong>半径</strong></p><blockquote><p>指的是渐变范围的半径</p></blockquote><ul><li><p>设置两个相同的半径是一个正圆</p><p><code>background-image: radial-gradient(100px 100px,yellow,blue);</code></p><p><img src="\images\3.4.png" alt="3.4"></p></li><li><p>设置两个不同半径是一个椭圆</p><p><code>background-image: radial-gradient(300px 100px,yellow,blue);</code></p><p><img src="\images\3.5.png" alt="3.5"></p></li></ul></li><li><p><strong>圆形的位置</strong></p><blockquote><p>默认渐变的圆心在盒子的中点上，如果想改变圆心的位置怎么做呢？</p></blockquote><p><strong>代码：</strong> <code>background-image: radial-gradient(100px 100px at 100px 100px,yellow,blue);</code> </p><p>设置圆心的位置：<code>at 100px 100px</code> 指的是盒子的坐标点</p><p><img src="\images\3.6.png" alt="3.6"></p></li></ul></li><li><p><strong>第二个值</strong>：渐变的<strong>起止颜色</strong>（<strong>可以写两个或者多个</strong>）</p><p>线性渐变一样的套路。</p></li><li><p><strong>拓展（了解）</strong>：</p><blockquote><p>可以完成一个立体小球的效果</p></blockquote><p><img src="\images\3.7.png" alt="3.7"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 立体球的效果 */</span></span><br><span class="line"><span class="comment">/*先变成一个圆*/</span></span><br><span class="line"><span class="selector-tag">border-radius</span>: 50%;</span><br><span class="line"><span class="comment">/*给球设置一个背景颜色*/</span></span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">pink</span>;</span><br><span class="line"><span class="comment">/*设置渐变的圆心，然后使用半透明的渐变效果*/</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">at</span> 100<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>,<span class="selector-tag">rgba</span>(0,0,0,0),<span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.8</span>));</span><br></pre></td></tr></table></figure></li></ul><h2 id="多背景写法"><a href="#多背景写法" class="headerlink" title="多背景写法"></a>多背景写法</h2><blockquote><p>在CSS3中，可以做到给一个盒子设置多个背景图片</p></blockquote><p>使用背景的连写形式，通过逗号分隔不同的背景图片即可。</p><p><strong>注意点：</strong></p><ul><li>一个元素可以设置多个背景图片</li><li>每组背景属性之间需要通过逗号隔开</li><li>如果多组背景图片之间存在层叠关系，则前面的会覆盖在后面的背景图上</li><li>如果需要设置背景颜色，则背景颜色需要设置到最后一组中。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>:  <span class="selector-tag">url</span>(1<span class="selector-class">.jpg</span>) <span class="selector-tag">no-repeat</span> <span class="selector-tag">left</span> <span class="selector-tag">top</span>,</span><br><span class="line"><span class="selector-tag">url</span>(2<span class="selector-class">.jpg</span>)  <span class="selector-tag">no-repeat</span> <span class="selector-tag">right</span> <span class="selector-tag">bottom</span>,</span><br><span class="line">url(3.gif) no-repeat center center/100px 100px;</span><br></pre></td></tr></table></figure><h2 id="元素本身透明（opacity）"><a href="#元素本身透明（opacity）" class="headerlink" title="元素本身透明（opacity）"></a>元素本身透明（opacity）</h2><blockquote><p>除了可以让背景颜色透明之外，还可以让元素整体（包括里面的内容）一起透明</p></blockquote><p><strong>代码：</strong> <code>opacity:0</code> </p><p><strong>取值：</strong> 0~1之间的一位小数</p><p><strong>注意点：</strong></p><ul><li>opacity会让元素整体透明，包括里面的内容（文字或者子元素）</li><li>背景透明仅仅只是让背景颜色变得透明，要根据需求选取方法。</li></ul><h2 id="通过phpstudy把静态页面部署到web服务器"><a href="#通过phpstudy把静态页面部署到web服务器" class="headerlink" title="通过phpstudy把静态页面部署到web服务器"></a>通过phpstudy把静态页面部署到web服务器</h2><ol><li><p>安装phpstudy，注意不能有中文路径</p><ul><li><p>双击软件</p></li><li><p>选择安装目录（注意，要求路径中不能有中文！！！默认的路径即可）</p><p><img src="\images\php1.png" alt="php1"></p></li><li><p>点击ok之后，会默认跳转到phpstudy官网上，然后提示<code>为了防止重复初始化，选择是</code> 点击是即可！</p><p><img src="\images\php2.png" alt="php2"></p></li><li><p>然后可以访问自己本地的服务器，在地址栏中输入<code>127.0.0.1</code> 访问</p></li></ul></li><li><p>把自己的网页放到www文件夹中，找到安装目录下面的www文件夹，把自己写好的页面放到这个文件夹中去</p></li><li><p>通过查看自己的ip，通过浏览器输入ip地址访问自己写的网页</p><p>win+r 输入cmd，往黑窗口中输入ipconfig，回车，以太网适配器查看192.168开头</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS3相关属性拓展（了解）&quot;&gt;&lt;a href=&quot;#CSS3相关属性拓展（了解）&quot; class=&quot;headerlink&quot; title=&quot;CSS3相关属性拓展（了解）&quot;&gt;&lt;/a&gt;CSS3相关属性拓展（了解）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;css这个语言是随
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基础班day13笔记</title>
    <link href="http://yoursite.com/2019/02/20/1-%E5%9F%BA%E7%A1%80%E7%8F%ADday13%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/20/1-基础班day13笔记/</id>
    <published>2019-02-20T02:13:00.000Z</published>
    <updated>2019-03-02T05:13:34.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够完成品优购首页推荐模块</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成品优购首页焦点图模块</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成品优购首页楼层模块</li></ul></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="使用css写出一个三角形"><a href="#使用css写出一个三角形" class="headerlink" title="使用css写出一个三角形"></a>使用css写出一个三角形</h2><blockquote><p>有时候需要在页面中展示一个三角形，并且要求只使用css代码，不用图片或者字体图标，怎么实现？</p></blockquote><p><strong>例如：</strong></p><p><img src="\images\jd.png" alt="jd"></p><p><strong>可以通过边框来实现：</strong></p><ul><li>设置一个盒子</li><li>设置四周不同颜色的边框</li><li>盒子的宽高设置为0</li></ul><p><img src="\images\css三角形.png" alt=""></p><ul><li>此时每一个方向的边框就是一个三角形了，选择一个之后让其他边框的颜色为<strong>全透明</strong>即可</li></ul><h3 id="背景透明"><a href="#背景透明" class="headerlink" title="背景透明"></a>背景透明</h3><blockquote><p>设置透明的方法</p></blockquote><ul><li><strong>rgba（0,0,0,0）</strong></li><li><strong>transparent</strong>：表示全透明的颜色</li></ul><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ------------------------------------方法一------------------------------------ */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid purple;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* -----------------------------------方法二--------------------------------------- */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent transparent purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三种鼠标常见的样式"><a href="#三种鼠标常见的样式" class="headerlink" title="三种鼠标常见的样式"></a>三种鼠标常见的样式</h2><blockquote><p>通过cursor属性来设置鼠标移入盒子中的样式</p></blockquote><p>取值：</p><ul><li><strong>default</strong> ：光标为一个箭头（默认样式） </li><li><strong>pointer</strong> ：光标为一只小手（a标签的默认样式）</li><li><strong>text</strong> ：此光标指示文本 </li><li><strong>move</strong>：显示十字光标（表示可移动的效果）</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="相邻兄弟选择器（知道即可）"><a href="#相邻兄弟选择器（知道即可）" class="headerlink" title="相邻兄弟选择器（知道即可）"></a>相邻兄弟选择器（知道即可）</h3><blockquote><p>用的不多</p></blockquote><h3 id="相邻选择器（-）"><a href="#相邻选择器（-）" class="headerlink" title="相邻选择器（+）"></a>相邻选择器（+）</h3><blockquote><p>选择<strong>某个元素后面紧贴着的的第一个兄弟元素</strong>（ <strong>只找一个</strong>）</p></blockquote><p><strong>例子：</strong>如何通过.son1找到.son2呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过相邻选择器找到：</p><p><code>.son+div {}</code></p><p>注意点：</p><ul><li>相邻兄弟选择只会选择相邻的那个元素，本身元素不会选中。</li></ul><h3 id="兄弟选择器（-）"><a href="#兄弟选择器（-）" class="headerlink" title="兄弟选择器（~）"></a>兄弟选择器（~）</h3><blockquote><p>选择<strong>某个元素后面的所有兄弟元素</strong>（<strong>会找一堆</strong>）</p></blockquote><p><strong>例子：</strong>找到h1标签后面所有兄弟中的p标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>7<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过兄弟选择器找到：</p><p><code>h1~p {}</code></p><h3 id="属性选择器的一些匹配规则（知道即可）"><a href="#属性选择器的一些匹配规则（知道即可）" class="headerlink" title="属性选择器的一些匹配规则（知道即可）"></a>属性选择器的一些匹配规则（知道即可）</h3><blockquote><p>可以通过标签的属性选择标签</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">class</span>=<span class="string">"baidu"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>点击不跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.itcast.cn"</span> <span class="attr">class</span>=<span class="string">"itcast"</span>&gt;</span>传智播客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>E:[class]</strong></p><p>选择带有class属性的E元素。 </p><p>如：选中<strong>带有class属性</strong>的元素为红色</p></li><li><p><strong>E:[class=”attr”]</strong></p><p>选择带有class属性，并且属性值是attr的E元素</p><p>如：选中<strong>class属性值为baidu</strong>的元素为黄色</p></li><li><p><strong>E:[class^=”attr”]</strong></p><p>选择带有class属性，并且属性值是 <strong>以attr开头</strong> 的E元素</p><p>如：选中<strong>href属性值以http开头</strong>的元素为粉色</p></li><li><p><strong>E:[class$=”attr”]</strong></p><p>选择带有class属性，并且属性值是 <strong>以attr结尾</strong> 的E元素</p><p>如：选中<strong>href属性值以cn结尾</strong>的元素为橘色</p></li><li><p><strong>E:[class*=”attr”]</strong></p><p>选择带有class属性，并且属性值是 <strong>包含attr</strong> 的E元素</p><p>如：选中<strong>href属性值里包含www</strong>的元素为紫色</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;check
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基础班day12笔记</title>
    <link href="http://yoursite.com/2019/02/20/1-%E5%9F%BA%E7%A1%80%E7%8F%ADday12%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/20/1-基础班day12笔记/</id>
    <published>2019-02-20T02:12:00.000Z</published>
    <updated>2019-03-02T05:10:12.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够使用ps进行基本操作</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成项目基本目录搭建</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成品优购头部</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成品优购导航</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够设置盒子的边框圆角</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="CSS3边框圆角（border-radius）"><a href="#CSS3边框圆角（border-radius）" class="headerlink" title="CSS3边框圆角（border-radius）"></a>CSS3边框圆角（border-radius）</h2><blockquote><p>边框圆角： <code>border-radius</code> 可以让盒子的四角变得圆润，也可以画一个圆</p><p>border：边框</p><p>radius：半径</p></blockquote><p><img src="\images\css画一个圆.png" alt="css画一个圆"></p><p><strong>取值：</strong></p><ul><li>一个值：左上右上右下左下</li><li>两个值：左上右下、右上左下</li><li>三个值：左上、右上左下、右下</li><li>四个值：左上、右上、右下、左下</li></ul><p><strong>记忆方法：</strong> 先从左上开始赋值，顺时针赋值，如果没有赋值的，看对面的。</p><p><strong>常见的应用：</strong></p><ul><li><p><strong>画一个圆</strong></p><ul><li>盒子必须是一个正方形</li><li>border-radius：50%</li></ul></li><li><p><strong>胶囊按钮</strong></p><ul><li>盒子是一个矩形</li><li>border-radius：盒子高度的一半</li></ul></li></ul><p><img src="\images\jn.png" alt="jn"></p><h2 id="样式初始化的补充"><a href="#样式初始化的补充" class="headerlink" title="样式初始化的补充"></a>样式初始化的补充</h2><blockquote><p>有时候会需要去除input默认的边框和textarea的自由缩放</p></blockquote><p><strong>去除边框：</strong></p><ul><li>border：none</li></ul><p><strong>去除input点击之后的边框轮廓线：</strong></p><ul><li>outline-style: none</li></ul><p><strong>设置禁止textarea自由缩放：</strong></p><ul><li>resize：none</li></ul><h2 id="盒子宽高的百分比设置"><a href="#盒子宽高的百分比设置" class="headerlink" title="盒子宽高的百分比设置"></a>盒子宽高的百分比设置</h2><p><strong>需求：</strong></p><p>如果需要一个父盒子中的四个子盒子，宽度为父盒子的四分之一，高度为父盒子的高度，怎么去完成？</p><p><strong>方案：</strong></p><ul><li>可以直接设置数值（自己计算）</li><li>可以直接设置百分比（百分比相对于父盒子的宽高，让浏览器去计算）</li></ul><h2 id="品优购项目搭建"><a href="#品优购项目搭建" class="headerlink" title="品优购项目搭建"></a>品优购项目搭建</h2><blockquote><p>每一个项目开始之前都要有项目的搭建。</p><p>品优购作为一个<strong>有很多页面</strong>的<strong>大型的项目</strong>，每个页面都有自己对应的css文件，所以css文件需要单独放在一个<strong>css文件夹</strong>中</p></blockquote><p><strong>项目搭建步骤：</strong></p><ul><li><p>新建项目文件夹</p></li><li><p>新建images文件夹，把图片放在images文件夹中</p></li><li><p>新建css文件夹，把所有页面的css文件放入</p><blockquote><p>大型项目有多个页面，每个页面都有对应的css文件，为了项目的查阅方便，一般会把所有的css专门放在一个文件夹汇总</p></blockquote><ul><li>新建index.css放入文件夹</li></ul></li><li><p>新建页面index.html</p></li></ul><p><strong>样式的初始化：</strong></p><ul><li><p>index.css中进行样式的初始化（把项目中要用的样式先写好）</p><ul><li><p>因为样式的初始化每个项目都是一样的，所有公司开发的时候会把样式初始化代码写成一个单独的<strong>base.css</strong>文件，开发的时候直接引入即可</p><h5 id="ヾ-๑╹◡╹-ﾉ”查看公司写好的base-css的代码"><a href="#ヾ-๑╹◡╹-ﾉ”查看公司写好的base-css的代码" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”查看公司写好的base.css的代码"></a>ヾ(๑╹◡╹)ﾉ”查看公司写好的base.css的代码</h5><blockquote><p>问题：为什么要进行css初始化？请举例说明</p></blockquote><p><strong>为什么要进行css初始化？</strong></p><ol><li>因为不同浏览器对于不同标签有默认样式（比如默认padding和margin、a标签默认的下划线……）</li><li>开发的时候并不需要默认的样式。并且需要在不同浏览器中展示的效果是一样的</li><li>所以我们一般在项目开始的时候，会去除浏览器默认的样式即：css的初始化，需要的时候自己设置样式即可。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 举例说明 --&gt;</span></span><br><span class="line"></span><br><span class="line">1.清除标签的默认margin和padding：</span><br><span class="line">* &#123;</span><br><span class="line">    margin: 0; </span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.清除li标签之前的小点：</span><br><span class="line">ul&#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.清除a的下划线：</span><br><span class="line">a &#123;</span><br><span class="line">    text-decoration:none；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......（base.css中有一堆）</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在index.html中通过link标签引入index.css</p></li></ul><h2 id="页面ico图标的使用（了解）"><a href="#页面ico图标的使用（了解）" class="headerlink" title="页面ico图标的使用（了解）"></a>页面ico图标的使用（了解）</h2><blockquote><p>较大的网站的title前面会有一个小的图标，这个小图标一般使用的就是ico图标</p></blockquote><p><strong>使用步骤：</strong></p><ul><li><p>获取<code>ico图标</code></p><ul><li>一般是由UI设计师提供.ico图片</li><li>可以通过 <a href="http://www.bitbug.net/" target="_blank" rel="noopener">一些转换网站</a> 将图片上传，获取ico图标</li></ul></li><li><p>使用<code>ico图标</code></p><ul><li><code>&lt;link rel=&quot;icon&quot; href=&quot; favicon.ico的路径&quot;&gt;</code> </li></ul></li></ul><p><strong>一般将ico图标放到根目录下面</strong></p><h2 id="页面seo三大标签（了解）"><a href="#页面seo三大标签（了解）" class="headerlink" title="页面seo三大标签（了解）"></a>页面seo三大标签（了解）</h2><blockquote><p>页面中有三个标签对于seo非常重要！</p></blockquote><h3 id="title：标题标签"><a href="#title：标题标签" class="headerlink" title="title：标题标签"></a>title：标题标签</h3><blockquote><p>表示网页的标题，对于网页的seo权重很高！！</p></blockquote><p><img src="\images\title标签.png" alt=""></p><p><strong>一个大型的网页，也需要有对应的title标签的：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>38期品优购<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Description：描述标签"><a href="#Description：描述标签" class="headerlink" title="Description：描述标签"></a>Description：描述标签</h3><blockquote><p>是对于网页内容的描述，可以是对于标题的补充，一般文字不超过120个字。</p></blockquote><p><img src="\images\description标签.png" alt="description标签"></p><p><strong>一个大型的网页，也需要有对应的description标签的：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"品优购-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Keywords：关键字标签"><a href="#Keywords：关键字标签" class="headerlink" title="Keywords：关键字标签"></a>Keywords：关键字标签</h3><blockquote><p>是页面内容的关键字，对于seo也较为重要。</p></blockquote><p><img src="\images\Keywords标签.png" alt="Keywords标签"></p><p><strong>一个大型的网页，也需要有对应的Keywords标签的：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Keywords"</span> <span class="attr">content</span>=<span class="string">"网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,品优购"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;check
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基础班day11笔记</title>
    <link href="http://yoursite.com/2019/02/20/1-%E5%9F%BA%E7%A1%80%E7%8F%ADday11%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/20/1-基础班day11笔记/</id>
    <published>2019-02-20T02:11:00.000Z</published>
    <updated>2019-03-02T05:06:23.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够理解什么是精灵图及优点（将很多小图片放到一张图片上，减少对服务器请求次数，减轻服务器压力）</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够使用精灵图设置背景图片</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够使用字体图标</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成滑动门案例</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够写出常用的样式初始化</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够了解BFC的作用以及触发BFC的几种方式</li></ul></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="双伪元素清除浮动（了解）"><a href="#双伪元素清除浮动（了解）" class="headerlink" title="双伪元素清除浮动（了解）"></a>双伪元素清除浮动（了解）</h2><blockquote><p>伪元素清除浮动升级版（既解决了清除浮动、又解决了塌陷 ）</p><p>两个伪元素清除法的合并方法如下：</p></blockquote><p><strong>清除浮动：</strong></p><blockquote><p>可以使用单伪元素浮动法 <code>::after</code></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>margin的塌陷问题：</strong></p><blockquote><p>可以使用伪元素 <code>::before</code> 解决margin的塌陷问题</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/* 触发BFC + 并且转换成块级元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并起来：</strong></p><blockquote><p>使用并集选择器合并代码</p><p>此时.clearfix这个类既可以清除浮动，又可以解决margin的塌陷现象</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="comment">/* BFC + 转化为块级元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容 IE 67 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ヾ-๑╹◡╹-ﾉ”检查网页"><a href="#ヾ-๑╹◡╹-ﾉ”检查网页" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”检查网页"></a>ヾ(๑╹◡╹)ﾉ”检查网页</h5><blockquote><p>检查大网页的样式（<strong>小米、淘宝</strong>），一般用双伪元素</p></blockquote><p><strong>只需要把双伪元素清除法的代码在样式初始化的时候写好，使用的时候直接加类名即可</strong></p><h2 id="精灵图（会使用）"><a href="#精灵图（会使用）" class="headerlink" title="精灵图（会使用）"></a>精灵图（会使用）</h2><blockquote><p>实际开发中，会把很多小图片合并成一张大图片，这张大图片就是精灵图。</p></blockquote><p><strong>问题：</strong> 浏览器打开淘宝网，网页中的图片怎么显示到用户的电脑中的呢？</p><p> → 图片并不是用户电脑本地有的，而是通过服务器发送给用户，才在浏览器中显示的！！</p><h5 id="ヾ-๑╹◡╹-ﾉ”画图了解下前端与后端交互"><a href="#ヾ-๑╹◡╹-ﾉ”画图了解下前端与后端交互" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”画图了解下前端与后端交互"></a>ヾ(๑╹◡╹)ﾉ”画图了解下前端与后端交互</h5><p><strong>好处：</strong> </p><p>原本每张小图片要发送很多次，服务器亚历山大</p><p>但是如果使用精灵图，只需要发送一次即可。</p><p><strong>减少服务器的请求次数，减轻服务器的压力。</strong></p><h3 id="精灵图的使用（必会）"><a href="#精灵图的使用（必会）" class="headerlink" title="精灵图的使用（必会）"></a>精灵图的使用（必会）</h3><blockquote><p>如何在页面中显示出精灵图中的小图片呢？</p></blockquote><p><strong>步骤：</strong></p><ol><li>创建一个盒子</li><li>通过PS量取小图片的尺寸，将对应小图片的宽高直接设置给盒子</li><li>将精灵图设置为盒子的背景图片</li><li>将小图片的坐标取负值添加给<code>background-position：x y;</code><ul><li>让背景图片往上移动，y轴坐标是负数</li><li>让背景图片往左移动，x轴坐标是负数</li></ul></li></ol><p><strong>注意：</strong></p><ul><li>盒子和小图片大小一致</li><li>精灵图通过背景定位， 让所有的小图片都能显示</li><li>在ps中，通过切片，量取对应的坐标，直接取赋值（负数）即可</li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”拼出自己的名字"><a href="#ヾ-๑╹◡╹-ﾉ”拼出自己的名字" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”拼出自己的名字"></a>ヾ(๑╹◡╹)ﾉ”拼出自己的名字</h5><h2 id="字体图标（了解）"><a href="#字体图标（了解）" class="headerlink" title="字体图标（了解）"></a>字体图标（了解）</h2><blockquote><p>在网页的很多地方，比如下箭头、照相机图标、搜索图标… 使用的就是字体图标</p><p>字体图标本质上就是文字，所以可以通过css中文字相关的属性操作字体图标。</p></blockquote><p><strong>需求：</strong> </p><p>页面中有很多的图标（左右箭头、购物车、用户、等等），怎么完成页面的效果？？</p><p><strong>方案：</strong></p><ul><li><p>使用图片 → 可以。</p><p><strong>缺点：</strong>图片在放大的时候会失真（边缘模糊）</p></li><li><p>字体图标 → 可以。</p><p><strong>优点：</strong>放大不会失真，还可以设置css样式</p></li></ul><p><strong>总结：</strong></p><p>本质是文字，可以通过css文字相关样式设置字体图标的样式（颜色、大小、加粗），并且不会失真</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p><strong>下载字体图标（一般UI会给）：</strong></p><ol><li>登录<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">阿里 iconfont 字库</a>，将自己想要的图标加入购物车</li><li>点击购物车图标，选择<strong>下载代码</strong></li></ol><p><strong>使用字体图标步骤：</strong></p><ol><li><p>在项目目录新建 fonts 文件夹，将字体图标文件内所有文件拷贝进 fonts 文件夹</p></li><li><p>在项目中通过link标签引入字体css文件（<strong>iconfont.css</strong>）</p><blockquote><p>字体文件包中的 <strong>demo_fontclass.html</strong> 为说明书</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"fonts/iconfont.css"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过i标签上面设置对应类名来使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-refresh&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：</strong></p><ul><li>设置字体图标样式时，注意层叠性问题！！（通过iconfont类名找到i标签）</li><li>不能改变字体图标的font-family，否则样式不生效</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="滑动门（了解）"><a href="#滑动门（了解）" class="headerlink" title="滑动门（了解）"></a>滑动门（了解）</h3><blockquote><p>利用已学技术，根据文本内容，让背景自适应。可以实现一些特殊的效果（QQ聊天气泡）</p><p><a href="https://weixin.qq.com/" target="_blank" rel="noopener">微信滑动门</a></p></blockquote><p><img src="\images\%E6%BB%91%E5%8A%A8%E9%97%A8.jpg" alt=""></p><p><strong>滑动门步骤：</strong></p><ul><li>三个盒子要在一行中显示，都需要<strong>浮动起来</strong>。<ul><li>left：宽高和背景图片的大小一致</li><li>center：高度为背景图片的高度，宽度由内容撑开（浮动之后的元素宽度默认由内容撑开），<strong>背景平铺</strong></li><li>right：宽高和背景图片的大小一致</li></ul></li></ul><h3 id="浮动元素的覆盖问题（了解）"><a href="#浮动元素的覆盖问题（了解）" class="headerlink" title="浮动元素的覆盖问题（了解）"></a>浮动元素的覆盖问题（了解）</h3><blockquote><p>浮动：不能覆盖文字、图片和行内块，会把这些元素挤到一边去。</p><p>说白了，<strong>浮动元素一般只能覆盖标准流中的块级元素</strong></p></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”行内元素与浮动的特殊情况"><a href="#ヾ-๑╹◡╹-ﾉ”行内元素与浮动的特殊情况" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”行内元素与浮动的特殊情况"></a>ヾ(๑╹◡╹)ﾉ”行内元素与浮动的特殊情况</h5><ul><li>浮动的元素可以覆盖标准流中的块级元素</li><li>浮动的元素不能覆盖行内块元素</li><li>浮动元素不能覆盖行内元素</li><li>浮动的元素不能覆盖文字（图文环绕）</li></ul><h3 id="触发BFC的方法（了解）"><a href="#触发BFC的方法（了解）" class="headerlink" title="触发BFC的方法（了解）"></a>触发BFC的方法（了解）</h3><blockquote><p>BFC → <code>Block Formatting Context</code>：块级格式化上下文</p></blockquote><p><strong>知道BFC的作用：</strong></p><ul><li>触发父盒子的BFC → 可以<strong>解决margin的塌陷</strong></li><li>触发父盒子的BFC → 可以<strong>清除浮动</strong></li></ul><p><strong>方法：</strong></p><blockquote><p>可以通过测试是否能清除浮动</p></blockquote><p><strong>给父盒子设置：</strong></p><ul><li>float的值不为none</li><li>overflow的值不为visible。</li><li>display的值为table，table-cell，inline-block</li><li>position的值不为relative和static</li><li>等等……</li></ul><h3 id="小米练习"><a href="#小米练习" class="headerlink" title="小米练习"></a>小米练习</h3><blockquote><p>每个项目都是一个单独的文件夹，文件夹中放项目相关的资源（图片、inde.html、index.css等等）</p></blockquote><p><strong>步骤：</strong></p><ul><li>新建项目文件夹</li><li>新建images文件夹，把图片放在images文件夹中</li><li>新建页面index.html</li><li>新建css文件index.css</li><li>index.css中进行样式的初始化（可以把初始化CSS文件引入）</li><li>在index.html中通过link标签引入index.css</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;check
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基础班day10笔记</title>
    <link href="http://yoursite.com/2019/02/20/1-%E5%9F%BA%E7%A1%80%E7%8F%ADday10%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/20/1-基础班day10笔记/</id>
    <published>2019-02-20T02:10:00.000Z</published>
    <updated>2019-03-02T05:00:57.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><blockquote><ul><li style="list-style: none"><input type="checkbox"> 理解定位的使用场景（一般用于解决盒子之间的层叠问题）</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够说出相对定位的特点<ul><li>相对于自己原来的位置进行移动</li><li>占位置-》没有脱标</li></ul></li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够说出绝对定位的特点<ul><li>默认相对于浏览器移动，如果有父元素，相对于有定位的父元素移动</li><li>不占位置-》脱标</li></ul></li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够说出固定定位的特点<ul><li>永远相对于浏览器移动</li><li>不占位置-》脱标</li></ul></li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够理解子绝父相（子盒子绝对定位，父盒子相对定位，布局中会经常使用到）</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够实现z-index控制元素的层级（数值越大，层级越高）</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够说出vertical-align属性的使用（一般用于设置文本与行内块元素（图片）的垂直对齐方式）</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够说出三种隐藏元素的区别（<strong>内容</strong>超出隐藏、元素隐藏（<strong>看不见</strong>）、元素隐藏（<strong>不存在</strong>））</li></ul><p> 。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><blockquote><p>可以解决盒子与盒子之间的层叠问题</p></blockquote><p><strong>需求：</strong>现在在页面上有两个盒子，其中第二个盒子将第一个盒子压住了一半，怎么完成？？？</p><p><img src="\images\1.png" alt="1"></p><p><strong>解决方案：</strong></p><ul><li><p><strong>使用margin的单方向应用</strong></p><blockquote><p>但是实际开发中并不会使用marign完成层叠的效果</p></blockquote></li><li><p>使用 <strong>定位</strong> 来完成效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="comment">/*定位：position*/</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/*定位需要配合方位属性一起使用的！！*/</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="定位初体验"><a href="#定位初体验" class="headerlink" title="定位初体验"></a>定位初体验</h3><p><code>position：absolute；</code> 设置定位</p><p><strong>方位属性：</strong></p><blockquote><p>水平和垂直方向各选一个使用即可，选取的原则是<strong>就近原则</strong> （离哪边近用哪个）</p></blockquote><ul><li>水平方向：<ul><li>left：相对于左边框的距离</li><li>right：相对于右边框的距离</li></ul></li><li>垂直方向：<ul><li>top：相对于上边框的距离</li><li>bottom：相对于下边框的距离</li></ul></li></ul><h3 id="静态定位（static）"><a href="#静态定位（static）" class="headerlink" title="静态定位（static）"></a>静态定位（static）</h3><blockquote><p>标准流中的元素默认都是静态定位</p></blockquote><p><strong>代码：</strong> <code>position: static;</code> （默认值）静态定位</p><blockquote><p>静态定位是有一定争议的（有些人认为静态定位不算定位）</p></blockquote><p><strong>面试时候回答：</strong>三种定位方式，优先回答其他三个（相对、绝对、固定），如果四种再写静态定位</p><p><strong>注意点： </strong>静态定位不能通过方位属性进行移动</p><h3 id="相对定位（relative）"><a href="#相对定位（relative）" class="headerlink" title="相对定位（relative）"></a>相对定位（relative）</h3><blockquote><p>盒子相对于自己之前的位置定位移动（红绿蓝）</p></blockquote><p><strong>代码：</strong><code>position: relative；</code> 相对定位</p><p><strong>特点：</strong></p><ul><li><p>要配合方位属性使用，不然无法移动</p></li><li><p>相对于自己原来的位置进行偏移</p></li><li><p>设置了相对定位的元素在页面上占据了位置-》<strong>没有脱标</strong></p></li></ul><p><strong>应用场景：</strong></p><ul><li>配合绝对定位组CP（子绝父相），用的最多</li><li>用于小范围的移动（比如让某个标签稍微往下移动几个像素）</li></ul><h3 id="绝对定位（absolute）"><a href="#绝对定位（absolute）" class="headerlink" title="绝对定位（absolute）"></a>绝对定位（absolute）</h3><blockquote><p>绝对定位相对于非静态定位的父元素进行定位移动</p></blockquote><p><strong>代码：</strong><code>position: absolute;</code> 绝对定位</p><p><strong>特点：</strong></p><ul><li>需要配合方位属性移动使用</li></ul><hr><ul><li><p>绝对定位相对谁移动？</p><blockquote><p>默认相对于浏览器进行移动，但是如果有父元素，则相对于有定位的父元素进行移动</p></blockquote><ul><li>没有父元素 → 默认相对于浏览器进行移动</li><li>有父元素（判断父元素有没有定位）<ul><li>没有定位  →  默认相对于浏览器进行移动</li><li>有定位  →  相对于有定位的父元素进行移动</li></ul></li></ul></li><li><p>绝对定位的元素在页面中 <strong>不占位置</strong> → 脱标</p></li></ul><p><strong>应用场景：</strong></p><ul><li>子绝父相</li></ul><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><blockquote><p>让子元素相对于父元素进行移动 → 使用子绝父相，即子元素绝对定位，父元素相对定位</p></blockquote><p>子绝父相在定位中使用的最常见，并且子绝父相不会影响页面的布局</p><blockquote></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”比较子绝父相的好处"><a href="#ヾ-๑╹◡╹-ﾉ”比较子绝父相的好处" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”比较子绝父相的好处"></a>ヾ(๑╹◡╹)ﾉ”比较子绝父相的好处</h5><blockquote><p>不会影响之后的布局</p></blockquote><p><strong>特殊情况：</strong> 当使用子绝父相的时候，父元素已经有绝对定位了，此时忽略父元素，直接使用子绝即可</p><blockquote><p>子绝父绝的特殊情况</p></blockquote><hr><h5 id="ヾ-๑╹◡╹-ﾉ”子绝父相定位居中案例"><a href="#ヾ-๑╹◡╹-ﾉ”子绝父相定位居中案例" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”子绝父相定位居中案例"></a>ヾ(๑╹◡╹)ﾉ”子绝父相定位居中案例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父盒子：600*400  子盒子：200*100</span><br></pre></td></tr></table></figure><p><strong>需求1：</strong> 通过定位让子盒子在父盒子水平居中</p><p><strong>思路：</strong></p><ol><li><p>先让子盒子往右移动父盒子的一半</p><blockquote><p>子绝父相，<code>left：50%;</code></p></blockquote></li><li><p>再让子盒子往左移动自己的一半</p><ul><li><p>普通做法：<code>margin-left:负子盒子宽度的一半</code> → 属性值是<strong>负数</strong></p><blockquote><p>缺点：子盒子宽度变化之后，需要重新改代码</p></blockquote></li><li><p>优化做法：CSS3的新属性：<code>transform：translateX（-50%）</code></p><blockquote><p><code>transform：translateX（-50%）</code> → 表示沿着x轴的负方向移动自己的一半</p></blockquote></li></ul></li></ol><p><strong>需求2：</strong> 通过的定位让子盒子在父盒子中水平垂直都居中</p><p>同理嘛~</p><blockquote><p>但是需要注意，transform属性也会层叠。</p></blockquote><h5 id="ヾ-๑╹◡╹-ﾉ”课堂练习：网站头部hot图标"><a href="#ヾ-๑╹◡╹-ﾉ”课堂练习：网站头部hot图标" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”课堂练习：网站头部hot图标"></a>ヾ(๑╹◡╹)ﾉ”课堂练习：网站头部hot图标</h5><p><img src="\images\hot.png" alt="hot"></p><h5 id="ヾ-๑╹◡╹-ﾉ”课堂练习：小米商品页半透明效果"><a href="#ヾ-๑╹◡╹-ﾉ”课堂练习：小米商品页半透明效果" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”课堂练习：小米商品页半透明效果"></a>ヾ(๑╹◡╹)ﾉ”课堂练习：小米商品页半透明效果</h5><p><img src="\images\toumin.png" alt="toumin"></p><h3 id="固定定位-（fixed）"><a href="#固定定位-（fixed）" class="headerlink" title="固定定位 （fixed）"></a>固定定位 （fixed）</h3><blockquote><p>盒子相对于浏览器进行定位移动</p></blockquote><p><strong>代码：</strong><code>position: fixed;</code>  固定定位</p><p><strong>特点：</strong></p><ul><li><p>配合方位属性一起使用</p></li><li><p>永远相进行移动</p></li><li>固定定位的元素也不在页面中占据位置 → <strong>脱标</strong></li></ul><h5 id="ヾ-๑╹◡╹-ﾉ”课堂练习：新浪网页"><a href="#ヾ-๑╹◡╹-ﾉ”课堂练习：新浪网页" class="headerlink" title="ヾ(๑╹◡╹)ﾉ”课堂练习：新浪网页"></a>ヾ(๑╹◡╹)ﾉ”课堂练习：新浪网页</h5><blockquote><p>注意的是：脱标后的元素宽度默认由内容撑开</p><p>就算是div，脱标之后宽度也不再默认是父元素宽度</p></blockquote><h3 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h3><table><thead><tr><th style="text-align:center">定位方式</th><th style="text-align:center">属性值</th><th style="text-align:center">相对于谁移动</th><th style="text-align:center">占不占位置</th></tr></thead><tbody><tr><td style="text-align:center">静态定位</td><td style="text-align:center">static</td><td style="text-align:center">不能通过方位属性移动</td><td style="text-align:center">占位置</td></tr><tr><td style="text-align:center">相对定位</td><td style="text-align:center">relative</td><td style="text-align:center">相对于自己原来的位置</td><td style="text-align:center">占位置</td></tr><tr><td style="text-align:center">绝对地位</td><td style="text-align:center">absolute</td><td style="text-align:center">默认浏览器/相对于有定位的父元素移动</td><td style="text-align:center">不占位置（脱标）</td></tr><tr><td style="text-align:center">固定定位</td><td style="text-align:center">fixed</td><td style="text-align:center">永远相对于浏览器</td><td style="text-align:center">不占位置（脱标）</td></tr></tbody></table><h2 id="元素的层级关系"><a href="#元素的层级关系" class="headerlink" title="元素的层级关系"></a>元素的层级关系</h2><blockquote><p>开发者有时候需要设置元素的层级关系，层叠是谁在上面</p></blockquote><h3 id="标准流、浮动、定位的层级关系"><a href="#标准流、浮动、定位的层级关系" class="headerlink" title="标准流、浮动、定位的层级关系"></a>标准流、浮动、定位的层级关系</h3><blockquote><p>两个盒子之间的比较</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">三种层叠关系：</span><br><span class="line">标准流 &lt; 浮动 &lt; 定位（相对、绝对、固定）</span><br></pre></td></tr></table></figure><h3 id="定位的层级关系"><a href="#定位的层级关系" class="headerlink" title="定位的层级关系"></a>定位的层级关系</h3><p><strong>总结：</strong></p><ul><li><p>三者的层叠关系<strong>相同</strong>，HTML中写在下面元素的覆盖上面的</p></li><li><p>可以通过 <code>z-index</code> 属性手动设置定位元素的层级关系</p><p><strong>取值：</strong>没有单位的数字</p><p><strong>效果：</strong>数值越大，层级越高</p></li></ul><h2 id="垂直对齐方式（vertical-align）"><a href="#垂直对齐方式（vertical-align）" class="headerlink" title="垂直对齐方式（vertical-align）"></a>垂直对齐方式（vertical-align）</h2><blockquote><p>在开发中可能会遇到行内块元素垂直对齐的问题，此时可以使用 <code>vertical-align</code> 属性让图片</p></blockquote><p><strong>问题：</strong>  当图片和文字在一行中显示时，其实底部是不对齐的！</p><blockquote><p>图片和文字底部对齐怎么做？</p></blockquote><p><img src="\images\q1.png" alt="q1"></p><p><strong>解决方法：</strong></p><p>此时可以给图片设置 <code>vertical-align:bottom;</code> 即可</p><blockquote><p><code>vertical-align</code> 就是用来设置行内/行内块元素垂直对齐的问题的</p></blockquote><hr><p><strong>取值：</strong></p><ul><li>baseline：基线对齐</li><li>top：顶部对齐</li><li>middle：中线对齐</li><li>bottom：底部对齐</li></ul><p><strong>项目中可以使用 <code>vertical-align</code> 解决的bug：</strong></p><ul><li>场景1 :  文本框（text）和表单按钮（button）无法对齐问题；</li><li>场景2 :  input 和 img无法对齐的问题；</li><li>场景3 : div里放一个文本框 ，此时文本框无法靠顶；</li><li>场景4：div有img标签撑开，此时img标签下方有间隙（给img标签设置vertical-align即可）；</li><li>场景5 : 使用line-height让img标签垂直居中，需要给img标签单独设置vertical-align：middle</li></ul><p><strong>注意点：</strong></p><p>在学习完浮动之后，就不推荐优先使用行内块元素让div一行中显示，因为会出现垂直对齐的问题，以后<strong>优先使用浮动完成效果</strong></p><h2 id="溢出内容效果（overflow）"><a href="#溢出内容效果（overflow）" class="headerlink" title="溢出内容效果（overflow）"></a>溢出内容效果（overflow）</h2><blockquote><p>设置盒子内容超出部分的显示效果</p></blockquote><p><strong>取值：</strong></p><ul><li>visible：超出部分可见（默认值）</li><li>hidden：超出部分隐藏</li><li>scroll：显示滚动条</li><li>auto：根据内容的多少，自动显示或者隐藏滚动条</li></ul><h2 id="CSS三种隐藏方式"><a href="#CSS三种隐藏方式" class="headerlink" title="CSS三种隐藏方式"></a>CSS三种隐藏方式</h2><blockquote><p>CSS中有三种与隐藏相关的属性，需要知道他们之间的区别</p></blockquote><h3 id="内容超出隐藏-overflow-hidden；"><a href="#内容超出隐藏-overflow-hidden；" class="headerlink" title="内容超出隐藏 overflow:hidden；"></a>内容超出隐藏 <code>overflow:hidden；</code></h3><blockquote><p>盒子内容超出部分隐藏</p></blockquote><p><strong>注意：</strong> 隐藏的元素的超出内容，元素本身可见</p><h3 id="元素隐藏-visibility：hidden；"><a href="#元素隐藏-visibility：hidden；" class="headerlink" title="元素隐藏 visibility：hidden；"></a>元素隐藏 <code>visibility：hidden；</code></h3><blockquote><p>让元素隐藏，但在页面中仍然<strong>占位置</strong> → 相当于穿上了隐形斗篷</p></blockquote><p><strong>注意：</strong>让元素隐藏，并且占位置</p><h3 id="元素隐藏-display：none；"><a href="#元素隐藏-display：none；" class="headerlink" title="元素隐藏 display：none；"></a>元素隐藏 <code>display：none；</code></h3><blockquote><p>让元素隐藏，并且在页面中<strong>不占位置</strong> → 相当于把元素删除了</p></blockquote><p><strong>注意：</strong>让元素隐藏，并且不占位置</p><h2 id="CSS三种隐藏方式总结"><a href="#CSS三种隐藏方式总结" class="headerlink" title="CSS三种隐藏方式总结"></a>CSS三种隐藏方式总结</h2><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">作用</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center"><code>overflow：hidden;</code></td><td style="text-align:center">超出<strong>内容隐藏</strong></td><td style="text-align:center">超出盒子部分的<strong>内容隐藏</strong></td></tr><tr><td style="text-align:center"><code>visibility：hidden;</code></td><td style="text-align:center">元素<strong>本身隐藏</strong></td><td style="text-align:center">在页面中<strong>占位置</strong></td></tr><tr><td style="text-align:center"><code>display：none;</code></td><td style="text-align:center">元素<strong>本身隐藏</strong></td><td style="text-align:center">在页面中<strong>不占位置</strong></td></tr></tbody></table><h2 id="html-标签的嵌套规范（了解）"><a href="#html-标签的嵌套规范（了解）" class="headerlink" title="html 标签的嵌套规范（了解）"></a>html 标签的嵌套规范（了解）</h2><blockquote><p>块级元素一般用于布局：比如div在页面的布局用的最多；</p><p>行内元素一般用于放文字：比如span、a标签里面一般放文字</p><p>标签之间是不能随意嵌套的，书写的时候应该有对应的规范：</p></blockquote><p><strong>注意点：</strong></p><ul><li>行内元素一般放文字或者行内元素，但是<strong>a标签之间不能互相嵌套</strong>（会被浏览器解析成两个a标签）；</li><li><p>块级元素相当于一个容器，里面可以放文字、行内元素、块级元素，但是<strong>p标签不能嵌套块级元素</strong>（p标签会被拆分成两个p标签）</p><blockquote><p>p标签作为一个段落标签，只有文字才会组成段落，所以p标签里面一般只放文字，不要放块级元素！！！</p></blockquote></li></ul><h2 id="拓展（了解）"><a href="#拓展（了解）" class="headerlink" title="拓展（了解）"></a>拓展（了解）</h2><h3 id="字符间距（letter-spacing）"><a href="#字符间距（letter-spacing）" class="headerlink" title="字符间距（letter-spacing）"></a>字符间距（letter-spacing）</h3><blockquote><p>默认情况下，页面中的文字都是紧挨着的，但是有少数情况下，我们也可以让文字之间的距离变大一点</p><p>文字有英文和中文</p></blockquote><p><strong>效果演示：</strong> </p><p><img src="\images\letterspancing.png" alt="letterspancing"></p><p><strong>作用：</strong>设置文本中<strong>字符（中文汉字/英文字母）</strong>之间的距离</p><p><strong>代码：</strong> <code>letter-spacing: 20px;</code></p><p><strong>取值：</strong> 可以是不同单位的数值，允许使用负值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div p &#123;</span></span><br><span class="line"><span class="undefined">      letter-spacing: 20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world! 来啦老弟！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- letter spacing：设置的是字符间距，英文即字母之间的间距，中文即文字之间的间距 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单词间距（word-spacing）"><a href="#单词间距（word-spacing）" class="headerlink" title="单词间距（word-spacing）"></a>单词间距（word-spacing）</h3><blockquote><p>对于英文来说，有的时候还需要设置单词之间的距离，这个怎么操作呢？</p></blockquote><p>其实，英文单词之间的距离，指的得就是空格的宽度</p><p><strong>效果：</strong></p><p><img src="\images\wordspacing.png" alt="wordspacing"></p><p><strong>代码：</strong> <code>word-spacing: 20px;</code></p><p><strong>取值：</strong> 可以是不同单位的数值，允许使用负值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div p&#123;</span></span><br><span class="line"><span class="undefined">      word-spacing: 20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world! 来啦 老弟！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- word spacing：设置的是单词间距，一般只会用在英文中，对于中文来说，可以看做是段落中空格的间距 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;check
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基础班day09笔记</title>
    <link href="http://yoursite.com/2019/02/20/1-%E5%9F%BA%E7%A1%80%E7%8F%ADday09%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/20/1-基础班day09笔记/</id>
    <published>2019-02-20T02:09:00.000Z</published>
    <updated>2019-03-02T04:51:31.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><blockquote><ul><li style="list-style: none"><input type="checkbox"> 能够完成尚合项目的头部部分</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成尚合的导航部分</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成尚合的产品详情部分</li></ul><ul><li style="list-style: none"><input type="checkbox"> 能够完成尚合的底部部分</li></ul><p>。。。。。。</p></blockquote><p><strong>理解上课的知识点……</strong></p><h2 id="版心"><a href="#版心" class="headerlink" title="版心"></a>版心</h2><blockquote><p>宽度固定且水平居中的盒子</p></blockquote><p><strong>为什么要有版心?</strong></p><blockquote><p>因为每台电脑的屏幕不一样大，为了让不同屏幕大小的电脑都能看到页面的主体内容，我们需要把网页的内容约束在版心里。</p></blockquote><p><strong>屏幕大能看到主体内容：</strong></p><p><img src="\images\big.png" alt="big"></p><p><strong>屏幕小也能看到主体内容：</strong></p><p><img src="\images\small.png" alt="small"></p><blockquote><p>因为主要内容都放在版心中，所以能让更多大小的屏幕完整的看到页面的主体内容。</p></blockquote><p><strong>版心代码：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*通常版心命名为w*/</span></span><br><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>；</span><br><span class="line">    margin：<span class="number">0</span> auto；</span><br><span class="line">&#125;</span><br><span class="line">/----------------------------------------------------/</span><br><span class="line"><span class="comment">/*给主体内容的盒子设置版心，直接加上w这个类即可*/</span></span><br><span class="line">&lt;div class="w"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="常见的布局方式（了解）"><a href="#常见的布局方式（了解）" class="headerlink" title="常见的布局方式（了解）"></a>常见的布局方式（了解）</h2><blockquote><p>注意点：实际项目中，写每个盒子的时候都要判断有没有版心，版心很重要！！</p></blockquote><p><strong>常见的三种布局方式：</strong></p><blockquote><p>了解即可，在之后的项目中会写到对应的布局</p></blockquote><h3 id="一列固定宽度且居中"><a href="#一列固定宽度且居中" class="headerlink" title="一列固定宽度且居中"></a>一列固定宽度且居中</h3><blockquote><p>常见的布局结构，一般每个盒子都设置了版心</p></blockquote><p><img src="\images\yl.jpg" alt="yl"></p><h3 id="两列左窄右宽型"><a href="#两列左窄右宽型" class="headerlink" title="两列左窄右宽型"></a>两列左窄右宽型</h3><blockquote><p>常见的就是banner部分左侧导航，右侧轮播图的效果</p><p>如：<a href="http://www.mi.com" target="_blank"> 小米官网 </a></p></blockquote><p><img src="\images\ll.jpg" alt="ll"></p><h3 id="通栏平均分布型"><a href="#通栏平均分布型" class="headerlink" title="通栏平均分布型"></a>通栏平均分布型</h3><blockquote><p>占满浏览器的一行叫做<strong>通栏</strong>，对于通栏的div，可以不用设置宽度，默认就是独占一行的</p><p> <a href="http://www.smartisan.com/" target="_blank"> 锤子官网 </a></p></blockquote><p><img src="\images\tl.jpg" alt="tl"></p><p><strong>一般布局方式会综合运用：</strong></p><p><img src="\images\常见的布局情况.png" alt="常见的布局情况"></p><h2 id="上课的记录"><a href="#上课的记录" class="headerlink" title="上课的记录"></a>上课的记录</h2><blockquote><p>上课敲的项目首要任务是听懂</p><p>学习的是写页面的步骤，每个知识点都会，不会的是接下来做什么</p><p>如果有记笔记习惯的同学，可以把老师的步骤记下来，然后忘记怎么做的时候根据自己写的步骤看看能不能一步一步做出来</p></blockquote><p><strong>比如：</strong></p><ol><li>页面的顶部区域<ol><li>大盒子需要一个版心</li><li>里面两张图片，分别左右浮动</li><li>图片离上面有距离，给大盒子设置 <code>padding-top</code></li><li>……</li></ol></li></ol><h2 id="尚合项目"><a href="#尚合项目" class="headerlink" title="尚合项目"></a>尚合项目</h2><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><blockquote><p>整个项目应该就是一个文件夹，文件夹中放项目中的所有资源（图片、html、css）</p></blockquote><p><strong>步骤：</strong></p><ol><li>新建一个文件夹，作为<strong>项目文件夹</strong> → 一个项目就应该有一个文件夹</li><li>在项目文件夹中新建<strong>images文件夹</strong> → 存放项目相关图片</li><li>在项目文件夹中新建 <strong><code>index.html</code>文件</strong> → 页面文件</li><li>在项目文件夹中新建 <strong><code>index.css</code>文件</strong> → 样式文件</li></ol><h3 id="样式初始化"><a href="#样式初始化" class="headerlink" title="样式初始化"></a>样式初始化</h3><blockquote><p>开始的时候先把项目中<strong>常见的css样式先写好</strong>→样式的初始化</p></blockquote><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------------项目样式的初始化--------------------------------------------*/</span></span><br><span class="line"><span class="comment">/*清除默认的marign和padding*/</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*消除页面中li的小点*/</span></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*消除a标签默认的下划线*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*左浮动的类*/</span></span><br><span class="line"><span class="selector-class">.fl</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*右浮动的类*/</span></span><br><span class="line"><span class="selector-class">.fr</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清除浮动的代码*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*版心的样式*/</span></span><br><span class="line"><span class="comment">/*版心就是宽度固定水平居中的盒子*/</span></span><br><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">980px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*为了在上面看到下面的标签 最后删掉*/</span></span><br><span class="line"><span class="comment">/*body &#123;</span></span><br><span class="line"><span class="comment">  height: 2000px;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><h3 id="写代码-´-ω-･-▄︻┻┳══━一"><a href="#写代码-´-ω-･-▄︻┻┳══━一" class="headerlink" title="写代码(　 ´-ω ･)▄︻┻┳══━一"></a>写代码(　 ´-ω ･)▄︻┻┳══━一</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;check
      
    
    </summary>
    
    
      <category term="授课笔记" scheme="http://yoursite.com/tags/%E6%8E%88%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
