<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js基础day06笔记]]></title>
    <url>%2F2020%2F02%2F10%2F1-js%E5%9F%BA%E7%A1%80day06%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标（全天模式） 能够说出数组对象的3-4个方法 能够说出数组对象的增删操作 能够使用数组的排序和翻转操作 能够说出什么是基本包装类型 能够说出字符串对象的3-4个方法 。。。。。。 理解上课的知识点…… Date对象 时间戳 一般日期打印出来，是字符串的形式 时间戳则是日期的数字形式，可以运算 时间戳：表示距离1970年01月01日00时00分00秒起，过去的总毫秒数 作用： 用来计算时间差 代码： var date = +new Date(); 可以统计代码执行的时间 12345678910// ------------------------获取开始的时间var begin = +new Date(); var sum = 0;for (var i = 1; i &lt;= 100000000; i++) &#123; sum += i;&#125;console.log(sum);// -------------------------------获取结束的时间var end = +new Date(); console.log(end - begin); // 计算时间差，可以得出代码的执行时间毫秒数 倒计时（距离下课的时间） 12345678910111213141516171819// -----------------------------------当前时间var now = new Date();// ----------------------------------将来需要倒计时的时间var future = new Date('2019-5-20 12:00:00'); // ------------------------------得到时间差——》转换成秒数（小数后忽略）var time = parseInt((future - now) / 1000); // --------------------------------秒数中获取时——》1小时=3600秒var hours = parseInt(time / 3600);// --------秒数中获取分——》1分钟=60秒, 对所有的分钟数, 对60求余数即可(超过60的进位到小时中了）var minutes = parseInt(time / 60) % 60;// ---------获取秒数，对秒数求60的余数（超过60的部分进位到分钟去了)var seconds = time % 60;var str = "距离下课还有: " + hours + '小时' + minutes + '分钟' + seconds + '秒';document.write(str); Array对象 js中内置了一个Array构造函数，可以用来创建数组对象（万物皆对象），每个对象中也有对应的方法 数组转换成字符串：arr.join(字符串分隔符) 作用：将数组中的每一项拼接成字符串 12345// 语法：arr.join(分隔符)var arr = ['张三','李四','王五','赵六'];var str = arr.join(); // 不传参数，默认每一项之间以 逗号 进行拼接var str = arr.join("-");//按 - 进行拼接var str = arr.join("");//分隔符为空串，中间就没有分隔符 ———————— 数组的增删操作：push、pop、unshift、shift 12345678// --------------------在数组的最后，添加一个或多个项，返回添加后数组的lengtharray.push();// -------------------在数组的最后，删除一项，返回删除的项array.pop();// --------------------在数组的最前面，添加一个或多个项，返回添加后数组的lengtharray.unshift();// ---------------------在数组的最前面，删除一项，返回删除的项array.shift(); ヾ(๑╹◡╹)ﾉ” 数组的增删操作练习123456789101112131415//练习1var arr = ["刘备"];//添加数据后变成：["赵云","马超","刘备","关羽","张飞"]//接着删除数据后变成：["关羽","张飞"]console.log(arr);//练习2var arr = ["赵云","马超","刘备","关羽","张飞"];//把数组的最后一个元素变成数组的第一个元素//把数组的第一个元素变成数组的最后一个元素console.log(arr); 数组的翻转与排序：reverse、sort 1234567891011121314//------------------让当前数组反转arr.reverse();//-------------------让当前数组排序，默认按照首字符排序arr.sort();//--------------sort方法可以传递一个函数作为参数，设置是升序还是降序排序arr.sort(function(a, b)&#123; // a表示前一项，b表示后一项 // 如果返回值 &gt;0,则交换位置 // --------------从小到大升序排列 return a - b; //---------------从大到小降序排列 return b - a;&#125;); ヾ(๑╹◡╹)ﾉ” 数组的排序练习123456789101112//1、将[3, 6, 1, 5, 10, 2,11]从小到大排列//2、将字符串数组按照字符长度从小到大排列——》比较的a.length和b.agevar arr = ['bb', 'a', 'dddd', 'ccc'];//3、将学生数组按照年龄从小到大排列——》比较的a.age和b.agevar arr = [ &#123;name: 'zs', age: 18, score: 100&#125;, &#123;name: 'ls', age: 38, score: 120&#125;, &#123;name: 'ww', age: 28, score: 20&#125;, &#123;name: 'zl', age: 16, score: 15&#125;,]; ———————— 数组的合并和截取：concat、slice 数组的合并 12//-----------------合并数组，不会改变原数组，会返回一个新的拼接好的数组var newArr = arr.concat(arr2); 数组的截取 12345var arr = ["赵云","马超","刘备","关羽","张飞"]; //--------------------------数组的截取，从数组中截取一部分，不会改变原数组，返回截取的新数组 var newArr = arr.slice();// 不传参——》从开始截取到最后，截取整个数组——》相当于复制一份 var newArr = arr.slice(begin);// 从begin（下标）开始，截取到最后，包括begin！！ var newArr = arr.slice(begin,end);// 从begin开始，截取到end，包括begin，不包括end！！！ 数组的删除、添加、替换：splice splice可以在数组的任意位置，添加或者删除任意项，会改变原数组 1234567891011121314//------------------splice 方法可以在数组的任意位置，添加或者删除任一项（会改变原数组）arr.splice(从哪开始删除，删除几个，添加的项1，添加的项2，......)arr.splice(begin,deleteCount,item1,item2,...)var arr = ["赵云","马超","刘备","关羽","张飞"]; //删除--------------------从下标为1开始删除，删除两项arr.splice(1,2);// 删除//添加--------------------把第一项、第二项添加到下标2的位置arr.splice(2,0,'第一项','第二项');// 添加//替换--------------------把下标2这一项替换成新项（先删除，再添加） arr.splice(2,1,'新项');// 替换 ヾ(๑╹◡╹)ﾉ” 数组的截取与添加练习 12345//练习：var arr = ["赵云","马超","刘备","关羽","张飞"];//1、截取["刘备","关羽"]//2、在马超后面增加 马腾//3、删除关羽 增删操作，都会改变原数组！！ 数组查找元素：indexOf、lastIndexOf 查找值在数组中某元素的下标 12345678910111213141516171819//------------indexOf()——》查找数组中元素第一次出现的下标——》如果找不到，返回-1var arr = [1,2,3,4,5,4,3,2,1];console.log(arr.indexOf(2));// 查找2在数组中第一次出现的下标console.log(arr.indexOf(100));// 数组中不存在的值，返回-1// 需求: 判断 arr 中是否有 赵六var arr = ['张三', '田七', '李四', '王五'];var index = arr.indexOf('赵六');if (index === -1) &#123; console.log('没有');&#125;else &#123; console.log('有赵六, 下标是' + index);&#125;//-------------lastIndexOf()——》查找数组中元素最后一次出现的下标——》如果找不到，返回-1var arr = [1,2,3,4,5,4,3,2,1];console.log(arr.lastIndexOf(2));// 查找2在数组中第一次出现的下标console.log(arr.lastIndexOf(100));// 数组中不存在的值，返回-1 清空数组 12345678910 var arr = [1,2,3,4,5]; // 1、------------------将数组赋值为一个空数组，推荐 arr = []; // 2、-----------------直接修改数组的长度为0 arr.length = 0; // 3、-------------------删除数组中的所有元素arr.splice(0,arr.length);// 从下标0开始，删除arr.length个元素 ヾ(๑╹◡╹)ﾉ” 数组的综合练习1234567var arr = ["c", "a", "z", "a", "x", "a", "a", "z", "c", "x", "a", "x"]//1. 找到数组中第一个a出现的位置//2. 找到数组中最后一个a出现的位置//3. 找到数组中每一个a出现的位置(遍历——》打印下标)//4. 数组去重，返回一个新数组// 1、遍历原数组// 2、看arr[i] 在 newArr中是否存在，不存在就加入newArr，如果存在，就不加。 ————————基本包装类型 简单数据类型是没有任何属性和方法的。 但是为了方便操作基本数据类型，js中还提供了三个特殊的复杂类型：String、Number、Boolean对象。可以使用其中的方法： Number： var num = new Number(123); String： var str = new String(&#39;abc&#39;); Boolean： var flag = new Boolean(true); 基本包装类型：把基本类型包装成复杂类型 1234//-------------------------简单数据类型没有任何的属性和方法var str = “abc”;//---但是却可以直接使用.length方法——》原因是底层浏览器默认把简单数据类型包装成复杂类型，就可以调用方法了console.log(str.length); 基本包装类型的步骤： 在js中为了操作方便，如果是简单数据类型要获取方法时——》默认转换成复杂数据类型 变成复杂数据类型之后——》调用其方法，得出结果 结束时，在还原成简单数据类型 Number对象 Number对象是数字的包装类型，数字可以直接使用这些方法 12345var num = 11.111111;//------------------保留几位小数console.log(num.toFixed(2));//--------------------转成字符串console.log(num.toString(2)); Boolean对象 Boolean对象是布尔类型的包装类型。 123var flag = true;//-------------------转成字符串console.log(flag.toString();)//底层先转成基本包装类型——》使用方法得到字符串——》还原成简单数据类型 undefined和null没有包装类型！！！所以没有方法！！ String对象 字符串可以类似于看做是一个数组（不是真的数组——》伪数组） 字符串可以遍历——》字符串不是数组，不是真的数组 12345678var str = 'abcdefg';// 底层会默认转换成 String对象，var str = new String('abcdefg');//----------------------打印字符串中下标为0的字符console.log(str[0]);//-----------------------字符串的遍历（类似于数组）for (var i = 0; i &lt; str.length; i++) &#123; console.log(str[i]);&#125; 查找指定字符的位置：indexOf、lastIndexOf 1234567//------------indexOf()——》查找字符第一次出现的下标——》如果找不到，返回-1var str = "abdedba";console.log(str.indexOf(a));// 查找a在str中第一次出现的下标//-------------lastIndexOf()——》查找字符最后一次出现的下标——》如果找不到，返回-1var str = "abdedba";console.log(str.lastIndexOf(a));// 查找a在str中最后一次出现的下标 去除字符串首尾的空格：trim 1234var str = ' hello world ';//----------------------------去除字符串首尾的空格，中间的不管str = str.trim();// 返回去除首尾空格之后的字符串，重新赋值给strconsole.log(str); 字母大小写转换：toUpperCase、toLowerCase 12345var myName = 'ZhangSan';//-----------------------------------每个英文字母转换成大写console.log(myName.toUpperCase());//-----------------------------------每个英文字母转换成小写console.log(myName.toLowerCase()); 字符串拼接与截取：concat、slice、substring、substr 拼接——》+用的最多 1234567var str1 = 'abc';var str2 = 'def';//----------------------拼接+用的最多console.log(str1 + str2);//------------------------拼接字符串（不用）会返回一个新字符串var newStr = str1.concat(str2);console.log(newStr); 字符串的截取 1234567var str = 'abcdefg';//-----------------------slice(begin,end)——》从begin开始，截取到end（有始无终）console.log(str.slice(1, 3)); //-------------------------subString(begin,end)——》从begin开始，截取到end（有始无终）console.log(str.substring(1, 3)); //------------------------subStr(begin,length)——》从begin开始，截取length个，包括beginconsole.log(str.substr(1, 3)); // bcd 将字符串分割成一个数组：split 和arr.join（）正好相反 1234567// join 将数组的值拼接成一个字符串// split('分割符') 将字符串分割成一个数组, 返回值, 就是分割后得到的数组var str = 'a|b|c|d';//-----------------split('分割符'): 将字符串通过分隔符分割成一个数组, 返回分割后得到的数组var arr = str.split('|');console.log(arr); // ["a", "b", "c", "d"] ———————— 字符串替换：replace 可以把字符串中特定字符替换掉 12345678var words = '大菜鸡, 真坑啊!!! 大菜鸡, 大菜鸡';//-----------------------str.replace('aa','bb'):将str中的第一个aa替换成bb——》返回替换后的结果words = words.replace('菜鸡', '***');console.log(words);//--------------------------------------（拓展）替换所有的需要使用后面讲的正则——》g：全局words = words.replace(/你妹的/g, '***')console.log(words); ヾ(๑╹◡╹)ﾉ”字符串小练习1234//1. 截取字符串"我爱中华人民共和国"，中的"中华"//2. "abcoefoxyozzopp"查找字符串中所有o出现的位置//3. 把字符串中所有的o替换成!//4. 把一个字符串中所有的空格全部去掉 ヾ(๑╹◡╹)ﾉ”字符串大练习 12// var str = 'my_name_is_jim_green';// 需求: 变成驼峰命名 myNameIsJimGreen]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js基础day05笔记]]></title>
    <url>%2F2020%2F02%2F10%2F1-js%E5%9F%BA%E7%A1%80day05%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标（全天模式） 能够使用对象的属性和方法 能够for…in遍历对象的所有属性 能够说出new关键字的执行过程 能够说出简单类型和复杂类型的数据作为函数参数的差异 能够说出Math对象的至少3个方法 能够说出Date对象的至少3个方法。。。。。。 理解上课的知识点…… 对象的取值与赋值的语法点语法对象的取值： 对象名.属性名 123console.log(person.name);console.log(person.height);...... 注意点： 如果属性名存在，获取对应的值 如果属性名不存在，返回undefined 对象名.方法名——》对象名.方法名() 方法一般不会打印，是用来调用的 12console.log(person.eat);// 打印的是方法这个函数person.eat();// 表示调用person对象中的eat方法这个函数 对象的赋值： 对象名.属性名 = 值 如果属性名存在，被覆盖 如果属性名不存在，添加一个新属性 中括号语法 中括号语法也叫做关联数组语法，说白了就是把对象当做是数组看待 数组取值是：arr[下标]，其实下标就相当于键值对中的键 类比如数组的取值，对象也可以写：obj[键] 中括号语法： 用法灵活，支持字符串或者变量 取值：对象名[“属性名”] 赋值：对象名[“属性名”] = ‘新值’ 点语法与中括号语法的区别 两种方法都能使用，但是只有中括号语法中支持变量 点语法：对象名.属性名 ——》简洁——》只能写属性名，不支持变量（不管变量） 中括号语法：对象名[‘属性名’] ——》灵活——》只能写字符串或者变量 12345678910111213141516// 下列分别访问的是对象的什么属性// 1、obj.name;// 找obj的name属性// 2、var str = 'age';obj.str;// 找obj的str属性// 3、obj['height'];// 找obj的height属性// 4、var str = 'weight';obj[str];// 找obj的weight属性 中括号语法的使用场景 如果访问的属性值是一个变量，必须使用中括号语法 需求： 1// 给一个空对象中添加数据，变成 &#123; n1: 1, n2: 2, n3: 3, n4: 4 ...... n10: 10 &#125; ————————遍历对象 一个一个的访问对象的全部属性 语法： 每一个键值对都会执行一遍for…in语句——》其中是变量需要使用中括号语法 1234567// --------------------key——》键——》是一个变量可以变化// --------------------obj——》需要遍历的对象// --------------------obg[key]——》对应的值for(var key in obj) &#123; console.log(key); console.log(obj[key]);&#125; ヾ(๑╹◡╹)ﾉ” 遍历对象的小练习12345678910111213// 需求: 将所有 obj2 的属性, 添加到 obj 中去var obj = &#123; name: '张三', age: 30&#125;;var obj2 = &#123; money: 1000000, car: '玛莎拉蒂'&#125;;// 1、 可以一个一个的添加，但是通用性不好（属性变了之后代码也需要变）// 2、可以遍历数组动态的把所有的数据都添加上 批量创建对象 在实际开发中，可能需要创建多个用户对象，此时就需要批量创建对象了 使用工厂函数创建对象需求： 需要同时创建多个对象出来 一个一个字面量形式的创建——》可以，但是不停的做重复的代码 可以把重复创建对象的代码用函数封装起来——》这个用来创建对象的函数，就叫做工厂函数 123456789101112131415161718function createPerson(name, age, desc) &#123; var obj = &#123; name: name, age: age, desc: desc, say: function() &#123; // 在对象的方法中, this, 指向当前的对象 console.log('大家好, 我叫' + this.name); &#125; &#125;; return obj;&#125;var xm = createPerson('小明', 18, '长得帅');console.log(xm);var xh = createPerson('小红', 30, '长得美');console.log(xh); 注意点： 在对象方法中，this就相当于当前这个对象。 优点：可以同时创建多个对象 缺点：工厂函数创建出来的对象，是Object类型的，没有更具体的类型！！ 有时候咱们需要构建人这个对象，想要其类型就是person，此时使用工厂函数就不行了 ————————构造函数的介绍 每一个对象自身存在一个类型，表示自己是什么类型的对象。 作为学生来说，对象的类型应该为Student 作为老师来说，对象的类型应该为Teacher 都是人，不过属于不同类型的人 …… 但是如果使用工厂函数来说，不管创建出来是什么对象，类型始终是Object，因为底层使用的是new Object这个构造函数。用什么构造函数创建的对象，对象类型就是什么 所以如果希望创建一个学生对象，他的类型为Student，此时可以使用自定义一个Student构造函数即可！！ 构造函数的特点： 就是一个函数 函数名首字母大写 js内部，内置了一些构造函数，比如：Object、Array… 构造函数可以自定义 自定义构造函数的使用步骤： 声明一个自定义的构造函数，特点是首字母大写 结合new语法一起使用，创建出来的对象，就有自己的类型了！！ new做的四件事情先创建出一个student类型的对象~ new会做四个事情 new会创建一个新的空对象，并且这个对象是有类型的 让构造函数中的this指向当前创建的对象 想给当前新对象加属性，直接this.name即可 执行构造函数中的代码 在这一步可以给新对象加属性和方法 会返回这个新对象 注意点 new的作用：创建了一个对象 构造函数的作用：给创建对象添加了属性和方法（实例化对象） 没有构造函数体，只是一个空对象 代码： 12345678// ----------------------构造函数function Person(name, age) &#123; this.name = name; this.age = age; this.sayHi = function() &#123; console.log('大家好') &#125;&#125; ヾ(๑╹◡╹)ﾉ” 构造函数的小练习-批量创建狗创建对象的小结 创建单个对象 字面量：var obj = {}; 构造函数：var obj = new Object(); 创建多个对象 工厂函数：function createPerson() {var obj ={};return obj;} 只是把创建对象的过程封装成了一个函数 自定义构造函数：function Person(){ this.name=&#39;zs&#39;; } 需要通过new + 构造函数创建，并且可以创建不同类型的对象 ヾ(๑╹◡╹)ﾉ” 构造函数相关的概念小结————————值类型与引用类型简单数据类型（值类型）：number、string、boolearn、undefined、null 复杂数据类型（引用类型）： Array、Object、Function、（自定义构造函数创建的一些对象！！） 从内存角度上划分，可以把数据分为值类型与引用类型。 简单数据类型（值类型）：变量在存储时，存储的是值本身！！ 复杂数据类型（引用类型）： 变量在储存时，储存的是内存地址！！ 值类型与引用类型的内存分布(◕ᴗ◕✿)画图说明值类型内存分布 值类型变量中存的是值本身 12345var num = 10;var num2 = num;num2 = 20;console.log(num);console.log(num2); (◕ᴗ◕✿)画图说明引用类型内存分布 引用类型变量中存的是内存地址 12345678var obj = &#123; name:'ff', age:18&#125;var obj2 = obj; obj2.name = 'tg';console.log(obj2.name);console.log(obj.name); 值类型与引用类型的赋值特征 值类型变量中存的是值本身，所以赋值给其他变量时，赋值的就是值本身 123456// 值类型var num1 = 10;var num2 = num1;num2 = 99;console.log(num1);console.log(num2); 引用类型变量中存的是内存地址，所以赋值给其他变量时，赋值的是内存地址 123456789// 引用类型var obj1 = &#123; name:"zs", age:18&#125;var obj2 = obj1;obj2.name = "ls";console.log(obj1.name);console.log(obj2.name); 值类型与引用类型参数传递 值类型：变量存的是值本身，传参时传递的是值本身 (◕ᴗ◕✿)画图说明值类型参数传递12345678var num = 10;function fn(a) &#123; // 形参，就相当于局部变量，相当于var a = 10 a = 99; console.log(a);&#125;fn(num);console.log(num); 引用类型：变量存的是内存地址，传参时传递的是内存地址 (◕ᴗ◕✿)画图说明引用类型参数传递12345678910var obj = &#123; name:"zs", age:18&#125;function fn(a) &#123; a.name = "ls"; console.log(a.name);&#125;fn(obj);console.log(obj.name); ————————值类型与引用类型练习1234567891011121314151617//面试题1 : function fn(a, b) &#123; // 相当于 // var a = 10; // var b = 20; // 函数的参数 其实相当于函数内部的局部变量 a = a + 1; b = b + 1; console.log(a); console.log(b);&#125;var x = 10;var y = 20;fn(x, y);console.log(x);console.log(y); (◕ᴗ◕✿)画图说明第二种情况1234567891011121314//面试题2 : var p = &#123; name:"zs", age:18&#125;function fn(person) &#123; person.name = 'ls';// person = &#123;// name:'qq'// &#125; console.log(person.name);&#125;fn(p);console.log(p.name); 内置对象 JS内置对象就是指Javascript自带的一些对象，供开发者使用，这些对象提供了一些常用的的功能。 常见的内置对象有Math、String、Array、Date等 Math对象 Math对象中封装很多与数学相关的属性和方法。 圆周率 Math.PI 最大值/最小值 12Math.max(1,2,3,4,5,6);Math.min(1,2,3,4,5,6); 取整 12345678Math.ceil();//天花板，向上取整，取大的那个Math.floor();//地板，向下取整，取小的那个Math.round();//四舍五入，如果是.5，则取更大的那个数console.log( Math.ceil(1.1) );console.log( Math.ceil(1.9) );console.log( Math.ceil(-1.1) );console.log( Math.ceil(-1.9) ); 随机数 1Math.random();//返回一个[0,1)之间的数，能取到0，取不到1 小案例：随机获取0、1、2这三个数 1234// --------------获取0~2.9999的随机数 Math.random()*3//---------------只需要把小数点之后的去掉即可 parseInt(Math.random()*3) &gt; 求0~n的整数随机数 &gt; &gt; `parseInt(Math.random()*(n+1))` 小案例： 随机生成一个rbg颜色 1234567var colorA = parseInt( Math.random() * 256 );var colorB = parseInt( Math.random() * 256 );var colorC = parseInt( Math.random() * 256 );var str = 'rgb('+ colorA + "," + colorB + ',' + colorC +')';console.log(str);//----------------------设置body的颜色（web api内容）document.body.style.backgroundColor = str; 绝对值 1234Math.abs();//求绝对值//-----------------------------console.log(Math.abs(1)); // 1console.log(Math.abs(-1)); // 1 次幂（次方） 12345Math.pow(num, power);//求num的power次方//-----------------------------console.log(Math.pow(3, 2)); // 3的平方 9console.log(Math.pow(10, 3)); // 10的三次方 1000console.log(Math.pow(100, 0.5)); // 100的开方 10 开方 123Math.sqrt(num);//对num开平方//-----------------------------console.log(Math.sqrt(9)); // 3 ————————Date对象 js提供了一个Date构造函数，通过Date构造函数可以创建不同的日期对象 ——》因为日期都是不同的！！！ Date对象用来处理日期和时间 创建一个日期对象 1234567var now = new Date();//不传参，默认是一个当前时间的对象var date = new Date("2019-05-20 12:00:00");//(格式固定)指定具体的时间对象，后面的时分秒可以省略console.log(now);console.log(date);//-----------------------------不常用的方式var date = new Date(2019,4,20,12,0,0);// 可以把每一个项分别传入，但是注意月份从0开始的，0~11var date = new Date(1558324800000);// 直接传入时间戳也行 日期格式化（了解，不用） Date对象中有默认的方法可以进行日期格式化，但是不好看，一般不用。 123456var now = new Date()；console.log(now);// 默认直接打印now对象，会默认调用toString方法，打印结果是一个字符串console.log(now.toString());// 转成标准的字符串日期数据输出（默认）console.log(now.toLocaleString()); // 输出本地格式日期console.log(now.toLocaleDateString()); // 本地格式日期，只输出日期部分console.log(now.toLocaleTimeString()); // 本地格式日期，只输出时间部分 获取日期的指定部分 之前默认的日期格式化格式很丑，一般不用——》通过获取日期的指定部分，可以自定义格式化日期 12345678910111213141516171819202122var now = new Date(); // 当前时间// 获取年份var year = now.getFullYear();// 获取月份——》月份从0开始，范围是0~11，一般会+1var month = now.getMonth() + 1;// 获取日——》一个月的几号——》getDay表示获取星期几（从0开始，0表示周日，1表示周一）var day = now.getDate();// 获取时var hours = now.getHours();// 获取分var minutes = now.getMinutes();// 获取秒var seconds = now.getSeconds();var str = year + '年' + month + '月' + day + '日, ' + hours + '时' + minutes + '分' + seconds + '秒';document.write(str); ———————— 时间戳 一般日期打印出来，是字符串的形式 时间戳则是日期的数字形式，可以运算 时间戳：表示距离1970年01月01日00时00分00秒起，过去的总毫秒数 作用： 用来计算时间差 代码： var date = +new Date(); 可以统计代码执行的时间 12345678910// ------------------------获取开始的时间var begin = +new Date(); var sum = 0;for (var i = 1; i &lt;= 100000000; i++) &#123; sum += i;&#125;console.log(sum);// -------------------------------获取结束的时间var end = +new Date(); console.log(end - begin); // 计算时间差，可以得出代码的执行时间毫秒数 倒计时（距离下课的时间） 12345678910111213141516171819// -----------------------------------当前时间var now = new Date();// ----------------------------------将来需要倒计时的时间var future = new Date('2019-5-20 12:00:00'); // ------------------------------得到时间差——》转换成秒数（小数后忽略）var time = parseInt((future - now) / 1000); // --------------------------------秒数中获取时——》1小时=3600秒var hours = parseInt(time / 3600);// --------秒数中获取分——》1分钟=60秒, 对所有的分钟数, 对60求余数即可(超过60的进位到小时中了）var minutes = parseInt(time / 60) % 60;// ---------获取秒数，对秒数求60的余数（超过60的部分进位到分钟去了)var seconds = time % 60;var str = "距离下课还有: " + hours + '小时' + minutes + '分钟' + seconds + '秒';document.write(str); #####]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js基础day04笔记]]></title>
    <url>%2F2020%2F02%2F10%2F1-js%E5%9F%BA%E7%A1%80day04%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标（全天模式） 能够说出函数的形参和实参的区别 能够使用函数封装一段代码重复使用 能够说出函数中return的作用 能够封装一个函数返回两个数的最大值 能够说出全局作用域和局部作用域的区别 能够说出预解析的过程 能够书写定义函数的两种不同方式 能够自定义创建对象。。。。。。 理解上课的知识点…… 函数的参数 上面写的计算两个数的和存在问题，如果第一次求10+20的和，第二次求100+200的和，此时怎么办？ 需求：计算两个数的和，封装成一个函数 可以把需要求和的两个数作为参数传到函数里面，函数体中计算参数的和即可。 形参（形式参数） 在函数声明时，设置的参数 作用：占位置。 实参（实际参数） 在函数调用时，传入的参数。 作用：函数调用时，会把实参的值赋值给形参，这样形参就有了值。 例子： 12345var getSum(a,b) &#123; console.log(a + b);&#125;getSum(10 + 20);getSum(100 + 200); 形参： 在函数声明时，（）中的参数 形式参数：默认没有具体的值或者类型，只有当调用时，形参才有具体的值或者类型 作用：占位置 实参： 在函数调用时，给函数传递的参数 实际参数：默认有具体的值或者类型 作用：函数调用时，会将实参的值，传递给形参 函数声明与调用的进阶写法： 123456// 函数声明function 函数名(形参1, 形参2, 形参3,...)&#123; 函数体；&#125;// 函数调用函数名(实参1, 实参2, 实参3,....); ヾ(๑╹◡╹)ﾉ” 函数参数的练习 发生变化的值，都能提取成函数的参数（形参） 123// 1. 计算1-n之间所有数的和// 2. 计算m-n之间所有数的积 初学者关键在于熟悉语法，对于复杂的情况之后的课程会不断拓展。 函数的返回值 当函数执行完的时候，我们希望函数可以返回执行的结果（返回值）。也就是返回值。 此时可以通过在函数中设置一个return返回一个返回值 买一瓶爽歪歪~ 返回值语法： 123456789// 函数的声明function 函数名(形参1, 形参2, 形参...)&#123; 函数体; // 函数的返回值，就是函数的结构 return 返回值;&#125;//可以通过变量来接收这个返回值var 变量 = 函数名(实参1, 实参2, 实参3);// 此时变量的值等于函数的返回值 注意点： 函数的返回值可以通过一个变量接收，然后对返回值进行之后的操作 ヾ(๑╹◡╹)ﾉ” 函数返回值的练习12// 1. 计算1-n之间所有数的和,并且返回结果// 2. 封装一个函数返回两个数的最大值 ————————函数三要素 函数名：函数可以一次声明，通过函数名()多次调用：比较重要 函数的参数：可以没有，但是如果函数体内有需要变化的值，此时就需要把变化的量提取出形参 函数的返回值： 可以没有，但是如果需要拿到函数的执行结果，就需要return返回值！！！ 开发中：参数和返回值看实际需求决定！ ヾ(๑╹◡╹)ﾉ” 函数三要素的练习11234567// 1. 求任意半径的圆的面积// 圆的面积 = π（3.14） * r * r// 2. 求任意半径的圆的周长// 圆的周长 = π * r * 2// 3. 求任意2个数中的最大值 ヾ(๑╹◡╹)ﾉ” 函数三要素的练习21234// 1. 求任意数组中的最大值// 2. 求任意数组中的最小值// 3. 翻转任意数组，返回一个新的数组// 4. 对任意数组从小到大排序 函数参数与返回值的说明需求：封装成函数，求两个任意数的和并且返回结果 要求形参与实参需要一一对应！！但是如果在调用是，传实参写少了，或者写多了，是什么情况呢？？ 函数参数的注意点： 规范形参与实参的个数需要一一对应！ 如果参数传少了，没有接收到的值就是undefined（避免这种情况，代码有问题） 如果参数传多了，前面的会一一对应，对于多出的会被忽略（不会影响结果） 函数返回值的注意点： 一个函数的返回值，指的是函数调用的结果 return表示函数返回结果，函数已经结束，return之后的代码就不执行了！！ 函数的高级知识函数内部可以调用函数 在函数内部是可以继续调用别的函数的。 12345678910111213141516function study() &#123; console.log('早上8点，开始学习'); // 在study函数的函数体中调用了play函数 play(); console.log('晚上9点，结束学习');&#125;function play() &#123; console.log('早上8点半开始玩手机'); console.log('晚上8点半结束玩手机');&#125;// 只有在调用时, 浏览器才会执行函数体中的代码study(); 函数的调试 如果需要看上面函数的执行过程，可以通过调试工具调试一下 从左往右看： 第一个：瞬间执行到下一个断点处 第二个：让代码往下执行一步（如果遇到函数的调用，瞬间执行完得出结果，不显示过程） 第三个：让代码往下执行一步（如果遇到函数的调用，会进入函数体中显示过程） 想进入函数看里面的代码使用 第四个：瞬间执行完当前函数（不显示过程） 不想看函数里面的代码了，可以使用跳出 ————————作用域 变量起作用的区域 局部作用域： 在函数内部，就是局部作用域 在函数内部声明的变量，就叫做局部变量 注意点： 局部变量，只能在当前函数内部，使用！！ 123456function fn () &#123; var num = 22;// num是fn函数内部的变量，是局部变量，只能在fn中使用 console.log(num);&#125;fn();console.log(num);// 报错 全局作用域： 在script标签内，函数外，就是全局作用域 在全局作用域中，声明的变量，就叫做全局变量 注意点： 全局变量，在任何地方，都可以使用！！ 123456var num = 11;function fn () &#123; console.log(num);// 可以访问全局变量num&#125;fn();console.log(num);// 可以访问全局变量num 全局变量与局部变量的访问规则下列打印的结果是什么： 先明确是什么变量，再判断值 模拟浏览器的执行 (◕ᴗ◕✿)画图演示1234567var num = 11;function fn() &#123; var num = 22; console.log(num);&#125; fn();console.log(num); 如果自己作用域中有声明这个变量，就用自己的！ (◕ᴗ◕✿)画图演示1234567var num = 11;function fn() &#123; num = 22; console.log(num);&#125; fn();console.log(num); 如果自己作用域中没有声明这个变量，就用外面的（全局作用域） 归纳：自己有就用自己的，自己没有就用外面的！ ヾ(๑╹◡╹)ﾉ” 作用域访问规则练习 (◕ᴗ◕✿)画图演示12345678var num = 22;function fn() &#123; console.log(num); num = 11; console.log(num);&#125;fn();console.log(num); 隐式全局变量 开发中避免出现（一般只会在面试题中提问） 问题： 12num = 10;console.log(num);// 当前作用域中没有声明，但是已经是全局作用域了没有上一级了，此时浏览器会隐式的去把该变量声明成全局变量 一个变量如果从头到尾没有使用var声明，直接赋值，浏览器会默认变成全局变量——》隐式全局变量 (◕ᴗ◕✿)画图演示123456function fn ()&#123; num = 10; console.log( num );&#125;fn();console.log(num); ヾ(๑╹◡╹)ﾉ” 隐式全局变量的小练习1234567var num = 20;function fn() &#123; num = 30;// 这个num是隐式全局变量吗？ console.log(num);&#125;fn();console.log(num); 隐式全局变量开发中避免！！！ ————————预解析 预解析：预先解析代码 在代码开始执行之前，都会把变量和函数的声明进行提升！！——》预解析 可以看做浏览器预先想要知道，有哪些变量和函数~ js代码的执行步骤（两步） 预解析（把变量和函数的声明提升到最前面） 预先解析代码，把所有变量和函数的声明都会提升（浏览器想要预先知道有哪些变量和函数） 再一行一行执行代码 问题： 123console.log(num);// 讲道理此时还没有声明变量，应该会报错var num = 12;console.log(num); 注意点： 所有的变量的声明，都会提升到最顶部，但是不会提升赋值！！！ (◕ᴗ◕✿)画图演示12345// 第一步不是执行代码，而是预解析console.log(num);//----------------------------var num = 12;console.log(num); 所有的函数的声明，都会提升到最顶部，但是不会提升函数的调用 123456// 第一步不是执行代码，而是预解析console.log("我是第一行代码");fn();function fn() &#123; console.log('嘻嘻');&#125; 以下都是错误的写法 如果同时声明了多个同名的变量，只会提升第一个声明，后面的声明会忽略 1234var num = 11;var num = 22;var num = 33;var num = 44 如果同时声明了多个同名的函数，后面的函数声明会覆盖前面的！！（最后只剩一个函数声明） 开发时避免同名！！ 12345678910111213fn();function fn() &#123; console.log('呵呵');&#125;fn();function fn() &#123; console.log('哈哈');&#125;fn();function fn() &#123; console.log('嘻嘻');&#125;fn(); 如果同时声明了同名的变量和函数，函数声明优先！！ 开发中必须避免！！ 123456console.log(a);function a() &#123; console.log('我是函数');&#125;var a;console.log(a) (◕ᴗ◕✿)画图演示 一定要避免这种情况，否则会有bug 123456var a = 11;console.log(a);function a() &#123; console.log('嘿嘿嘿');&#125;a(); ヾ(๑╹◡╹)ﾉ” 小练习1234567891011//1、getCool() 比比谁最帅！！// 1、声明多个cool的函数// 2、不管在哪里调用，结果都是最后一个//2、console.log(a);function a() &#123; console.log("呵呵呵");&#125;var a = 1;console.log(a); 代码规范： 一般先声明，后使用 不要让函数名与变量名同名！！ ヾ(๑╹◡╹)ﾉ” 面试题 一般预解析的题目只在面试中会遇到，实际开发中避免 注意点：每个作用域中都有预解析（局部作用域中也有！） (◕ᴗ◕✿)画图演示12345678//1、 每个作用域中都有预解析——》函数内部也会预解析var num = 10;fn1();function fn1() &#123; console.log(num); var num = 20;&#125;console.log(num); 12345678//2. var a = 18;fn2();function fn2() &#123; var b = 9; console.log(a); console.log(b);&#125; ————————(◕ᴗ◕✿)画图演示123456789101112//3.fn3();console.log(c);console.log(b);console.log(a);function fn3() &#123; a = b = c = 9;// 相当于： a = 9,b = 9,c = 9 // var a = b = c = 9; // 相当于只声明了一个a var a = 9 ; b = 9 ; c = 9; console.log(a); console.log(b); console.log(c);&#125; 定义函数的两种方式 两种方法各有千秋，都有使用的场景 函数声明 12345678function 函数名()&#123; //函数体&#125;//------------------------------function fn() &#123; console.log("呵呵");&#125;fn(); 函数表达式 12345678var 函数名 = function()&#123; //函数体&#125;//------------------------------var fn = function() &#123; console.log("呵呵");&#125;fn(); 区别： 函数声明可以先调用，再声明（因为预解析） 函数表达式必须先声明赋值，再调用（相当于变量赋值，只会提升变量声明，不会提升赋值） 匿名函数 匿名函数：没有名字的函数——》不能直接使用，有两个使用场景 场景一：函数表达式 1234var fn = function ()&#123; console.log('呵呵')；&#125;// 将函数赋值给变量fn，此时函数没有名字 场景二：匿名函数自调用——》自执行——》自己调用自己 函数可以自调用（声明后立马使用），但是直接调用会报错，此时需要用（）把整个函数体包裹起来才行 1234567(function fn()&#123; consolo.log('呵呵');&#125;)();//-----------------------------------(function ()&#123; consolo.log('呵呵');&#125;)(); 注意点：一般规范匿名函数自调用之后需要加上分号 匿名函数自调用的应用（沙箱模式） 在多人同时写代码时，如果都使用的是全局变量，很容易与其他人的全局变量互相影响，这叫做全局变量污染 一般使用沙箱模式（匿名函数自调用）：每个人的代码在单独的作用域中，不会互相影响 例子： 12345678910111213141516171819// 小张写的代码，单独运行没毛病var a = 11;console.log(a);function b() &#123; console.log('bbbb');&#125;b();// 小王写的代码，单独运行没毛病var b = 22;console.log(b);function a() &#123; console.log('aaaa');&#125;a();//---------------------但是如果一起运行，全局变量就会互相影响了（全局变量污染） 解决方法： 只需要让每个人的代码中的变量变成局部变量即可 js中只有函数里面才有局部作用域，只需要那函数包裹起来调用即可 简写就是函数的自调用，但是有名字的函数还是会全局变量污染，所以使用匿名函数自调用 ————————对象为什么学习对象？ 为什么要学习数组：数组可以存储大量的数据，并且数组规范一般储存的是同类型的数据！！ 对象：万物皆对象，在现实生活中，只要能被描述出来的就是对象 思考：如果需要在js中描述出一个人这个对象，怎么做？ 描述人这个对象： 特征：姓名、年龄、性别、身高、体重…… 行为：吃饭、睡觉、敲代码…… 解决方案： 单独使用变量一个个存——》代码麻烦，需要多个变量 1234567891011121314// -------------------特征var name = "张三";var age = 18;var sex = "男";var height = 180;var weight = 150；// -------------------行为var eat = function () &#123; console.log('吃饭');&#125;var sleep = function () &#123; console.log('睡觉');&#125;//-------------------变量太多麻烦 使用数组存——》数组规范一般储存同类型的数据，并且数组中的数据用户不明白分别表示什么意思 12var arr = ['张三',18,'男',180,150];//-----------------------数组一般只存储同类型的数据，并且这样写每一项不明确表示什么含义 如果需要描述现实中的对象，此时就需要通过js中的对象完成！ 对象的基本概念数组： 一组有序的值的集合——》下标有序 对象： 一组无序的键值对的集合——》可以用于描述生活中对象的特征与行为 键值对就是类似于之前css中的样式 格式：键：值——》key：value 创建对象的方法 字面量（用的最多） 123、’abc’、true、undefined、null、[]、{} 12345678910111213141516171819var obj = &#123;&#125;;// 创建一个空对象console.log(obj);//----------------------------var obj = &#123; // ------------特征——》对象的属性 name:"张三", age:18, sex:"男", height:180, weight:150, // ------------行为——》对象的方法（对象中的函数） eat:function ()&#123; console.log('吃饭'); &#125;, sleep:function ()&#123; console.log('睡觉'); &#125;&#125;;console.log(obj); 注意点： 键值对之间以逗号隔开！！！ 对象中的特征叫做对象的属性 对象中的行为（函数）叫做对象的方法 构造函数（用的较少） 123456789101112131415var person = new Object();//创建一个空的对象//------------------------------var person = new Object(&#123; name:"张三", age:18, sex:"男", height:180, weight:150, eat:function ()&#123; console.log('吃饭'); &#125;, sleep:function ()&#123; console.log('睡觉'); &#125;&#125;)]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js基础day03笔记]]></title>
    <url>%2F2020%2F02%2F10%2F1-js%E5%9F%BA%E7%A1%80day03%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标（全天模式） 能够写出九九乘法表案例 能够说出break和continue关键字的作用 能够说出while do while 和for循环的区别 能够说出数组的作用 能够通过索引获取或设置数组中的数据 能够通过for循环遍历数组中的数据并打印 能够求出一组数中的最大值 能够说出冒泡排序的实现思路。。。。。。 理解上课的知识点…… ヾ(๑╹◡╹)ﾉ”双重for循环的练习1234567891011//1 打印9*9的五角星★正方形// 1、在页面中输出一个★// 2、在页面中输出一行9个★// 3、在页面中输出9行★//2 打印9*9的直角三角形---------------------------------------------------------//3 打印9*9乘法表// 1、在页面中输出3 * 4 = 12// 2、打印一个直角三角形// 3、把三角形换成式子 break和continuebreak： 如果循环遇到了break，就立刻结束整个循环，循环结束。执行循环之后的代码 continue： 如果循环遇到了continue，就立刻结束本次循环，继续执行下一次循环（直接到i++的地方）。 例子： 12345678for(var i = 1; i &lt;= 5; i++) &#123; if (i === 3) &#123; break; // 结束整个循环——》执行循环之后的代码 continue; // 结束本次循环——》执行下一次循环 &#125; console.log(i);&#125;console.log('我是循环之后的代码'); ヾ(๑╹◡╹)ﾉ” 思考一下输出结果是什么？123456789for(var i = 1; i &lt;=10; i++) &#123; if(i == 5)&#123; continue; &#125; if(i == 7)&#123; break; &#125; console.log(i);&#125; ヾ(๑╹◡╹)ﾉ” break和continue的练习 只是为了练习break和continue 12345678910111213//1. 求1-100之间不能被7整除的整数的和（用continue）// ——》跳过能被7整除的数，不加//2. 求200-300之间所有的奇数的和（用continue）// ——》跳过所有的偶数，不加//3. 求200-300之间第一个能被7整数的数（break）// 1、打印能被7整除的数// ——》遇到第一个能被7整除的数之后，直接结束循环//4. 求200-300之间前3个能被7整数的数（break）// 1、打印能被7整除的数// ——》打印到第三个（计数）能被7整除的数之后，直接结束循环 ————————循环的小结 for循环：用的最多，适用于明确循环次数的情况 while循环：适用于不明确循环次数情况 do…while循环：适用于无论如何都需要执行一次代码的时候（很少） 数组（Array） 数组：就是有序的值的集合 为什么要学习数组需求： 现在需要存储一个班同学的名字 如果使用简单数据类型存储，一个变量存一个，需要多个变量 管理起来非常的麻烦，两个班呢？多个班呢？当数据量大时，变量多的要上天 12345var name1 = "名字1"；var name2 = "名字2"；var name3 = "名字3"；var name4 = "名字4"；...... 如果使用数组存储，只需要一个变量即可 一个数组中可以存储大量的数据，变量只需要一个，并且之后管理操作也很方便 1var arr = ['名字1','名字2','名字3','名字4','名字5',......] 创建数组方式 字面量（直接量） 从字面上，就能直接看出类型的量，浏览器直接认识 1，true，’abc’，undefined，null——》[]：表示一个数组 1234var arr = []; // 创建了一个空数组（没有数据的数组）var arr = ['张飞','赵云','关羽','刘备','吕布']; // 创建了存了数据的数组var arr = [123];// 创建了一个存了123这个数据的数组console.log(arr); 注意点： 数组中可以存任意类型的数据，但是规范一般存储相同类型的数据 构造函数的方法（了解，一般不用） 函数还没学，先知道写法即可。并且一般不用。 12345var arr = new Array(); // 创建了一个空数组（没有数据的数组）var arr = new Array('张飞','赵云','关羽','刘备','吕布'); // 创建了存了数据的数组//------------------有一个坑var arr = new Array(123);// 创建了一个数组，并且占了123个位置，浪费空间console.log(arr); 数组长度与下标需求： 用一个数组，存储3个人：刘备、关羽、张飞 1var arr = ["刘备","关羽","张飞"]; 数组的长度 : 通过arr.length属性，可以获取数据的长度 类似于字符串长度的属性 12var arr = ["刘备","关羽","张飞"];console.log(arr.length);// 3 数组的下标： 数组中的每一项，都有一个唯一的下标与之对应 也有人把下标叫做索引 ヾ(๑╹◡╹)ﾉ” 数组类似于火车注意点： 数组下标从0开始 数组下标的最大值：arr.length-1 数组的取值与存值 数组中的数据可以通过下标进行取值与赋值 类似于列车长，可以查看每一节车厢里是谁，也可以给车厢里换人坐。 数组的取值： 12345678910// 语法: 数组名[下标]// 1、 如果下标存在, 返回具体的值// 2、 如果下标不存在, 返回 undefinedvar arr = ['刘备', '关羽', '张飞'];console.log(arr[2]);// 有下标，返回具体的值console.log(arr[100]); // 没有这一项, 返回undefinedconsole.log(arr[arr.length]); // 没有这一项，返回undefinedconsole.log(arr[arr.length-1]); // 返回数组中最后一个值 数组的存值（改值）： 123456789// 语法: 数组名[下标] = "新的值";// 1、 如果下标存在, 直接用新的值覆盖（改值）// 2、 如果下标不存在, 会新建一项（存值）var arr = ['刘备', '关羽', '张飞'];arr[0] = '诸葛亮';// 把数组中的 下标0 项覆盖掉arr[1] = '赵云';// 把数组中的 下标1 项覆盖掉arr[100] = '吕布'; // 可以存值，但是一般不会（浪费空间）arr[arr.length] = '曹操';// 在数组的最后添加一项（推荐！！） ————————数组最后添加元素的方法： 为了不开很多空的车厢，一般会在数组的最后添加一项 arr[arr.length] = 值：在数组最后添加一项 随着数组的长度变长，arr.length也在变化，用于比下标多1 arr.push(值)：专门用于给数组的最后添加一项（常用） ヾ(๑╹◡╹)ﾉ” 数组添加元素的练习123//1. 把1-100之间所有的数，放到一个空数组中//2. 把1-100之间所有的奇数，放到一个空数组中//3. 把1-100之间能被3整数的数字，放到一个空数组中 数组的遍历 遍及所有项，从数组的第一项，访问到最后一项 low写法： 12345var arr = ['刘备', '关羽', '张飞', '赵云'];console.log(arr[0]);// 重复的代码console.log(arr[1]);// 重复的代码console.log(arr[2]);// 重复的代码console.log(arr[3]);// 重复的代码 遍历的写法： 注意点：从第一项访问到最后一项 第一项：下标是0 最后一项：arr.length-1 12345678910111213for(var i = 0; i &lt;= arr.length-1; i++) &#123;// 下标从0~arr.length-1 console.log(arr[i])；&#125;// --------------------------可以优化写法for(var i = 0; i &lt; arr.length; i++) &#123; // 下标从0~arr.length-1(因为只是小于号，不能取到arr.length) console.log(arr[i])；&#125;// -----------------------------倒序遍历// 倒序遍历：从最后一项开始，访问到第一项// arr.length-1 0 for ( var i = arr.length-1 ; i &gt;= 0 ; i-- ) &#123; console.log( arr[i] );&#125; 以下作为思考的作业 ヾ(๑╹◡╹)ﾉ”数组遍历的练习11234567891011121314var arr = [298, 1, 3, 4, 6, 2, 23, 88,77,44];//1 求一组数中的所有数的和跟平均值//2 求一组数中的最大值// 1、先假定第一个数是最大的，用变量max存储// 2、拿之后的每一项与max比较，如果发现更大的，此时更新最大值（把max换成这个更大的值）// 3、比较到最后max就是最大值//3 求一组数中的最小值和最小值所在的位置// 位置先假定为下标为0，用变量minIndex存储// 当更新最小值时，同时把minIndex更新即可//4 求一组数中的最大值和最小值以及所在位置// 上面两个合在一起写即可 ————————ヾ(๑╹◡╹)ﾉ”数组遍历的练习2123456789101112131415161718var arr = ["a", "bb","ccc","dddd"];//1.让一个数组倒序保存另一个数组中的每一项// 1、先把第一个数组倒序遍历// 2、把倒序遍历的值存在数组中 newArr.push(arr[i])//2 将字符串数组用|或其他符号分割// 1、遍历数组// 2、把每一项拼接字符串// 3、在拼串的时候，中间加一个|//3 有一个字符串数组，求字符串数组中每项的长度，并把长度的数值存储到新的数组中// 1、打印出字符串数组中，每一项的长度: var str = arr[i];console.log(str.length);// 2、把打印的结果放到新数组中去：newArr.push(str.length);var arr = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9];//4 将数组中值为0的项去掉，将不为0的值存入一个新的数组// 1、打印出数组中有除了0以外的数字（打印非0的数字）// 2、把非0的数字存到新数组中 冒泡排序 冒泡排序法属于算法的范畴，同学们一开始想不到很正常，不要纠结怎么想出来的，因为这都是前人长久的思考不断优化得来的。 关键点在于听懂思路。 排序：让一组没有顺序的数字，经过排列，排成一组有顺序的数字 [3,2,4,1,5,7,9,8,6]——》[1,2,3,4,5,6,7,8,9] ——》从小到大排序（升序） 冒泡：指的是排序的方式，小的在前面，大的在后面 思路：两两比较，让较大的放到后面，一趟下来可以求出一个最大值。 冒泡排序法的铺垫 冒泡排序：两两比较，让大的数排到后面去！！ 交换两个数的值 1234567var num1 = 11;var num2 = 22;var temp = num1; num1 = num2; num2 = temp;console.log(num1);console.log(num2); 让数组中的最大值，跑到最后 遍历数组 让 arr[i] 和 arr[i+1] 比较 让当前元素与后一个比较 如果 arr[i] &gt; arr[i+1]，表示前面的比后面的大，此时交换位置（往后沉） 12345678910111213141516// 2、 让数组中的一个最大值，跑到最后// 1、遍历数组// 2、让 arr[i] 和 arr[i+1] 比较// 3、如果 arr[i] &gt; arr[i+1], 表示前面的比后面的大，此时交换位置var arr = [7, 6, 5, 4, 3, 2, 1];for (var i = 0; i &lt; arr.length - 1; i++) &#123; // 让 arr[i] 和 arr[i+1] 比较 if (arr[i] &gt; arr[i + 1]) &#123; // 交换位置 var temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; &#125;&#125;console.log(arr); 冒泡排序初级版本 找最大值的代码多执行几遍（0~arr.length-1）即可 双重for循环 123456789101112131415var arr = [7, 6, 5, 4, 3, 2, 1];// 外层for控制趟数, 7个数, 只需要比6趟即可for (var j = 0; j &lt; arr.length - 1; j++) &#123; // 一趟下来, 比出一个最大值, 7个数, 两两比较, 比6次即可 for (var i = 0; i &lt; arr.length - 1; i++) &#123; // 让 arr[i] 和 arr[i+1] 比较 if (arr[i] &gt; arr[i + 1]) &#123; // 交换位置 var temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; &#125; &#125;&#125;console.log(arr); ————————冒泡排序的中级版本 优化点：每一趟比较之后，都可以比上一趟少比较一次 123456789101112var arr = [7, 6, 5, 4, 3, 2, 1];for (var j = 0; j &lt; arr.length - 1; j++) &#123; // 每趟下来, 比上一趟少一次，累计每一趟可以少比较j次 for (var i = 0; i &lt; arr.length - 1 - j; i++) &#123; if (arr[i] &gt; arr[i + 1]) &#123; var temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; &#125; &#125;&#125;console.log(arr); 假设成立法： 对于某一些问题来说，可以先假设结果为多少，然后找打脸的情况 1234567// 1. 需求: 判断这个数组是否全是偶数// 思路：先假设数组中全是偶数true，如果发现打脸的（有奇数），那么假设错误为false，就不全是偶数var arr = [2, 4, 6, 8, 10, 1 ];// 2. 需求: 判断这个数组, 是否已经从小到大排好的// 思路：先假设已经排好了true，如果一趟比较下来进行了交换（打脸了，还没比好），此时知道还没比好var arr = [2, 4, 6, 8, 10]; 冒泡排序法的高级版本 优化点：以下特殊情况 如果数组本身排好序的，那么不需要排很多次 如果数组第一趟下来就排好了，后面的不需要排了 假设成立法：假设这一趟已经排好了（那么一趟下来不会交换），设置变量flag=true，当交换的时候设置flag=false。 如果真的排好了，一趟下来flag还是true，此时结束循环break 如果还没排好，一趟下来flag会改成false，此时不执行break 12345678910111213141516var arr = [7, 6, 5, 4, 3, 2, 1];for (var j = 0; j &lt; arr.length - 1; j++) &#123; var flag = true;// 假设这一趟已经排好的，true for (var i = 0; i &lt; arr.length - 1 - j; i++) &#123; if (arr[i] &gt; arr[i + 1]) &#123; var temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; flag = false; // 只要交换位置，表示这一趟还没排好，下一次继续 &#125; &#125; if(flag) &#123; break;// 如果flag在这一趟下来没有改变，还是true，说明已经排好，此时结束循环 &#125;&#125;console.log(arr); 函数基础知识为什么要学习函数 在写代码的时候，有一些常用的代码需要书写多次，如果直接复制粘贴的话，会造成大量的冗余代码。 此时可以利用函数，将一段重复的代码进行封装（放到一块） 12345678910111213// 第一天, 讲一遍故事console.log('从前有座山');console.log('山里有座庙');console.log('庙里有个老和尚');console.log('老和尚给小和尚讲故事');// 第二天, 讲一遍故事console.log('从前有座山');console.log('山里有座庙');console.log('庙里有个老和尚');console.log('老和尚给小和尚讲故事');......重复的代码（冗余） 函数的好处：函数可以一次声明，多次调用！！ ————————函数的声明与调用函数的声明语法： 123function 函数名()&#123; 函数体（需要重复的代码）&#125; 函数调用的语法： 1函数名(); 例子 123456789// 声明一个讲故事的函数function tellStory() &#123; console.log('从前有座山'); console.log('山里有座庙'); console.log('庙里有个老和尚'); console.log('老和尚再给小尼姑讲故事');&#125;// 调用讲故事的函数tellStory()； 特点： 函数可以把一段重复的代码进行封装 函数一次声明，可以多次调用 类似于录音机录了一次之后，可以播放很多次 函数只声明，函数体是不会执行的 类似于录音机有音乐，不会自己播放 ヾ(๑╹◡╹)ﾉ” 函数声明与调用练习123// 1. 封装一个打招呼的函数// 2. 封装一个函数，计算两个数的和// 3. 封装一个函数，计算1-100之间所有数的和]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js基础day02笔记]]></title>
    <url>%2F2020%2F02%2F10%2F1-js%E5%9F%BA%E7%A1%80day02%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标（全天模式） 能够把其它转换成Number类型/String类型 能够使用if语句实现求两个数最大值 能够写出数字补0案例 能够使用switch完成查询水果案例 能够说出switch和if else if的区别 能够使用循环语句重复执行一段代码 能够使用断点调试代码。。。。。。 理解上课的知识点…… 比较运算符（关系运算符） &lt;、 &lt;= 、&gt; 、&gt;=、==、!=、=== 、!== 比较运算符的结果是布尔类型（true/false） 1234567891011121314151617181920// &gt; 、&gt;= 、&lt; 、&lt;= 比较大小、结果（返回的）为布尔值（简单的过一遍）var a = 5;var b = 6;console.log(a &gt; b);//大于console.log(a &lt; b);//小于console.log(a &gt;= b);//大于等于 =》 大于或者等于 都是trueconsole.log(a &lt;= b);//小于等于// ==（等于）、 !=（不等于）（需要说明）// 比较的只是内容，不比较类型console.log( 12 == 12 );// 是否相等 trueconsole.log( 12 == '12' );// 是否相等 trueconsole.log( 12 != '12' );// 是否不相等 falseconsole.log( 12 != 23 );// 是否不等于 true// ===（全等于）、!==（不全等）（需要区别）// 比较：内容 + 类型console.log( 12 === 12);// true 内容和类型都相等console.log( 12 === '12');// false 内容相等，但是类型不等console.log( 12 !== '12');// true 内容相等，类型不等，不全等 总结： = 赋值 把一个值赋值给变量 == 相等 只比较内容 （只要内容相等就是true）。12 == &#39;12&#39; =&gt; true === 全等 比较内容和类型（必须内容和类型都相等才是true）。12 === &#39;12&#39; =&gt; false 运算符优先级（了解） 运算符之间存在优先级关系（先算哪个呢？） ()的优先级最高 一元运算符 （++、--、!） 算术运算符 （先 *、/、%, 后 +、- ） 比较运算符(先 &gt;、&lt;、 &gt;= 、&lt;=， 后== 、=== 、!= 、!==) 逻辑运算符（先 &amp;&amp; 后 || ） 1234// 记忆方法：1、() 优先级最高 。&amp;&amp; || 优先级最低2、一元也高，3、中间是算术和比较。先算出来再比较 不用死记，在开发过程中要先算的直接使用()增加优先级即可！！ ヾ(๑╹◡╹)ﾉ”猜猜看12var result = ((4 &gt;= 6) || ("天" != "地")) &amp;&amp; !(((12 * 2) == 144) &amp;&amp; true);console.log(result); 表达式的介绍（了解）表达式：就是可以由数字、运算符、变量等组成的有结果的式子 比如：1 + 1 、a++、++num、a、b、’abc’、123……，一般可以直接打印出结果的就是一个表达式 表达式的特点：表达式最终都会有一个结果，返回给我们。 类型转换为什么要进行类型转换 在实际的开发过程中，有时候需要进行不同数据类型之间的转换 123// 比如输入年龄，计算明年的年龄，演示使用输入框获取数据，此时获取的数据是字符串，如果直接相加是拼接 var age = prompt();// 此时age是一个字符串 console.log( age + 1 );// + 两边中有一个是字符串，所以是字符串的拼接，但是真正需要实现的是加法运算 转换成数字类型 转换成number类型 Number（值） 12var str = '300';// str 是字符串 字符串打印是黑色console.log( Number(str) );// 数字类型打印是蓝色 parseInt（值） 把数据转换成数字类型（只能是整数） 12345var str = '300';console.log( parseInt(str) );// 300// -----------------------------------只能转换出整数部分，从小数点开始不转换var str = '3.1415926';console.log( parseInt(str) );// 3 parseFloat（值） 把数据转换成数字类型（可以是浮点数） 12345var str = '300';console.log( parseFloat(str) );// 300// -----------------------------------可以转换成小数var str = '3.1415926';console.log( parseFloatt(str) );// 3.1415926 特殊用法： parseInt（）和parseFloat（）可以获取字符串开头的数字 1234// 之后可能会需要计算样式属性值，此时可以通过以上方法提取开头的数字var str = '100px';console.log(parseInt(str));console.log(parseFloat(str)); 进行运算 算术运算符中除了+之外，其他元素运算符只有运算的功能，都会转化成数字类型 所以只需要进行不改变值的计算即可 1234var str = '600';console.log(str - 0);console.log(str * 1);console.log(str / 1); 正号（用的最多） 12var str = '600';console.log( +str); 转换成字符串类型 转换成字符串，手动加””即可，但是项目中需要通过js来控制 String（值） 12var num = 100;console.log(String(num));// 字符串的100 值.toString（） 12var num = 100;console.log( num.toString() );// 字符串的100 拼接字符串 123var num = 100;console.log( num + 'abc' );// 字符串 100abcconsole.log( num + '' );// 字符串的 100 ————————转换成布尔类型（boolean） 所有的值都可以转换成布尔类型 Boolean（值） 12console.log( Boolean(123) );console.log( Boolean('123') ); 转化布尔类型的规则：只有 0、 &quot;&quot;、 undefined、null、false、 NaN、这6个值会转换成false，其他都是true。 ヾ(๑╹◡╹)ﾉ” 容易错的几个1234console.log(Boolean(false));console.log(Boolean("false"));console.log(Boolean(0));console.log(Boolean("0")); !! 非非 取反一次可以转化成布尔值，但是结果不对，所以需要取反两次保证值一样。 123console.log( Boolean(3));console.log( !3 );console.log( !!3 ); NaN（了解） NaN：NaN：not a number 在js中，如果把无法用数字表示的值转换为数字类型，此时浏览器不会报错，会用NaN表示。 如果代码中出现了NaN，表示代码中有问题，将不能转换为数字的数据转化为数字了！ 12var str = 'abc';console.log( +str );// NaN 注意点： NaN的类型是number类型，表示一个非数字 NaN不等于任何值，包括它自己（六亲不认） 流程控制 程序的三种基本结构 顺序结构 从上往下执行的代码就是顺序结构 程序默认就是由上往下一行一行的顺序执行的 123456console.log( '哈哈1' );console.log( '哈哈2' );console.log( '哈哈3' );console.log( '哈哈4' );console.log( '哈哈5' );console.log( '哈哈6' ); 分支结构 分支结构：也叫选择结构，根据不同的情况，执行对应代码 比如路过一家烤鸭店~ 循环结构 循环结构：重复做一件事情 比如男男女女的事情~ 分支结构if语句 单独的if语句 1234567891011// 语法if (条件) &#123; // 只有当满足条件时（true），才执行代码 代码；&#125;//--------------------------------------------------// 如果成年了，就吃鸡了var age = 10;if (age &gt;= 18) &#123; console.log('今晚吃鸡，大吉大利')&#125; if…else语句 12345678910111213141516// 语法if (条件) &#123; // 当满足条件1时，执行的代码1 代码1；&#125; else &#123; // 当不满足条件1时，执行的代码2（否则） 代码2；&#125;//---------------------------------------------------// 如果是成年人去吃鸡，否则喜洋洋var age = 10;if (age &gt;= 18) &#123; console.log('快去吃鸡');&#125;else &#123; console.log('回家喜洋洋');&#125; if…else if…else语句 12345678910111213141516171819202122232425262728// 语法if (条件1) &#123; // 当条件1为 true（满足条件1） 时执行的代码1 代码1;&#125;else if (条件2)&#123; // 当条件2 为true (满足条件2) 时执行的代码2 代码2;&#125;....else &#123; // 当条件1和 条件2 都不为true （上面所有条件都不满足）时执行的代码3 代码3；&#125;//--------------------------------------------------// 如果是0~18岁，回家喜洋洋// 如果是18~80岁，吃鸡// 如果是80以上，广场舞等你var age = 10;if(age &lt; 18) &#123; console.log("回家喜洋洋");&#125;else if( age &gt;= 18)&#123; console.log("吃鸡");&#125;else &#123; console.log("广场舞等你");&#125; ————————ヾ(๑╹◡╹)ﾉ” if语句小练习：12345678910//1、判断一个数是偶数还是奇数// 2、求两个数中的最大值// 3、素质教育，把百分制分数转换成ABCDE // A: 90-100// B: 80-89// C: 70-79// D: 60-69 // E: 0-59 三元运算符 用于处理简单的判断 1234// 用法// var 最终结果 = 判断条件 ? 表达式1 ： 表达式2;// 如果条件满足（true）， 最终结果就是表达式1的结果， // 如果条件不满足（false），最终结果就是表达式2的结果 ヾ(๑╹◡╹)ﾉ” 小练习 可以先使用if…else完成，再改写成三元表达式 123// 1、求两个数的最小值// 2、求三个数的最小值// 3、数字补0案例：用户输入一个数字，如果数字小于10，则在前面补0（比如：01/02/03...得到的是字符串类型的数据），如果数字大于10，则不需要补（比如：20/30/40...） switch语句 switch..case可以用来判断具体值的情况 语法： 12345678910111213141516171819/* 如果表达式的结果等于值1, 执行语句1,如果表达式的结果等于值2, 执行语句2....如果都不满足, 执行default默认语句注意：break会结束整个switch, 跳出整个switch, 接着往下执行*/switch (表达式) &#123; case 值1: 语句1; break; case 值2: 语句2; break; … default: 默认语句; break;&#125; 需求： 1// 请输入一个数字 0-6 之间, 0表示周日, 1表示周1, 2表示周2 ....在输入框中输入，在控制台中打印结果 注意点： switch语句进行的是全等比较，值和类型都相同才满足条件（10和’10’不同） 如果break省略了，代码会继续执行下一个case。 ————————ヾ(๑╹◡╹)ﾉ” switch测试题1234567891011var num = "10";switch (num) &#123; case 10: console.log("10"); case 20: console.log("20"); case 30: console.log("30"); default: console.log("啦啦啦");&#125; ヾ(๑╹◡╹)ﾉ” switch小练习1// 查询水果案例：用户在输入框中输入一个水果，如果有该水果就弹出价格，如果没有该水果就弹出"没有此水果" 使用场景 if…else适合：范围性的判断（条件是一个范围） switch适合：具体值的判断（条件为是否是一个具体的值） 三元运算符：可以改写简单的if…else语句 ヾ(๑╹◡╹)ﾉ” 作业1234567891011121314151617//练习1：土豪的儿子, 输入ABCDE //如果考了A： 买玛莎拉蒂 //如果考了B： 买宝马 //如果考了C： 买三轮 //如果考了D： 买摩拜自行车 //如果考了E： 断绝父子关系 //如果是其他值，提示代码有bug//练习2： 买手机，输入自己的工资 //如果超过30000: 买苹果手机 //如果10000-30000： 买vivo手机 //如果5000-10000 ： 买魅族手机 //如果低于5000 ： 买个锤子//练习3： 输入自己的银行卡金额 //如果超过10000 : 高富帅 //如果不超过 ：穷矮丑 循环语句 在javascript中，循环语句有三种while、do..while、for循环。 需求： 需要打印1~5怎么做？ 很简单，写5个console.log即可 12345console.log(1);console.log(2);console.log(3);console.log(4);console.log(5); 那么打印1~100还能这么写吗？ 针对于需要重复执行的代码，此时就需要使用循环语句完成 while循环 先问可不可以，同意了再执行代码…… 语法： 12345678910while(循环条件)&#123; 循环体；// 重复执行的代码&#125;/* 1、先判断条件，如果成立（true），执行循环体2、再判断条件，如果成立（true），执行循环体......当条件不成立（false）时，此时跳出循环（执行循环之后的代码）*/ ヾ(๑╹◡╹)ﾉ” 通过while循环，打印 1~5 ，再打印 1~100，再求和？123456var i = 1;// 初始化语句while (i &lt;= 5) &#123; console.log(i);// 循环体：重复执行的代码 i++;// 自增&#125;console.log('我是循环体之后的代码'); 注意点： 循环一定要能结束（否则就是死循环）——》在循环体中，需要让条件中的变量能变化！！！ ————————ヾ(๑╹◡╹)ﾉ” while的练习1234//1. 计算1~100之间所有偶数的和// 1、先打印1~100// 2、打印1~100所有的偶数// 3、累加 1//2. 循环表白案例：弹出一个确认框confirm，问是否爱我，如果选择不，就一直问，直到是为止 1//3. 循环登录案例：弹出一个输入框prompt，只有当用户输入admin的时候才能登录成功，如果不正确，就一直弹框 do..while循环 do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。 区别在于：先执行一遍，再问可不可以，同意了在执行一遍…… 语法： 1234567891011do&#123; 循环体；// 重复执行的代码&#125;while(循环条件);/* 1、先执行一遍循环体2、再判断条件，如果成立（true），执行循环体3、再判断条件，如果成立（true），执行循环体......当条件不成立（false）时，此时跳出循环（执行循环之后的代码）*/ ヾ(๑╹◡╹)ﾉ” 通过do…while循环，打印 1~5 ，再打印 1~100 先使用while语句写出来，再通过do…while改写一下 12345var i = 1;// 初始化语句do&#123; console.log(i);// 循环体 i++;//自增&#125;while(i &lt;= 5); 注意点： 区别 while语句：先判断，如果成立，再执行循环体…… 如果条件开始就不成立，一次都不会执行 do…while语句：先执行循环体，再判断，如果成立，再执行循环体…… 如果条件开始就不成立，也会执行一次 while用的场景较多，do…while很少会用到，但是需要知道区别。 ヾ(๑╹◡╹)ﾉ” do…while的练习1234//1. 计算1~100之间所有偶数的和// 1、先打印1~100// 2、打印1~100所有的偶数// 3、累加 课后自己试着把之前的while连写改写成do…while看看可不可以 for循环（重点） 写while循环的经常会忘记自增，for循环其实是while循环演化过来的，语法更加的简洁明了，使用非常的广泛。 语法： 12345678910for(初始化语句;判断条件;自增或自减)&#123; 循环体&#125;/*1、先执行初始化语句2、再判断条件，如果成立（true）执行循环体，再自增或自减3、再判断条件，如果成立（true），执行循环体，再自增或自减......当条件不成立时（false），跳出循环*/ 顺序： 语句 初始化语句 判断条件 自增或者自减 循环体 序号表示顺序： 1243 243 243 ….. 初始化语句只执行一次，之后就是243一直循环 ヾ(๑╹◡╹)ﾉ” 先使用while语句完成打印 1~5 ，再改写成for循环，再打印 1~1001234var i = 0;for(var i = 1; i &lt;= 5; i++)&#123; console.log(i);&#125; ————————断点调试 对于以上for循环的执行顺序，可以通过断点调试查看代码执行的顺序 先简单了解，之后会不断拓展用法 ヾ(๑╹◡╹)ﾉ” 使用for循环计算1~100所有数的和12345var sum = 0;for(var i = 1;i &lt;= 100;i++) &#123; sum += i;&#125;console.log(sum); 接下来通过断点调试查看以上代码的执行顺序 操作： 设置断点 打开控制台，查看sources窗口，点开对应的文件 在对应的行号上点一下（高亮表示一个断点），此时刷新页面，浏览器会自动在断点这一行停止执行。 打上断点好比告诉浏览器代码执行到这一行，停下来容我看看 如何查看 watch窗口：在右侧+中写变量名，可以监视变量值的变化 watch中会实时展示该变量当前的值是多少 往下执行一步（第二个按钮）：可以让代码往下执行一步 执行到下一个断点（第一个按钮）：可以让代码瞬间执行到下一个断点的位置停下 调试完断点之后记得再点击一下删除掉，否则重新刷新又会在断点处停下。 ヾ(๑╹◡╹)ﾉ” for循环练习1123//1 求1-100之间所有数的和、平均值(和除以个数即可)//2 求1-100之间所有数的乘积//3 计算1-100之间能3整除的数的和 ヾ(๑╹◡╹)ﾉ” for循环练习212//1 计算1-100之间不能被7整除的数的和//2 同时求1-100之间所有偶数的和，奇数的和 —————————]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js基础day01笔记]]></title>
    <url>%2F2020%2F02%2F10%2F1-js%E5%9F%BA%E7%A1%80day01%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标（全天模式） 能说出JavaScript三部分组成 能够使用变量来存储数据 能够说出变量的命名规范 能够写出交换两个变量的值 能够说出JavaScript中的基本数据类型 能说出前置自增和后置自增运算符的区别 能够使用一元运算符实现自身加1操作。。。。。。。。 理解上课的知识点…… JavaScript基本介绍（了解）我们最开始认识的JSweb标准的三部分（网页的三大部分） HTML：控制页面的结构 CSS：控制页面的样式 JavaScript：控制网页的行为（动态效果） JavaScript的作用 在学习JS之前，首先要明白JS的作用是什么？ 远古时期：表单校验 现在：无所不能 最初的JavaScript：表单校验 用于判断表单的输入是否正确（表单校验） 现在的JavaScript：无所不能 前端的本职工作：网页中完成各种各样的特效 后端的事情也能做：服务端开发（nodejs） 前后端交互：异步与服务器交互（AJAX） 命令行工具开发（nodejs） 桌面程序（Electron） app开发（ReatNative） 控制硬件——物联网（Ruff） 游戏开发（cavans） 等等…… 演示：Canvas游戏 美女相册 什么是JavaScript（知道） JavaScript是一种运行在 浏览器 的 脚本语言 ，现在也可以运行在服务器端 不同于HTML和CSS，JavaScript是一门编程语言，因此比HTML和CSS会更加复杂一下，学习的时间也会更长。 JavaScript历史（了解）开始阶段 1995年，Netscape(网景)公司的Brendan Eich(布兰登·艾奇)（伊利诺伊大学香槟分校），花了10天时间为Netscape Navigator2.0开发了一个名为LiveScript的脚本程序，目的是在浏览器中执行预检测程序（表单校验） 发展阶段 后来Netscape在与Sun合作之后将其改名为JavaScript。目的是为了利用 Java 这个因特网时髦词汇 微软发布了 IE 3.0 并搭载了一个 JavaScript 的克隆版，叫做 JScript（这样命名是为了避免与 Netscape 潜在的许可纠纷） 三足鼎立阶段 CEnvi的scriptEase Netscape的JavaScript IE的JScript 标准化阶段 1997年，ECMA（欧洲计算机制造商协会）邀请了Netscape、Sun、微软、Borland等公司的一些程序员组成了TC39，最终锤炼出来了ECMA-262，该标准定义了一门全新的脚本语言，名为ECMAScript。 JavaScript的组成 (记忆) JavaScript = ECMAScript + DOM + BOM ECMAScript（JavaScript的核心）：ECMAScript是一套标准，规范了语言的基本语法。 DOM（Document Object Model）：一套操作网页元素的方法 BOM（Browser Object Model）：一套操作浏览器功能的方法 JavaScript入门JavaScript书写位置 css需要写在style标签中，而js需要写在script标签中 写在script标签中 123&lt;script&gt; alert('hello world');&lt;/script&gt; 写在一个单独的.js文件中，通过script的src属性引入即可 1&lt;script src="demo.js"&gt;&lt;/script&gt; 注意点： script标签可以放在很多地方，但是我们一般写在body标签内容的最下面 如果给script标签上有src属性，里面的代码会直接忽略 注释 注释的作用就是：代码中可以看到，但是页面中不执行。注释仅仅起到一个提示的作用。 单行注释 123// 这是单行注释， 单行注释只能写一行代码// 快捷键： ctrl + / // 注释的内容 多行注释 12345/* 这是多行注释，在多行注释中可以换行 快捷键：alt + shift + a*//* 注释的内容 */ 在大家练习的时候，就养成一个喜欢写注释的好习惯！ ————————5种输出语句 alert ： 弹框 12//alert会弹出一个：弹框/警告框/提示框/弹窗alert("hello world"); confirm ： 确认框 12//confirm弹出一个确定框confirm("偷电瓶车养你好不？"); prompt ： 输入框 12//prompt：弹出一个输入框，可以输入值prompt("请输入谁是最靓的仔！"); document.write ： 网页中写入内容 123//可以识别标签document.write("hello world");document.write("&lt;h1&gt;我是一个h1标签&lt;/h1&gt;"); 控制台输出 也叫做控制台打印数据 12//打开调试工具，选择Console选项（控制台），在console中可以看到打印的信息console.log("hello word"); 注意点： alert、comfirm、prompt 三个用户体验不好，工作中几乎不用，但是在学习的时候会用到。 console.log经常用来打印数据，项目调试的时候非常有用！！ 变量 变量：可以变化的量（相当于一个储存数据的容器） 作用 ： 存储数据 在使用变量之前需要先声明，才能使用变量。（相当于先做出一个容器，才能装东西） 声明 ：用 var（哇！）来声明 比如存储用户的年龄~年龄是不断变化的，可以使用变量存储 变量使用的几种形式（认识即可） 规范：使用变量前要求声明 并且：初学者在写js一行语句写完之后，记得加上分号（规范），虽然不加分号也可以。 先声明，后赋值 123var age; // 声明一个变量 nameage = 18; // 一个等号表示赋值（把等号后面的赋值给前面的！）console.log(age); 同时声明和赋值 12var age2 = 20;console.log(age2); 同时声明多个变量并赋值 用的不多 ，其实只是省略了一个var。 12345// ， =&gt; 并列var age3 = 30，age4= 40;// 相当于var age3 = 30;var age4 = 40; 直接声明变量，不赋值 变量的默认值是undefined 12var age5;console.log(age5);// undefined =》 表示只声明，没有赋值 不声明变量，直接赋值 虽然浏览器可以识别，但是不推荐，这种写法之后会出现问题！！ 123// 不推荐 ，不符合规范age6 = 60;console.log( age6 ); 不声明变量，也不赋值变量，直接使用 会报错！！！ 12 // age7 is not defined 表示是没有定义（说白了就是没有声明和赋值直接使用）console.log(age7); 注意点： js代码一旦报错了，后面的代码就不再执行了 变量需要声明之后，再使用，养成一个良好的编程习惯（规范）。 变量的命名规则和规范命名规则（法律：必须遵守！！不遵守会报错！！） 由数字、字母、_ 、$、组成 ，并且不能以数字开头 下列变量名是否符合规则? 1234567891011a 1age1818age2bname$name_sex&amp;sextheworlda b 区分大小写（大写和小写表示两个不同的变量） 不能是关键字或保留字（不用专门记忆，随着学习的深入不断会使用到） js中和语法相关的单词，不能作为变量名 关键字：现在版本中语法相关的单词 保留字：未来版本中语法相关的单词 命名规范（道德：建议遵守，不遵守也不会报错） 变量名要有意义 遵守驼峰命名法。 从第二个单词开始首字母大写！ 为了可读性更好 比如：userName、userAge ————————ヾ(๑╹◡╹)ﾉ”赋值的练习12345678910111213// 1. var a = 10; a = 20;console.log( a );// ??// 2.var a = 20;var b = a; // 把a的值赋值给bconsole.log( b );// ?? // 3.var a = 10;var a = 20; // 一个变量多次声明，只有第一次的声明生效！第二个声明相当于没写，但是赋值有效！！console.log( a );// ?? ヾ(๑╹◡╹)ﾉ” 交换变量练习需求： 12345var a = 10;var b = 20;//要求：console.log( a ); // 20console.log( b ); // 10 方法： 使用临时变量、交换两个变量的值 （必须掌握！！记忆） 1234 // a b tempvar temp = a; // 10 20 10 a = b; // 20 20 10 b = temp; // 20 10 10 数据类型 数据可以有多种类型，比如可以是数字（100，234……），也可以是一个文本（’棠哥’ 、’棠哥真帅！’，’小姐姐真漂亮’）、等等……. 我们需要学习数据类型，之后可以轻松的通过js操作不同的数据。 简单数据类型： 数字类型：number 字符串类型：string 布尔类型：boolean undefined：声明未赋值 null：空类型 复杂数据类型： 数组：array 函数：function 对象：object 数字类型（number） 所有数字都是数字类型 整数12var num = 10;var num = 200; 进制(拓展了解) 在javascript中表示一个数字，除了有我们常用的十进制11， 22，33等，还可以使用八进制、十六进制表示等。 十进制 （0~9 逢十进一） 123//我们最常用的进制，逢10进1var num = 10;var num = 200; 八进制（0~7 逢八进一） 123// 0开头的数字（0只是一个标识），逢8进1var num1 = 07;var num2 = 012; 十六进制（0~9，a,b,c,d,e,f 逢十六进一） 123// 0x开头的数字，逢16进1， 数字范围1-9A-Fvar num = 0xA;// 10var num = 0x12;//1*16 + 2 = 18 tips ： 计算机只认识二进制，所有的代码最终都会转换成二进制数据 浮点数（小数） 浮点数就是小数 浮点数形式1var num = 0.1; 科学计数法（了解）123456//e 10的多少次方 前面得有数字//e+4 10^4//e-4 10^-4//当一次数字很大的时候，可以用科学计数法来表示var num = 1e+4; //1乘以10的4次方var num = 1e-4;//1乘以10的-4次方 浮点数精度丢失问题（了解） 尽量不要使用小数进行比较 计算机在计算小数时，有时计算会不准确。 123//在进行浮点数运算的时候，可能会出现精度丢失的问题0.1 + 0.2 = 0.30000000000000004;// 特殊情况//尽量少用浮点数进行运算，不要让浮点数进行比较。 ————————字符串类型（string） 使用双引号 &quot; 或者 &#39; 包裹起来的字符 字符串的格式123//双引号和单引号必须成对出现 以单引号开始到单引号结束都为字符串/以双引号开始到双引号结束都为字符串var str = 'hello world';var str = "hello world"; 字符串长度 每一个字符串都有一个length属性，表示字符串长度（字符的个数） 12var str = "akdjflksjdflk";console.log(str.length); 转义字符 1、如果要打印：好看的’外表’千篇一律 2、如果要打印：有趣的”灵魂”万里挑一 3、如果要打印：好看的’外表’千篇一律，有趣的”灵魂”万里挑一 怎么打印呢？？ 12345// 单引号和双引号可以互相嵌套，但是不能嵌套自己// 如果需要打印单引号和双引号，可以使用转义符// ' =&gt; \'// " =&gt; \"console.log('你是喜欢\'好看\'的人，还是\"有趣\"的人'); 代码 输出 \&#39; 单引号 \&quot; 双引号 \\ 反斜杠 \&amp; 和号 \n 换行符 \r 回车符 \t 制表符 \b 退格符 \f 换页符 字符串拼接（拼串） 字符串类型可以通过 + 进行拼接 比如： 12var str = 'hello' + 'world';console.log(str);// helloworld +号的规则： 如果两边只要有一个是字符串类型，就是拼接的功能 如果两边都是数字类型，此时就是加法运算 ヾ(๑╹◡╹)ﾉ”小练习12345// 下列哪一个选项可以打印出：我是棠哥var nickname = '棠哥';// A、console.log ( '我是' + 'nickname' );// B、console.log ( '我是nickname' );// C、console.log ( '我是' + nickname ); 布尔类型（boolean） 布尔类型表示真或者假，只有两个值！！ true：真、对的、成立 false：假、错的，不成立 12console.log( 3 &gt; 2 );// true =&gt; 表示真/成立console.log( 3 &lt; 2 );// false =&gt; 表示假/不成立 注意点： 写法上区分大小写：不要写成True或者是False ‘true’ 和 true是两个东西，带引号的是字符串！！ undefined（声明未赋值） 非正常值：一个变量只声明，未赋值。不符合规范 12var num;console.log( num );// undefined 表示变量声明当未赋值 null 非正常值：一般出现于获取页面元素未获取到的情况，web API阶段才会遇到 123// 在web api 阶段才会遇到这种情况！先有印象var div = document.getElementById('id');console.log( div ); 如何查看数据的类型（了解） 最方便的是通过数据的颜色判断 Number类型的数据偏向蓝色 String类型的数据是黑色 Boolean类型的数据偏向紫红色 Undefined的数据颜色是灰色 Null的数据颜色是灰色 通过typeof来查看数据的类型 123456789101112var num = 20 ;// numbervar str = 'abc';// stringvar bool = true;// booleanvar un = undefined;// undefinedvar nu = null;// object// 可以通过typeof来查看数据的类型console.log( typeof num );// numberconsole.log( typeof str );// stringconsole.log( typeof bool );// booleanconsole.log( typeof un );// undefinedconsole.log( typeof nu );// object (特殊情况，记忆即可) 字面量赋值与变量赋值（了解） 字面量（直接量）： 值是固定不变的，浏览器可以直接识别的量 简单数据类型比较简单，浏览器可以直接认识，都属于字面量（直接量） 123456// 不需要打印直接一眼就能看出来是什么类型的数据，就是字面量console.log(123);console.log("字符串");console.log(true);console.log(undefined);console.log(null); 字面量赋值与变量赋值 1234// 字面量赋值（直接量赋值）var num = 123；// 直接把具体的值赋值给num变量// 变量赋值 var age = num； // 通过num这个变量，把num变量的值给age变量 注意点： 打印字符串务必注意字符串是用引号包裹起来的，没有用引号包裹起来的文本会被当做变量！！！ 一下结果会怎样？？ 123// 刚刚开始很容易犯错的点：想打印一个字符串，但是忘记写分号，最后打印成一个变量了。console.log("abc");console.log(abc); ————————运算符（操作符） 变量用于存储数据，开发中我们需要通过操作符来操作这些数据 算术运算符 一般用于数学计算 + 、 - 、* 、/ 和数学一样，简单过一遍 1234console.log( 10 + 2 );console.log( 10 - 2 );console.log( 10 * 2 );console.log( 10 / 2 ); % 数学中的求余数 12345678console.log( 10 % 2 );// 10除以2余0console.log( 6 % 2 )console.log( 9 % 2 ); // 7除以2余1console.log( 7 % 2 );// 总结：// 1、 偶数 =》 % 2 == 0// 2、 奇数 =》 % 2 == 1 注意点： + 有两个功能： 拼接字符串：当两边只要有一个是字符串时，此时就是拼串 运算功能：当两边都是数字类型时，此时就是加法运算 - 、* 、/ 、%（求余） 只有运算功能，不管两边是不是数字，都是全当做数字进行运算 1234console.log(1 + '1'); // 11console.log(1 + 1); // 2console.log(2 / '1'); // 2console.log('3' * '3');// 9 ヾ(๑╹◡╹)ﾉ”快速说出以下的结果1234567console.log(123 + 123);console.log("123" + 123);console.log(123 - 123);console.log(123 - "123");console.log(12 * "12");console.log(12 / 12);console.log(10 % 2); 赋值运算符 赋值运算符有：=、 +=、 -=、 *=、 /=、 %= 1234567891011// 赋值，把后面的值赋值给前面的变量var num = 100;// +=相当于简写形式num = num + 10；num += 10;num -= 10;// num = num - 10num *= 10;// num = num * 10num /= 10;// num = num / 10num %= 10;// num = num % 10 一元运算符 一元运算符：只有一个操作数的运算符，比如：num++ 二元运算符：有两个操作数的运算符，比如 ：num1 + num2， 自增运算符（++） 先自增：++num 后自增：num++ 相同点： 代码执行完，数值都会+1 123456var num = 10;// num = num + 1;// num += 1;// num++; ++num;console.log( num );// 11 不同点： 先自增：++a ——》+号在前，表示先+1，后返回值 后自增：a++ ——》+号在后，表示先返回值，再+1 12345var num = 6;console.log( ++num ）;// age == 7 先+1，再返回值------------------------------------------------------var num = 6;console.log( num++ ）// age == 6 先返回值，再+1 自减运算符（–） 先自减：–num 后自减：num– 相同点： 代码执行完，数值都会-1 不同点： 先自减：–a ——》-号在前，表示先-1，后返回值 后自减：a– ——》-号在后，表示先返回值，再-1 ヾ(๑╹◡╹)ﾉ”小练习：123456789101112131415161718192021//1.打印结果var num = 5; console.log( num++ ); console.log( ++num ); //2. 打印结果var a = 1;var b = ++a + ++a;console.log( b );var a = 1;var b = a++ + a++;console.log( b );var a = 1;var b = a++ + ++a;console.log( b );var a = 1;var b = ++a + a++;console.log( b ); ————————逻辑运算符 判断逻辑是否成立的运算符，结果是布尔类型 类比于找男朋友~ &amp;&amp;：与运算符，表示并且，只有当两个操作数都为 true 的时候，结果才是true 1234console.log( true &amp;&amp; true);console.log( true &amp;&amp; false);console.log( false &amp;&amp; true);console.log( false &amp;&amp; false); ||：或运算符，表示或者，只要有其中一个操作数是 true，结果就是true 1234console.log( true || true);console.log( true || false);console.log( false || true);console.log( false || false); !：非运算符，取反 12console.log( !true );console.log( !false );]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动webday06笔记]]></title>
    <url>%2F2020%2F02%2F06%2F1-%E7%A7%BB%E5%8A%A8webday06%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标 了解less的作用 能够了解less的基本语法 能够理解rem和em的区别 掌握媒体查询+rem适配 能够完成苏宁rem布局首页 。。。。。。 理解上课的知识点…… LESS的学习 在写css的时候，可以直接写一个.css文件，但是实际开发中也会使用less的方法写css。 less的写法比css的写法功能更加强大。 维护css的弊端 css是一门非编程式语言，没有变量、函数、作用域等概念 css需要书写大量没有逻辑的代码，冗余度较高 比如：相同的样式往往css中需要写很多次，而你却无可奈何 不方便维护和拓展，不利于复用 比如：更改网页的主题色css需要一个一个的修改，而你却无可奈何 css没有很好的计算能力 比如：css中的大小不能直接填写计算式子，一般要手动计算后填写结果 使用less就能解决以上css中的弊端 Less的介绍 Less 是一门 CSS 预处理语言，也叫做css的预处理器。它扩展了 CSS 的写法，增加了变量、函数等特性。 123less作为css的拓展，并没有减少css的功能，而是在现有的css语法中，加入了程序式语言的特性less在css的语法基础上，引入了变量、Mixin（混入）、运算以及函数等功能，大大简化了css的编写，并且减低了css的维护成本，正如其名字一样：less可以让我们用更少（less）的代码做更多的事情当然，常见的css预处理器有：Less、Sass、Stylus 注意点： 在less中，完全兼容css的语法，所以可以直接在less文件中写css没问题 浏览器不认识less文件，需要需要使用less中的样式，需要先把less文件编译成.css文件，再使用！！ less的编译插件及配置 less写完之后需要编译.css文件才能使用，此时可以使用VScode中的插件完成。 插件的安装步骤： 选择左侧第五个拓展按钮，下载插件 easy less ，点击安装，再点击重新加载 安装好之后，重新加载或者关闭vscode重新打开 实际开发中需要对插件进行配置 让编译好的css文件在css文件夹中 在设置代码中添加一下配置即可 使用的时候直接复制粘贴，注意在上一行的最后加一个逗号 设置完之后需要重新打开vscode即可 123"less.compile": &#123; "out": "../css/"&#125; 注意点： 以后项目中如果有less文件之后，样式都在less文件中写即可，不用去修改css文件 因为css文件都是less编译之后的结果，只需要关注less的修改即可 但是页面中引入的必须是编译之后的css文件，因为less文件浏览器不认识。 Less语法less的注释 在less文件中可以写两种注释 一种是css的注释：/* 注释的内容 */ ，最后会编译展示在css文件中 一种是less的注释：// 注释的内容 ，只在less中使用，不会编译展示在css文件中 一般在less文件中，推荐使用less的注释方法 less的变量 一般在网站中会有主题色（当前网页中用的较多的颜色），如果此时需要改换网页的主题色，一个个去改非常麻烦，此时可以使用less中的变量完成效果 语法： 123变量：可以变化的量语法：@变量名:变量值;作用：编译的时候会把less中所有的变量名替换成变量值，这样可以统一修改某一个值（如主题色） 例子： 1234567891011121314151617@mainColor:#e92322;.box1 &#123; width: 200px; height: 200px; background-color: @mainColor;&#125;.box2 &#123; width: 200px; height: 200px; background-color: @mainColor;&#125;.box3 &#123; width: 200px; height: 200px; background-color: @mainColor;&#125; less的嵌套 在less中，选择器的关系可以通过嵌套来表示 123456789101112131415161718192021222324252627282930313233343536373839404142434445// less中的嵌套：less中选择器可以嵌套// 1、后代选择器，选择器嵌套即可// 2、子代选择器，前面使用&gt;// 3、并集选择器，前面直接写,// 4、交集选择器，前面使用&amp;（&amp;表示这一级选择器）// 5、伪元素，前面使用&amp;（&amp;表示这一级选择器）.father &#123; width: 600px; height: 600px; background-color: pink; // 后代的关系，直接嵌套即可 .son &#123; width: 400px; height: 400px; background-color: blue; // 子代选择器，前面加一个&gt; &gt;.sun &#123; width: 200px; height: 200px; background-color: yellow; &#125; &#125; // 并集选择器 .box1, .box2 &#123; width: 100px; height: 100px; background-color: orange; &#125; // 交集选择器 &amp;.active &#123; background-color: red; &#125; // 伪元素 &amp;::after &#123; content: ''; &#125;&#125; ————————less的运算 在less代码中可以直接写加减乘除进行计算 1234567891011121314.box &#123; width: 200px; height: 200px; background-color: pink; // 伪类的写法 &amp;:hover &#123; // less中可以直接计算加减乘除计算的，编译之后会把计算的结果直接显示在css文件中。之后学习的rem布局中需要使用到less运算的功能 width: 200px / 3; width: 200px * 2; width: 200px + 100; width: 200px - 100; &#125;&#125; less的函数（了解） 针对于css中重复的样式，除了可以使用定义公共类的方式，还可以使用less中的函数来处理（函数在之后的js会详细说到，先简单了解下） 需求： 每一个选择器中的width和height代码都重复了，节省代码的方式 123456789101112131415.red &#123; width: 300px; height: 300px; background-color: red;&#125;.blue &#123; width: 300px; height: 300px; background-color: blue;&#125;.green &#123; width: 300px; height: 300px; background-color: green;&#125; 可以提取出一个公共类出来，然后给对应的标签上加公共类 也可以使用less中的函数，给选择器上使用函数也可以 语法：.函数名(){重复的样式} 123456789101112131415161718192021222324// 在less中也一种处理重复样式的方法：函数。直接在选择器里面使用// 函数的写法和定义公共类很像，后面需要加上括号// 定义函数.common() &#123; width: 300px; height: 300px;&#125;.red &#123; // 使用函数 .common(); background-color: red;&#125;.blue &#123; .common(); background-color: blue;&#125;.green &#123; .common(); background-color: green;&#125; 拓展： 函数里面可以传参，让函数中样式的取值变化（变化的量→变量） 比如让红盒子100*100， 蓝盒子200*200 ，绿盒子300*300 1234567891011121314151617181920.common(@value) &#123; width: @value; height: @value;&#125;.red &#123; // 使用函数 .common(100px); background-color: red;&#125;.blue &#123; .common(200px); background-color: blue;&#125;.green &#123; .common(300px); background-color: green;&#125; ヾ(๑╹◡╹)ﾉ” 使用less实现京东头部 带同学们熟悉less写项目的操作 视口： 1&lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt; 全局容器 ————————rem布局em和rem的认识 在布局中，除了px之外，还有两个常见的单位，em和rem em： 相对于当前元素的字体大小→ 1em = 当前标签的font-size rem： 相对于根元素（html）的字体大小→ 1rem = html标签的font-size 浏览器默认的font-size的大小为16px 之后会使用rem单位完成rem布局（等比例缩放）的效果 rem布局的效果： 屏幕越大，标签就越大 屏幕越小，标签就越小 rem布局的原理： 当屏幕越大，让html标签的font-size变大即可 当屏幕越小，让html标签的font-size变小即可 怎么检测屏幕大小变化呢？通过媒体查询的方式动态改变html标签的font-size的大小 为什么要用rem布局 之前的流式布局或者响应式布局并不能完美的显示设计图的效果，并不能解决所有屏幕适配的问题。而rem能做到：等比例的适配所有的屏幕。 现状： 由于市面上手机种类繁多，导致移动端的屏幕种类非常的混乱，比如有常见的320px 360px 375px 384px 480px 640px等。在开发中，UI一般只会提供 750px 或者是 640px 的设计稿，这就要求我们通过一张设计稿能够适配所有的屏幕。常见的方案有以下： 流式布局： 但是目前使用流式布局的网页还是较多的，比如 亚马逊 优点：各种屏幕都适配，都能看 缺点：只有当屏幕大小和设计图相同时才能完美还原设计图，其他屏幕下都会拉伸 响应式布局： 一般多用于简单的网页和从零开始的站点。 优点：一套页面可以适配多个客户端。 缺点：对于复杂的网页来说工作量太大，维护性太难。 rem布局： 与less配合使用更加方便，目前使用rem布局的有：淘宝 、 苏宁 优点：rem布局盒子适配所有的屏幕，并且可以在多个屏幕大小中完美还原设计图（等比例缩放） ————————rem布局适配多个屏幕 rem布局适配的原理说白了，就是根据屏幕的大小，动态的改变html标签的font-size的大小，此时就可以配合媒体查询做到不同屏幕的适配 需求： 当320设计图中div的宽高为200*200，此时要求使用rem适配 375、 414、640 的屏幕 先把px的单位转换成rem单位——》需要除以html标签的font-size的大小 针对于设计图的尺寸自定义一个好算的font-size的大小 配合媒体查询适配不同的屏幕——》需要根据比例等比例缩放 每一个屏幕的宽度与font-size的比例是相等的！！！ 所以求出设计图尺寸的比例之后，之后的屏幕的font-size的值就是——》屏幕宽度/比例 注意点： 因为要求页面是等比例缩放的，所以： 屏幕1宽度/屏幕1html标签font-size = 屏幕2宽度/屏幕2html标签font-size 保证屏幕宽度与html标签font-size的比例相同，就可以轻松适配多个屏幕 123456789101112131415161718192021222324252627282930313233343536373839404142434445/* 适配320屏幕屏幕宽度&gt;=320时生效比例：3.2*/@media screen and (min-width:320px) &#123; html &#123; font-size: 100px; &#125;&#125;/* 适配375屏幕屏幕宽度&gt;=375时生效fons-size=375/3.2*/@media screen and (min-width:375px) &#123; html &#123; font-size: 117.1875px; &#125;&#125;/* 适配400屏幕屏幕宽度&gt;=400时生效font-size=400/3.2*/@media screen and (min-width:400px) &#123; html &#123; font-size: 125px; &#125;&#125;@media screen and (min-width:414px) &#123; html &#123; font-size: 129.375px; &#125;&#125;/* 把px单位换算成rem */div &#123; width: 2rem; height: 2rem; background-color: pink;&#125; 苏宁易购 苏宁 项目搭建 images文件夹 less文件夹（之后使用less写项目） 有index.less 有base.less 新建html页面 引入css文件 移动端项目设置视口 1&lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt; 设置全局容器 rem布局首先进行适配工作适配的步骤： 先适配设计图的屏幕大小（比如：750px），并且根据设计图屏幕大小定义一个html标签的font-size的大小（比如：50px），此时屏幕大小与font-size的比例为15 因为是等比例缩放的，所以每一个适配的屏幕大小与font-size的比例都是相同的，所以各个屏幕大小除以比例就能得出font-size的大小 12345678910111213141516171819202122232425262728293031// 苏宁官网中适配了：750 720 540 480 424 414 400 384 375 360 320.adapter(@width) &#123; @media screen and (min-width:@width) &#123; html &#123; // round(数值)：让这个数值四舍五入 // round(数值，保留几位小数) font-size: round(@width/15,2); &#125; &#125;&#125;.adapter(320px);.adapter(360px);.adapter(375px);.adapter(384px);.adapter(400px);.adapter(414px);.adapter(424px);.adapter(480px);.adapter(540px);.adapter(720px);.adapter(750px);// 适配750的屏幕// 定义设计图屏幕大小html的font-size值为50px，// 比例为15// @media screen and (min-width:750px) &#123;// html &#123;// font-size: 50px;// &#125;// &#125; ————————–px2rem插件的使用 在写项目中，每一次都需要手动写式子把px转换成rem比较麻烦，此时可以使用vscode的插件，完成对应的效果 安装插件 px2rem 每次写数字px之后，会有提示转换成rem，按下键回车即可 插件中默认html的font-size的大小为16px，所以默认是除以16的如果需要更改，需要进行配置（如：设计如是750，html标签的font-size的大小为50px，此时应该除以50） 在设置中搜索px2rem，然后直接修改设置即可，注意设置完了之后需要重启才能生效！！]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>移动web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动webday05笔记]]></title>
    <url>%2F2020%2F02%2F06%2F1-%E7%A7%BB%E5%8A%A8webday05%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标 了解bootstrap的栅格系统的使用 能够完成微金所的头部 能够使用导航条组件完成微金所导航 能够完成微金所轮播图 能够完成微金所信息区块 能够完成微金所预约区块 。。。。。。 理解上课的知识点…… bootstrap框架 在之前使用媒体查询的方式能手动写出响应式的简单效果，但是非常的麻烦，代码非常的多。 在实际开发过程中，一般咱们会借助框架来完成响应式的开发，提高效率（但是底层仍然是媒体查询的原理） Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。前端流行框架排名 bootstrap的初体验 bootstrap框架现阶段可以简单的当做别人写好的代码。想要用，先去下载下来 bootstrap中文网 版本： 2.x.x 停止维护 做了很多兼容性处理，但是代码不够简洁，功能不够完善 3.x.x 目前使用较多 偏向于响应式开发布局，稳定。但是放弃了IE67的兼容，对IE8支持但是界面效果不友好 4.x.x 阶段 注意点： Bootstrap中的 js功能效果依赖于 jQuery （ 第三方库, 后面有专门的课程讲解） 简单使用 说白了，bootstrap框架就是别人写好的代码，类似于：需要使用别人写好的css文件，只需要直接引入即可 引入文件：&lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.css&quot;&gt; bootstrap样式文件中有一些简单的样式初始化，所以引入之后不用再引入 base.css 文件 但是bootstrap并没有将所有样式都重置，所有之后还需要自己手动写代码重置 学习bootstrap框架说白了就是学习类（学习每一个类的含义） 比如：fl——》左浮动、fr——》右浮动、clearfix——》清除浮动 以部分按钮为例： | 类名 | 含义 || :———-: | :————————–: || .btn | 按钮的基础类（按钮必加的类） || .btn-success | 绿色按钮 || .btn-danger | 红色按钮 || .btn-primary | 深蓝按钮 || .btn-default | 白色按钮 | bootstrap的布局容器 之前给一个盒子设置响应式布局（不同屏幕下版心不同，移动端宽度100%），代码写了很多很麻烦 但是使用bootstrap框架之后就非常方便，框架中响应式的框架已经写好的，使用的之后直接给标签加类即可 响应式布局容器（.container） 比较常用 设置了该类的盒子，在不同屏幕下有不同的版心，到了移动端宽度为100%（之前写的效果一样） 底层原理：就是之前写的媒体查询 设置了该类的盒子，左右有默认15px的padding 写框架的作者觉得内容直接贴两边不好看，就设置了左右15px的padding 流式布局容器（.container-fluid）（了解） 了解即可 设置了该类的盒子，宽度永远是100% 设置了该类的盒子，左右也有默认15px的padding 抵消父元素padding的类（.row）（了解） bootstrap中的布局容器默认都设置了左右15px的padding。 如果不需要这个效果，除了可以通过选择器padding:0;直接覆盖，还可以通过.row类去掉 设置了该类的子盒子，会抵消父元素左右15px的padding 底层原理：通过margin为负值实现 栅格系统（重点） 在bootstrap中会把一行分成12列，通过对应的类名实现每个盒子宽度的动态变化 其实其中的原理大家一秒能懂 栅格系统的模拟需求： 响应式容器中有两个盒子，只在大屏设备中宽度各占一半一行中显示，其他屏幕占满一行 使用之前的方法：浮动 + 宽度百分比 + 媒体查询 可以实现 其实在bootstrap中，也可以通过类完成以上效果（如：给两个盒子设置.col-lg-6） 底层原理也是通过：浮动 + 宽度百分比 + 媒体查询 做到的。 栅格系统的介绍 bootstrap中将一行分成了12份（12份更容易分配盒子的空间） 底层原理： 浮动（一行中显示） + 百分比（宽度均分） + 媒体查询（不同屏幕时才生效） 比如： .col-lg-6 表示在大屏及以上屏幕生效，盒子宽度为一行的6/12——》50%；浮动在一行中显示 语法： .col-取值1-取值2 取值1 效果 lg 大屏及以上屏幕时生效 md 中屏及以上屏幕时生效 sm 小屏及以上屏幕时生效 xs 超小屏及以上屏幕生效（所有屏幕生效） 取值2： 份数（0~12） 表示在一行中的宽度占几份 栅格系统的练习12345678910111213&lt;!-- 需求: 响应式布局容器中一共有 12 个div 如果是大屏幕设备, 每行放 6 个 div, 共两行 如果是中屏设备, 每行放 4 个 div, 共三行 如果是小屏设备, 每行放 3 个 div, 共四行 如果是超小屏设备, 每行放 2 个 div, 共六行 .col-取值1-取值2 lg：大屏及以上生效 md：中屏及以上生效 sm：小屏及以上生效 xs：所有屏幕都生效 --&gt; ヾ(๑╹◡╹)ﾉ” 写微金所新手体验模块的响应式效果 栅格系统中一般先从小屏开始写！ ————————–bootstrap全局样式阅读（了解） bootstrap全局样式 排版：对齐 底层原理：就是一个text-align：left/center/right 类名 效果 .text-left 文本左对齐 .text-center 文本居中对齐 .text-right 文本右对齐 表格：基本（了解） 类名 效果 .table 表格的基本样式（配合thead和tbody使用） .table-striped 隔行变色 按钮：颜色 按钮需要加上基本类 .btn 类名 效果 .btn-danger 红色按钮 .btn-success 绿色按钮 .btn-primary 深蓝按钮 .btn-default 白色按钮 .btn-info（了解） 浅蓝按钮 .btn-warning（了解） 黄色按钮 .btn-link（了解） 链接按钮 按钮：尺寸 按钮默认是中按钮 类名 效果 .btn-lg 大按钮 .btn-sm 小按钮 .btn-xs 超小按钮 响应式工具介绍 在响应式布局中，有时候会设置不同屏幕下元素的显示或者隐藏 需求： 一个盒子大屏、中屏显示，小屏、超小屏隐藏 自己通过媒体查询实现 使用bootstrap中预定的.hidden相关类实现 代码： bootstrap中预定了一些类，可以控制盒子的显示或者隐藏 类名 效果 .hidden 所有屏幕都隐藏 .hidden-xs 只在超小屏隐藏 .hidden-sm 只在小屏隐藏 .hidden-md 只在中屏隐藏 .hidden-lg 只在大屏隐藏 组件介绍（了解） 组件比全局样式会多出一些功能出来，但是注意这些功能需要配合js文件一起使用 组件：字体图标 在bootstrap内部，内置了字体图标，只需要直接复制粘贴类名即可 比如： 1&lt;span class="glyphicon glyphicon-heart"&gt;&lt;/span&gt; 组件：导航条 bootstrap中已经写好导航条的代码，使用的时候直接复制粘贴即可 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;nav class="navbar navbar-default"&gt; &lt;div class="container-fluid"&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class="navbar-header"&gt; &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"&gt; &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class="navbar-brand" href="#"&gt;Brand&lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;Link &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt; &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"&gt;Dropdown &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Separated link&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;One more separated link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class="navbar-form navbar-left"&gt; &lt;div class="form-group"&gt; &lt;input type="text" class="form-control" placeholder="Search"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;ul class="nav navbar-nav navbar-right"&gt; &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt; &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"&gt;Dropdown &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Separated link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/div&gt;&lt;!-- /.container-fluid --&gt;&lt;/nav&gt; 注意点： 如果需要实现组件中如导航条的功能，需要引入bootstrap中的js文件才行 bootstrap中的js需要依赖与jquery这个js文件的，所以需要一起引入jquery这个js文件才能生效！ js文件通过script的src属性引入 12&lt;script src="./jquery/jquery-1.12.4.js"&gt;&lt;/script&gt;&lt;script src="./bootstrap/js/bootstrap.js"&gt;&lt;/script&gt; —————————微金所项目微金所项目搭建 新建项目文件夹 images文件夹：放项目需要的图片 css文件夹：放自己写的css文件 fonts文件夹：放自己项目的字体图标文件 虽然bootstrap框架中内置了字体图标，但是实际开发中设计师会针对每个网页单独设计字体图标，使用方法和基础班一样 lib文件夹：放项目中框架相关的代码 lib文件夹中一般放框架（别人写好的代码）相关的代码 放入.ico图标 在 index.html 文件中引入相关文件 引入.ico图标 引入字体图标文件 引入框架的css文件和js文件和jquery文件（因为bootstrap框架中的js依赖jquery） 知道引入js之后能生效即可，js之后会详细去说 引入自己写的css文件 微金所模块划分 响应式项目的思路 先看有没有响应式版心（版心会不会跟随屏幕大小变化而变化） 如果有响应式版心，设置 .container 即可 在响应式版心中分配每一个盒子的空间 利用栅格系统进行空间的分配 设置整体大模块是否有显示与隐藏，直接给大模块设置hidden相关属性即可 bootstrap导航条的改写（不做要求） 在bootstrap文档的组件中，有写好的导航条的代码，使用的时候直接复制改写即可。 因为现在还没学js等相关内容，所以对于以下改写的内容同学们可以直接复制改好的代码，现在学习的重点在于之后样式的覆盖（如果能理解是一种进阶） 改写前先把不需要的属性和标签删除： 以下属性和标签，在改写过程中可以直接删除，因为是给盲人设备使用的，删除之后便于理解结构（不删也可以） aria- 开头的属性，该属性可以直接删除 role 属性，该属性可以直接删除 有 sr-only 类的标签，该标签可以直接删除 12345678910111213141516171819202122232425262728293031323334&lt;nav class="navbar navbar-default"&gt; &lt;!-- 有版心的布局容器 --&gt; &lt;div class="container"&gt; &lt;!-- 小屏设备显示的左边大标题和右边切换按钮的组合 --&gt; &lt;div class="navbar-header"&gt; &lt;!-- 小屏下右边的按钮 --&gt; &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1"&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;/button&gt; &lt;!-- 左边的大标题 --&gt; &lt;a class="navbar-brand" href="#"&gt;左边的大标题&lt;/a&gt; &lt;/div&gt;&lt;!---------------------------------------------------------------------------------------&gt; &lt;!-- 用于切换显示内容的结构 --&gt; &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"&gt; &lt;!-- 左侧的导航 --&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;我要投资&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;我要借贷&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;平台介绍&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;新手专区&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;最新动态&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;微平台&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- 右侧的导航 --&gt; &lt;ul class="nav navbar-nav navbar-right"&gt; &lt;li&gt;&lt;a href="#"&gt;个人中心&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/nav&gt; bootstrap标签页（tab栏）的改写 在bootstrap文本的JavaScript插件中，有写好的标签页（tab栏）的代码，使用的时候直接复制改写即可。 改写前先把不需要的属性和标签删除： aria- 开头的属性，该属性可以直接删除 role 属性，该属性可以直接删除 有 sr-only 类的标签，该标签可以直接删除 1234567891011121314151617181920212223242526272829303132333435&lt;!-- 1、先去除没用的标签和属性 1、aria-开头的属性，属性都删除 2、role属性，该属性删除 3、有sr-only类的标签，该标签直接删除 2、bootstrap中，data-开头的属性，是用于添加js功能的，不要删除 3、通过id属性将导航的按钮和面板绑定起来，所以id属性需要一一对应才行 原理：点击某一个导航按钮时，让对应的导航面板显示，其他面板都隐藏即可！！！--&gt;&lt;div&gt; &lt;!-- 用于点击切换的按钮 --&gt; &lt;ul class="nav nav-tabs" role="tablist"&gt; &lt;li class="active"&gt;&lt;a href="#product01" data-toggle="tab"&gt;特别推荐&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#product02" data-toggle="tab"&gt;微平台1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#product03" data-toggle="tab"&gt;微平台2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#product04" data-toggle="tab"&gt;微平台3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#product05" data-toggle="tab"&gt;微平台4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#product06" data-toggle="tab"&gt;微平台5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#product07" data-toggle="tab"&gt;微平台6&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- 用于点击切换的面板 --&gt; &lt;div class="tab-content"&gt; &lt;div class="tab-pane active" id="product01"&gt;111&lt;/div&gt; &lt;div class="tab-pane" id="product02"&gt;222&lt;/div&gt; &lt;div class="tab-pane" id="product03"&gt;333&lt;/div&gt; &lt;div class="tab-pane" id="product04"&gt;444&lt;/div&gt; &lt;div class="tab-pane" id="product05"&gt;555&lt;/div&gt; &lt;div class="tab-pane" id="product06"&gt;666&lt;/div&gt; &lt;div class="tab-pane" id="product07"&gt;777&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>移动web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动webday04笔记]]></title>
    <url>%2F2020%2F02%2F06%2F1-%E7%A7%BB%E5%8A%A8webday04%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标 能够说出伸缩布局的主轴对齐方式和侧轴对齐方式 能够说出如何让伸缩布局换行 能够完成六面神骰 了解响应式开发的原理 。。。。。。 理解上课的知识点…… flex布局（弹性布局） 通过给父元素添加flex属性，调整子元素在水平和垂直方向上的位置 布局方法的选取： 如果是pc端页面布局，我们一般还是考虑传统布局方式 如果是移动端或者不考虑兼容性问题的pc端页面布局，我们一般就可以考虑flex弹性布局 如果不用考虑兼容性问题，flex布局会更加方便 flex布局的初体验ヾ(๑╹◡╹)ﾉ” 让一个子盒子在父盒子中水平垂直居中 之前使用子绝父相完成 通过flex布局，三行代码完成 123456/* 设置当前盒子为弹性盒子*/display: flex;/* 设置主轴方向的对齐方式：justify-content */justify-content: center;/* 设置侧轴方向的对齐方式：align-items */align-items: center; 设置了 display：flex; 的盒子会变成一个弹性盒子。弹性盒子会多出了主轴和侧轴的概念。 主轴： 默认水平向右 （类似于x轴） 侧轴：与主轴垂直的就是侧轴，默认垂直向下（类似于y轴） 弹性盒子内部的子元素会默认沿着主轴方向 排布，默认水平向右布局。（类似于羊肉串） 接下来学习一些flex布局中相关的属性 主轴方向（flex-direction）（了解） 弹性盒子中主轴方向默认是水平向右的。 但是其实可以通过flex-diretion 属性修改主轴的方向（一般很少改变） 取值（主轴方向）： 取值 效果（主轴方向） row 水平向右（默认） row-reverse 水平向左 column 垂直向下 column-reverse 垂直向上 主轴对齐方式（justify-content）（重点） 元素在主轴上排布，可以通过 justify-content 属性设置元素的对齐方式 取值： flex-start：向主轴的开始位置对齐 默认相当于左对齐 flex-end：向主轴的结束位置对齐 默认相当于右对齐 center：居中对齐 space-around：让空白环绕盒子显示 space-between：让空白只在盒子之间显示 单行侧轴对齐方式（align-items）（重点） 可以通过 align-items 设置单行元素在侧轴的对齐方式。 取值： flex-start：向侧轴的开始位置对齐 flex-end：向侧轴的结束位置对齐 center：居中对齐 stretch：让子盒子的高度拉伸显示（默认值） 只有当子元素没有高度时，才会有拉伸效果（否则以设置的高度为准） 是否换行（flex-wrap） flex布局中，默认是单行显示的，如果子元素的宽度之和超出了父元素的宽度，此时子盒子会默认压缩显示。 此时，如果需要设置子元素换行显示，可以使用属性 flex-wrap 取值： 属性值 效果 nowrap 不换行（默认值） wrap 换行 多行侧轴对齐方式（align-content） 之前学习的 align-items 只是针对于单行元素的侧轴对齐方式。 如果需要设置多行元素的侧轴对齐方式，此时需要使用 align-content 才行 取值（和align-items差不多）： 取值 效果 flex-start 向侧轴的开始位置对齐 flex-end 向侧轴的结束位置对齐 center 居中对齐 stretch 子元素高度拉伸显示（只有没设高才有效果） space-around 空白环绕盒子显示 space-between 空白只在盒子之间显示 align-items与align-content的区别： 如果子元素没有换行，只有一行的时候使用 align-items 如果子元素有多行，此时使用 align-content —————-学习到这里，给父元素设置的相关样式已经说完了，稍微小结一下！ 以下都是给子元素设置的相关属性~ 分配子元素空间（flex属性） 可以通过flex属性设置子元素的分配的空间 需求： 让弹性盒子中的三个子元素等分！ 作用： 按照份数分配父元素主轴（宽度）的剩余空间 优先分配具体的宽度，剩余的空间再按照分数分配。 代码： flex:份数; 通过flex属性可以很轻松的完成圣杯布局。 子元素排序（order属性）(了解) 在不能修改html结构的时候，要求改变子元素的属性，此时可以使用order属性设置 需求： 让弹性盒子中第二个子元素显示在左边第一个？？ 作用： 设置弹性盒子中子元素的排列顺序，数值越小，排列靠前，默认是0 代码： order：数字; 单个子元素侧轴对齐方式（align-self） 可以通过 align-self 属性设置单个子元素侧轴的对齐方式 需求： 让父元素中的单行子元素居中，然后让第一个子元素跑到侧轴开始位置！ 作用： 设置单个子元素在侧轴的对齐方式 取值（和align-items取值一样）： 取值 效果 flex-start 向侧轴的开始位置对齐（默认相当于顶部对齐） flex-end 向侧轴的结束位置对齐（默认相当于底部对齐） center 居中对齐 stretch 子元素高度拉伸显示（只有没设高才有效果） 对于其他内容有兴趣可以看看阮一峰的博客 ヾ(๑╹◡╹)ﾉ” 六面神骰———————–携程网移动端首页项目 携程网移动端 技术选型 方案：单独制作移动端页面 技术：采用flex布局 项目搭建 和之前的操作一样 新建一个项目文件夹 新建images文件夹：放入常用的图片资源 新建css文件夹：放入index.css 代码的编写 视口需要设置完整： 移动端开发第一个注意点 1&lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt; 在html中引入css文件 移动端网页整体需要有一个整体的大容器 可以直接把body当做整体大容器 或者设置一个全局容器：container 先把整个网页的各个模块划分好 携程轮播：xc_banner 携程导航：xc_nav 携程产品：xc_product 携程底部：xc_footer 再每一个部分写 响应式布局 响应式布局（respond layout）是Ethan Marcotte在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端（pc、手机、平板） 什么是响应式布局单独制作移动端页面方案（主流）： 同一个页面需要开发两套不同设备的版本 pc端需要开发写一套页面，专门给pc端看 移动端再开发一套页面，专门给移动端看 响应式布局方案（较少）： 同一个页面只需要开发一套网页 只需要写一套代码，同时给pc端和移动端看 ヾ(๑╹◡╹)ﾉ” 看看微金所项目~响应式开发的原理（记忆）动态根据当前屏幕的宽度，自动改变页面中盒子的宽度、盒子的显示或隐藏 响应式开发的优缺点优点： 一套网页可以适配多个终端。只需要开发一套网页即可 缺点： 一个页面需要兼容多个终端，考虑的情况多种，开发效率较慢 代码会更多，网页的加载速度较慢 响应式开发的现状 在国内并不是很流行，国外较多 如果已经有了一套pc端网页，此时直接再写一套移动端网页即可，此时不需要使用响应式布局（比如：京东、淘宝） 如果开发一套网页都没有，是新建的项目，此时可以考虑使用响应式，写一套即可兼容多个设备。 比较简单的网页，可以考虑使用响应式，但是复杂的网页考虑的情况会很多，一般不用。 ——————-响应式开发的屏幕分类 在响应式开发中需要动态根据屏幕的宽度改变样式，但是不可能每变化1px就改变样式。 在响应式开发中，把各种屏幕宽度分为四大类，开发中只需要考虑这四种屏幕的情况即可 设备屏幕的分类 分类名称 宽度范围 超小屏设备 0 ~ 768px 小屏设备 768px ~ 992px 中屏设备 992px ~ 1200px 大屏设备 1200px ~ 正无穷 媒体查询 刚刚说了响应式原理是：动态根据当前屏幕的宽度，自动改变页面中盒子的宽度、盒子的显示或隐藏 所以需要根据不同屏幕的宽度改变样式。 可以通过css3中新增的媒体查询完成效果。 媒体查询（Media Query）：是CSS3新增的方法，媒体查询可以动态查询屏幕的宽度，根据不同的屏幕宽度设置样式是否生效！！ 语法： 123@media screen and (条件) &#123; 选择器......&#125; 作用： 只有当屏幕宽度满足条件时，媒体查询中的选择器才能生效！！！ 注意点： 媒体查询仅仅只是控制选择器是否生效，不会提升选择器的优先级！！ 具体谁说了算，还是需要看优先级 条件： min-width：样式生效的屏幕最小宽度 只有当屏幕宽度大于等于该宽度时，样式才会生效 12345678/* 样式生效的最小宽为600px——》只有当屏幕宽度大于等于600px时，样式才会生效！！*/@media screen and (min-width:600px) &#123; div &#123; width: 400px; height: 400px; background-color: green; &#125;&#125; max-width ：样式生效的屏幕最大宽度 只有当屏幕宽度小于等于该宽度时，样式才会生效 12345678/* 样式生效的最大宽为800px——》只有当屏幕宽度小于等于800px时，样式才会生效*/@media screen and (max-width:800px) &#123; div &#123; width: 400px; height: 400px; background-color: blue; &#125;&#125; width ：样式生效的宽度 只有当屏幕宽度正好等于该宽度时，样式才会生效 12345678/* 样式只在700px宽度的时候才会生效 */@media screen and (width:700px) &#123; div &#123; width: 400px; height: 400px; background-color: purple; &#125;&#125; ヾ(๑╹◡╹)ﾉ” 如果需要在600~800之间样式生效，怎么写？？ 一个媒体查询中可以同时写多个条件，中间通过and连接即可 12345678/* 样式在 600~800中间生效 */@media screen and (min-width:600px) and (max-width:800px) &#123; div &#123; width: 400px; height: 400px; background-color: orange; &#125;&#125; 使用媒体查询完成响应式适配 可以通过媒体查询实现不同终端的布局和样式的切换，完成响应式布局。 需求：手动设置全局容器.container的响应式适配四种屏幕。 12345/* 需求： *//* 超小屏幕: 0 - 768px 版心：100% 背景颜色：绿色 *//* 小屏设备: 768px - 992px 版心：750px 背景颜色：蓝色 *//* 中屏设备: 992px - 1200px 版心：970px 背景颜色：黄色 *//* 大屏设备: 1200 ~ 正无穷 版心：1170px 背景颜色：粉色 */ 弊端：现在只有一个div，要做一套响应式布局，就需要如此多的代码，非常的麻烦。真正开发中我们会借助一些响应式的框架，比如bootstrap。]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>移动web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动webday03笔记]]></title>
    <url>%2F2020%2F02%2F06%2F1-%E7%A7%BB%E5%8A%A8webday03%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标 能够说出流式布局的基本特征 能够使用2倍图进行页面开发 能够实现京东首页的头部布局 能够完成京东首页的静态结构 。。。。。。 理解上课的知识点…… 移动端开发选择常见移动端开发方案 在写移动web代码之前，先了解移动中主流的方案，明确方向 单独制作移动端网页（目前主流） 此类网站会检测用户的设备，如果是pc端则显示pc端页面，如果是移动端则显示移动端页面（通常移动端是网址前加了m：mobile） 特点：一个网站有两套网页 京东商城，手机京东 淘宝网，淘宝网触屏版 苏宁易购，手机苏宁 等等…… 响应式网页（很少） 此类网站只有一个网页，通过判断屏幕宽度的变化从而改变页面的样式，从而适配多个终端 特点：一个网站只需要一个网页 但是有显而易见的缺点：网页制作麻烦，需要考虑很多兼容性问题 三星官网 移动端常见布局 之前pc端布局的时候通过版心进行屏幕布局适配的 但是现在移动端中屏幕本身较小，再设置版心不合适，所以此时需要使用特殊的布局套路才行 流式布局的介绍 在移动端中需要使用一些特殊的布局方式，流式布局就是其中的一种，也叫百分比布局。 通过盒子的宽度设置成百分比来根据屏幕的宽度进行伸缩，不受具体像素的限制，可以自行填充。 流式布局是移动web开发中较为常见的布局方式 布局特征： 一般盒子高度写死，宽度百分比或者自适应 小图片、小图标、文字大小一般写死 大图片一般宽度自适应（100%），高度不设置让其等比例缩放 经典的流式布局： 左侧固定，右侧自适应 右侧固定，左侧自适应 两侧固定，中间自适应（圣杯布局、双飞翼布局） 等分布局 按照之前写的宽度百分比可以完成，但是当给每一个盒子设置border之后，会发现盒子掉下来了~ 只要进行移动端布局，盒子约定俗成都需要加上自动内减。 ヾ(๑╹◡╹)ﾉ”演示场景的流式布局拓展： overflow:hidden 会触发盒子的BFC 触发BFC的盒子的特点： 解决margin的塌陷 清除浮动 不会在浮动元素下面，会被挤到一边去 JDM京东移动端项目技术选型 方案：单独制作移动端网页 技术：采用流式布局 ————————项目的搭建 和之前的操作一样 新建一个项目文件夹 新建images文件夹：放入常用的图片资源 新建css文件夹：放入index.css和base.css 引入favicon.ico图标 base.css的阅读 大部分来说和之前基础班的base.css文件是一样的，但是有个别的几个区别 取消a标签移动端点击高亮的效果 -webkit-tap-highlight-color: rgba(0, 0, 0, 0); 代码的编写 视口需要设置完整： 移动端开发第一个注意点 1&lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt; 在html中引入css文件 先引入base.css 再引入index.css 移动端网页整体需要有一个整体的大容器 可以直接把body当做整体大容器 或者京东整体的大盒子：jd_container 宽度设置100% 高度由内容撑开：先写随便写一个 针对于大屏幕如pc端来说，占满一行就有问题了，此时需要设置最大宽度：max-length一般给设计图的大小。（因为比设计图还要大图片会放大失真） 针对于移动端有最小的宽度：min-width一般给需要适配的最小宽度（320px即可） 居中：margin：0 auto； 先把整个网页的各个模块划分好 再每一个部分写 注意点： 设计师给的设计图是是二倍图，所以量取的大小应该缩小2倍才行。（精灵图也是一样的） 相关操作 设置精灵图有背景颜色 ps右下角倒数第二个按钮点击一下（新建图层） 左侧选择一个颜色，然后鼠标点击新建的图层，使用快捷键 alt + backspace(删除键) （填充图层颜色） 将有颜色的图片拖到精灵图层的下面即可 改变图片的大小 设计师给的图片是2倍图，此时量取之后还要缩小2倍比较麻烦，此时可以直接把图片大小整体缩小两倍。之后再直接量取即可。 选择上方的图像按钮 选择图像中的图像大小选项 在对话框中设置修改之后的图像大小，只需要把宽度设置为原来的一半即可。 注意点： 此操作仅仅只是为了量取更加便捷，但是项目中为了图片清晰还是需要引入2倍图（400px*400px的图片）]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>移动web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动webday02笔记]]></title>
    <url>%2F2020%2F02%2F06%2F1-%E7%A7%BB%E5%8A%A8webday02%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标 能够理解过渡transition的使用方式 能够实现基本的动画 了解动画的八大参数 能够理解视口的概念并进行视口的设置（快捷键） 。。。。。。 理解上课的知识点…… 过渡（transition） 昨天学习了过渡属性，直接设置的是 transition:1s; ，其实 transition 属性是一个复合属性 让一个盒子hover之后慢慢的变宽~ 过渡相关属性 其实过渡属性可以分为多个单独的属性进行设置 过渡的时间（transition-duration） 设置完成过渡效果需要多少时间 代码：transition-duration：1s; 取值： 具体的时间（1s） 过渡的属性（transition-property） 设置过渡效果的css属性的名称 代码：transition-property:all; 取值： 可以是具体的属性（width、height、……） all（表示所有属性都有过渡的效果，默认值） 但是从效果来说，不是每一个属性都有过渡效果，比如：display：none这种不可以过渡的属性，是没有过渡的效果的（因为不存在中间状态） 过渡的变化效果（transition-timing-function） 设置过渡变化速度效果的不同 代码： transition-timing-function：linear; 取值： ease：慢速→快速→慢速 linear：匀速变化 steps（n）：过渡分为几步完成（n个步骤完成） 过渡的延时（transition-delay） 设置过渡在多少时间之后开始 代码： transition-delay：2s; 取值： 具体的时间 过渡的连写形式（transition） 过渡相关属性都是以transition开头，可以通过transition属性设置相关属性 代码： 123456789101112131415161718div &#123; /* 过渡的属性 */ transition-property: all; /* 过渡的时间 */ transition-duration: 1s; /* 过渡的变化效果 */ transition-timing-function: linear; /* 过渡的延时 */ transition-delay: 2s;&#125;/*----------------------------------*/div &#123; /* 连写形式 */ transition: all 1s linear 2s;&#125; 连写的注意点： 省略问题：按照需求省略，省略相当于设置了默认值 顺序问题：没有要求，但是注意第一个时间永远是过渡时间 如果连写中只设置了一个时间，这个时间表示的是过渡的时间 如果连写中设置了两个时间，则第一个时间表示过渡的时间，第二个时间表示延时的时间 过渡属性的小结 过渡的时间：transition-duration 过渡的属性：transition-property 过渡的效果：transition-timing-function 过渡的延时：transition-delay ヾ(๑╹◡╹)ﾉ” 3D相册案例300*400 ————————css3动画 动画可以通过设置多个节点来精确控制一个或者一组动画，常用来实现复杂的动画效果。 ヾ(๑╹◡╹)ﾉ”动画的初体验（让一个div一直旋转） 看写好的动画效果 问题： 动画和过渡的区别？ 过渡必须要触发条件（如：hover），动画则可以不需要（浏览器一刷新就动起来） 过渡最后肯定会停下来，动画则可以一直运行下去 过渡需要两个状态的不同，动画则可以设置多个状态 效果上来说相似，但是动画比过渡跟复杂点 ヾ(๑╹◡╹)ﾉ” 把刚刚的hover效果改写成一刷新就一直旋转动画 动画的实现两步： 定义动画：@keyframes 动画名{} 使用/调用动画：给对应的元素设置animation属性 定义动画（@keyframes） 使用动画前首先要定义一个动画出来，需要通过动画序列设计动画→说白了就是控制动画的不同状态 需求：(动画需要考虑状态) 默认盒子宽度200，让盒子变宽为800的动画。 默认盒子宽高都是200，先让盒子变宽为800，再让盒子变高为800 代码： 12345678910111213141516171819202122232425262728/* 1. 定义一个动画 *//* 定义动画方式一：from-to两个状态 */@keyframes dong &#123; /* 动画的开始状态 */ from &#123; width: 200px; &#125; /* 动画的结束状态 */ to &#123; width: 600px; &#125;&#125;/*--------------------------*//* 定义动画方式二：百分比设置多个状态 */@keyframes bian &#123; 0% &#123; width: 200px; height: 200px; &#125; 50% &#123; width: 600px; height: 200px; &#125; 100% &#123; width: 600px; height: 600px; &#125;&#125; 使用/调用动画（animation） 其实animation属性是一个复合属性，一共是8个属性的连写形式 设置元素宽度变长的动画 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/* 使用动画相关的属性：1、动画的名字：animation-name------------------------------------*/animation-name: big;/* 2、动画的持续时间（一次动画持续的时间）：animation-duration------------------------------------*/animation-duration: 1s;/* 3、动画的延时：animation-delay------------------------------------*/animation-delay: 1s;/* 4、动画的效果：animation-timing-function------------------------------------取值：1、ease：先慢——》再快——》再慢2、linear：匀速3、steps()：分步进行*/animation-timing-function: linear;/* 5、动画的执行次数：animation-iteration-count------------------------------------取值：1、次数（默认是1次）2、infinite：无限次*/animation-iteration-count: infinite;/* 6、指定动画的方向（按照什么顺序执行）：animation-direction------------------------------------取值：1、normal：正常（从from——》to）2、reverse：反转（从to——》from）3、alternate：交替（from——》to——》from——》to——》from....）*/animation-direction: alternate;/* 7、动画结束的状态：animation-fill-mode------------------------------------取值：1、backwards：（默认值）回到开始状态结束2、forwards：动画在结束状态结束*/animation-fill-mode: forwards;/* 8、动画执行的状态：animation-play-state------------------------------------取值：1、默认执行2、paused：暂停动画（一般给hover状态加，让鼠标移入之后暂停动画）*/animation-play-state: paused; ————————注意点： 一般使用动画用的都是animation的连写形式 连写形式中只需要注意第一个时间是动画持续时间，第二个时间是延时时间即可。此外没任何顺序问题 一般只设置动画的名字、动画的持续时间、动画的次数即可 ヾ(๑╹◡╹)ﾉ” 大风车案例 本质上来说就是让一个盒子旋转，而盒子里面有四个扇叶 ヾ(๑╹◡╹)ﾉ” 小鱼游动案例一共有两个动画 小鱼原地抖动的动画（通过切换背景位置设置完成效果，类似于翻书动画） 小鱼游动的动画 —————————–背景图片大小（background-size） 通过css可以设置背景图片的大小 语法： 1background-size: 背景图片宽度 背景图片高度： 取值（分别设置的是宽度和高度）： 数字+px 百分比（相对于盒子的宽高百分比） 关键字 默认尺寸： contain（包含）：将背景图片等比例缩放，直到不会超出盒子的最大 直到宽度或者高度中有一个和盒子相等，并且背景图片没有溢出部分即止。 cover（覆盖）：将背景图片等比例缩放，直到填满整个盒子刚好没有空白 直到宽度或者高度中有一个和盒子相等，并且背景图片填充满盒子如果有溢出部分则被隐藏 注意点： 在设置background-size 和background连写的时候注意覆盖问题 要么单独写的写在连写的下面 要么单独写的写在连写的里面 12/* 连写完整版中，也有background-size属性，注意连写的覆盖问题 */background：color image repeat attachment position / size ————————css3私有前缀（了解） 私有前缀是为了兼容老版本浏览器的写法， 对于新版本的浏览器无需添加。 如果需要兼容老版本浏览器，需要在css3属性前添加私有前缀。 私有前缀的作用：兼容老版本浏览器 常见不同浏览器的私有前缀代码： 1234谷歌、苹果浏览器：-webkit-火狐浏览器：-moz-IE浏览器：-ms-欧朋浏览器：-o- ヾ(๑╹◡╹)ﾉ” 演示不同浏览器支持的情况1234567891011121314151617div &#123; width: 200px; height: 200px; background-color: pink; margin: 100px auto; /*谷歌浏览器和safari浏览器的前缀 -webkit-*/ -webkit-transform: rotate(45deg); /*火狐浏览器的前缀 -moz-*/ -moz-transform: rotate(45deg); /*ie浏览器的前缀 -ms-*/ -ms-transform: rotate(45deg); /*opera浏览器的前缀 -o-*/ -o-transform: rotate(45deg); /*规范阶段的标准写法*/ transform: rotate(45deg);&#125; 注意： 对于移动端来说，大多都是ios和Android的操作系统，浏览器内核都是webkit内核，所以前缀只需要写-webkit- 即可 真正开发中，前缀会通过自动化打包工具自动添加，不用程序员一个个加。 ————————————————移动web的初识 移动web说白了就是移动设备中的web网页 移动web的开发现状 移动web开发与传统pc端开发的异同点 浏览器不同（兼容性不同） 其实：国内的UC、QQ、百度等手机浏览器大部分都是根据webkit修改过来的内核，国内暂无自主研发的内核。 pc端：浏览器种类很多，如果需要做兼容性处理，需要添加很多不同的私有前缀 移动端：兼容移动端主流浏览器，一般只需要兼容webkit内核即可，前缀只需要添加-webkit- 即可 并且手机更新换代很快，所以浏览器版本都比较新，对于css3新属性的支持会更好 屏幕尺寸不同（适配不同） pc端：屏幕较大，一般通过版心进行不同屏幕的适配 移动端：移动端设备屏幕尺寸较小，并且碎片化严重（即有很多不同尺寸的屏幕） 12Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，现在还有2K，4k屏等iPhone主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等 此时再使用版心适配就不合适了，需要使用一些特殊的布局方法→流式布局等 其实移动web和之前学习的pc端开发也是有相同点的：使用的技术本质上一样，还是HTML/CSS/JavaScript的技术。所以同学们学习上并不难，只需要学习几种其他的布局方式即可 移动端调试方法 针对于移动web开发，肯定需要在移动端上调试网页，那怎么操作呢？ 真机调试：使用真正的手机进行访问 等后期学到服务器内容，我们就能会： 使用本地服务器，在局域网中通过手机访问服务器上网页 使用外网服务器，在互联网中通过手机访问 模拟器调试：Chrome DevTools（谷歌浏览器）的模拟手机调试 手机设备五花八门，屏幕尺寸都大不一样，尤其是安卓端，给我们的页面预览带来了一些麻烦。在实际工作中，作为开发者一般不可能有足够的设备让我们去测试（除了测试部门 ），即便有，效率也特别的低，因此开发者一般都是通过浏览器的手机模拟器来模拟不同的设备。 当然，虽然开发阶段一般使用模拟器调试，但是在实际工作中，最终还是需要通过真机调试的。 视口（viewport）（了解） 先把vscode默认设置的视口参数去掉。 在浏览器中存在视口的概念。视口其实就是浏览器显示页面内容的屏幕区域。可以把视口当做是盛放网页的容器。 问题： 写四个div宽度为320px，都左浮动，在pc端中是一行中显示的，那么在手机端比如：iPhone4打开猜猜看效果是怎样的？ 还是一行中显示，此时html标签的宽高是980px。 原因是因为手机端的页面打开的时候会在视口中打开，而视口宽度默认是980px正好可以放下 ————————————–布局视口（layout viewport） 用于在手机上查看pc端网页的问题 历史原因：乔布斯提出了布局视口的概念 早期，只有pc端网页，早期网页的版心为980px，手机端如果直接查看980px宽度的网页，布局可能会乱掉，效果不好，用户体验极差！！ 后来乔布斯为了让移动端可以看到完整的网页，发明了布局视口这个概念！解决移动端查看pc端网页的问题 布局视口：相当于盛放网页的容器。并且一般宽度默认是980px。 当使用布局视口980来打开网页时，此时早期的网页可以放下，布局不会乱掉。 布局视口作用的过程： 移动端打开网页——》先把网页在980px的布局视口中打开（完美展示，不会乱掉）——》再把布局视口中的完美布局效果，缩放显示在移动端中（让用户可以在屏幕中看到全部的网页） 理想视口（ideal viewport） 其实就是布局视口的一个理想尺寸，也是实际开发移动web的常见设置。 刚刚我们发现了，如果布局视口是980px这种较大的情况 此时为了看到网页的全貌会缩小网页的效果，此时文字看起来很小 此时如果为了看清实际的文字放大网页的效果，这时候网页又看不完全，需要左右滑动 那么有没有一种情况：不缩放网页的同时，既可以文字正常阅读，又可以网页显示完全不用左右滑动呢？→理想视口 理想视口：当布局视口的尺寸等于设备屏幕的尺寸，才是理想视口 当然，为了保证在理想视口中网页效果不乱，我们之后布局的空间也会按照理想视口的空间进行布局，毕竟现在我们已经大量针对于移动端布局的网页了 那就剩一个问题了，我们如何设置布局视口的尺寸就等于当前设备屏幕的尺寸呢？→通过视口标签设置 meta标签的设置视口（记住） 通过meta标签可以进行视口的设置 1&lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt; 属性 解释说明 width 设置视口的宽度，device-width表示当前设备的宽度 user-scalable 设置用户是否可以缩放，yes/no initial-scale 初识缩放比 maximum-scale 最大缩放比 minimum-scale 最小缩放比 之后开发专门针对于移动端网页时，一般都需要加上以上meta标签，这算是移动web的第一个注意点。 ————————————– 接下来我们看下移动web中第二个指的注意点的点 二倍图 在移动端开发的时候会使用到二倍图，这也是移动web中需要同学们注意的第二个注意的。 但是如果想理解二倍图，首先我们先认识几个移动端中相关概念 物理像素 我们平时买手机的时候可以看到手机的各项参数，比如：iphone6/7/8手机的分辨率是750*1334 你所看到的这个分辨率其实指的就是物理像素 物理像素：指的是屏幕中显示的最小颗粒，是真实在物理现实中存在的。 说白了就是拿放大镜看到的屏幕中的一个一个发光点 我们知道了物理像素就是屏幕中的小小发光点之后，其实肯定有同学会联想到：css中的px，这个px我们平时也叫做css中的像素，那么物理像素和css像素px之间存在什么关系呢？？ css像素px是我们在css中常见的长度单位。但是现在需要注意： 之前pc端：1个px确实等于1个物理像素——》1个px对应于1个屏幕发光点 现在移动端：1个px可能等于多个物理像素——》1个px对应于多个屏幕发光点 比如：iphone6/7/8分辨率（物理像素）：750*1334——》一行只能放375px的盒子——》1px==2个物理像素（发光点） 移动端屏幕的特点 说到这里，有同学可能会觉得：为啥到移动端屏幕和pc端屏幕的设备像素比不能都是1:1的关系了呢？1:1不行嘛？ 其实pc端和早期的手机屏幕确实设备像素比是1:1，即：1px==1个物理像素（发光点） 后面随着技术的发展，出现了比如：Retina（视网膜屏幕）显示技术，可以将把更多的物理像素点压缩至一块屏幕，即1px==多个物理像素（发光点），从而达到更高的分辨率，并提高屏幕显示的细腻程度。 当物理像素发光点越密集，所以效果更加清晰细腻，因此现在越来越多的移动端屏幕都会选择1px对应多个物理像素的情况了。现在常见的情况就是1px==2个物理像素 那么既然随着技术的发展，1px==多个物理像素点，那么对于开发者来说的影响到底是什么呢？？此时我们在移动端中使用图片就会受到影响。 二倍图的出现 图片也存在分辨率的概念 图片分辨率：指的是图片在水平垂直方向需要显示多少个物理像素（小光点） 比如：图片的分辨率是 200*200，其实表示图片显示在屏幕中需要用到 200*200 的物理像素（发光点） ———————-存在的问题：以 200*200分辨率 的图片显示为例 之前在pc端中：图片需要 200*200 的发光点——》pc端中：1px==1发光点——》所以此时css中我们需要 200*200 px即可 但是现在移动端中：图片需要 200*200 的发光点——》iphone4中：1px==2发光点——》所以此时css中需要 100*100 px即可 问题： 如果我们需要在移动端iphone4中显示 100*100 px的图片，其实我们需要多大分辨率的图片才行？？？ 结论： 在移动端如：iphone4中，需要显示多少px的图片，为了清晰不被强行放大，其实需要使用宽高为2倍分辨率的图片才是最好的效果。而这使用的宽高为2倍分辨率大小的图片，称之为2倍图 实际开发中现在还存在2倍图、3倍图、4倍图之类的，但是具体使用哪一种看公司的需要或者要求 命名特点： xxxxx@2x.png：二倍图 xxxxx@3x.png：三倍图 注意点： 二倍图是我们移动web开发时的第二个代码注意点，总结来说：一般移动web开发图片常是二倍图，使用的时候记得把图片的分辨率除以二设置px即可。]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>移动web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动webday01笔记]]></title>
    <url>%2F2020%2F02%2F06%2F1-%E7%A7%BB%E5%8A%A8webday01%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[《部分案例代码下载》学习目标 能够使用2d转换属性 能够认识3d坐标系 能够使用3d转换属性 能够理解perspective和 transform-style：preserve-3d的区别 。。。。。。 理解上课的知识点…… CSS3的补充知识点过渡的基本认识（transition） 而在CSS3中，提供了一个过渡属性，可以让元素的样式慢慢的变化（过渡的效果） 需求： 一个div默认200*200，背景红色，要求鼠标移入之后宽度 变成800px 之前设置元素hover的样式，元素的样式是瞬间改变的，很突然。 如果需要让元素样式的变成慢慢的进行，可以怎么做呢？此时可以使用过渡来完成。 慢慢的变化是过渡的效果，除了宽度之外，其他属性都可以进行过渡，如颜色等 代码： transition:1s; 注意点： 过渡属性给需要过渡的元素本身加 过渡一般需要有两个状态不同的样式才能有效果 默认状态 hover状态 默认一般只要两个状态的样式不同，都会有过渡效果（有特殊情况） transition属性设置在不同状态中，效果不同。 如果写在默认状态中，那么鼠标移入移出时都有过渡效果 如果写在hover状态中，那么鼠标只有移入时有过渡效果，移出时没有。 因为移出时hover选择器不能选中元素，此时元素上没有transition属性了，所以移出时就没有过渡效果了。 2D转换（transform） transform: 转换，是CSS3最具颠覆性的几个特性之一，既可以用于2D转换，也可以用于3D转换。 transform：2D转换，元素在平面上实现缩放、旋转、平移等操作 缩放（scale） 缩放可以让元素进行放大或者缩小 需求：此时需要让一个有内容的div鼠标移入之后，让整体宽度放大为两倍，可以怎么实现呢？（如果包括内容也缩放呢？） 方案： 可以hover之后设置width为原来的两倍 但是div里面的内容并不会缩放 可以使用transform:scaleX(2); 对div进行缩放，并且div的内容也会缩放 代码： 12345678910/* 让宽度进行缩放 */transform: scaleX(2);/* 让高度进行缩放 */transform: scaleY(2);/* 如果需要同时设置宽度和高度进行缩放 */transform:scale(2,2);/* 特殊情况：或者只设置一个，表示宽高都是一个比例 */transform: scale(2); 取值： 没有单位的数字（倍数） 如果scale中是一个值，这个值表示宽高都是这个比例进行缩放 ヾ(๑╹◡╹)ﾉ” 图片放大效果（类似于穷游网的效果） 如：穷游网 hover时，让其中的img图片放大 缩放效果默认是以元素中心点放大的，如果需要让元素以特殊的位置放大，可以怎么做呢？ 转换原点（transform-origin） 通过transform-origin可以设置转换的中心原点 代码： transform-origin:center center; 取值： 原点的取值和之前学习的background-position是一样的 方位名词： 水平：left、center、right 垂直：top、center、bottom 坐标点：以元素左上角为原点，水平向右是x轴，垂直向下是y轴 ————————旋转（rotate） 通过rotate可以让元素进行旋转 代码： transform:rotate(90deg); 取值： 角度（deg） 顺时针进行转动 注意点： 也可以通过 transform-origin 属性来设置旋转原点 ヾ(๑╹◡╹)ﾉ” 扑克牌效果平移（translate） 可以通过translate让元素进行平移 代码： 12345678/* 沿着x轴进行平移 */transform: translateX(100px);/* 沿着y轴进行平移 */transform: translateY(100px);/* 沿着x轴和y轴进行移动 */transform: translate(100px,100px); 取值： 可以是具体的数值 可以是百分比 百分比是相对于自身元素的百分比！ 注意点： translate平移不会影响其他盒子的位置，是相对于自己原来的位置进行移动的，类似于相对定位的效果。 ヾ(๑╹◡╹)ﾉ” 让一个盒子水平垂直都居中 之前我们使用定位居中时，是具体通过margin完成效果的。但是当元素的宽高不确定，如由内容撑开时，使用translate会更好点。 ヾ(๑╹◡╹)ﾉ” 2d转换的小结转换的合写问题 之前每种转换都是分开实现的，如果需要让一个盒子同时实现三种转换，就需要使用到转换的合写形式 需求： 一个盒子在页面中居中，当hover到body时，让一个盒子往右平移400px，同时旋转360度，同时宽高都缩小为原来的0.5倍，可以怎么实现？ transform属性只能写一个，所以需要设置一个transform的连写形式。 代码： 1transform: translateX(1000px) rotate(360deg) scale(0.5); 如果先写rotate（360deg）可不可以呢？ 注意点： transform属性值之间需要以空格隔开 rotate属性如果写在第一个，rotate会让坐标轴也一起旋转，坐标轴改变之后会平移的方向！ 写在第一个的属性值会影响坐标轴 ————————3D转换（transform） transform不仅仅可以进行2D转换（平面内转换），还可以进行3D转换（立体的空间） 问题： 2D和3D的区别是什么呢？ 2D是一个平面，一个平面坐标系（只有x轴和y轴） 3D是一个立体的空间，一个立体坐标系（有x轴和y轴还有z轴） 说白了，3D就比2D多出了一个z轴 3D坐标系 实际在浏览器中有一个立体坐标系，用x、y、z分别表示空间的3个维度，三条轴互相垂直。 x轴： 水平向右是x轴正方向 y轴： 垂直向下是y轴正方向 z轴： 做浏览器平面垂直向脸方向是z轴正方向 透视/视距（perspective）需求： 让图片沿着x轴进行旋转，此时会立体旋转，看一下此时图片是往里还是往外旋转的？ 因为电脑显示屏是一个2D的平面，所以直接沿着x轴立体旋转看不出效果。 此时可以通过perspective属性，可以定义眼睛距视图的距离，单位是px。 perspective 属性给父元素设置，可以让其子元素有近大远小的效果。 代码： 1perspective：1000px; 其实和生活中的场景是一样的： 路实质都是一样的宽的，那怎么看出来那边更近呢？近的会大一点，远的会小一点。 房子实质都是一样大的，那怎么看出来右边的更近，左边的更远？近大远小 perspective 的取值：设置的是观察者眼睛离元素初始平面（z=0平面）的距离 如果取值越大，表示距离越远，近大远小的效果就越不明显 如果取值越小，表示距离越近，近大远小的效果就越明显 一般不会给太小，适中即可。 接下来我们主要学习最常用的两个3d转换~ 3d旋转（rotate） rotate直接设置就是2D平面效果。 当rotate沿着x轴或者y轴进行旋转时，此时就是3D的效果 代码： 12/* 让元素沿着x轴旋转 */transform: rotateX(45deg); 12/* 让元素沿着y轴旋转 */transform: rotateY(45deg); 123/* 让元素沿着z轴旋转，就是默认平面的效果，即rotate() */transform: rotateZ(45deg);transform: rotate(45deg); ヾ(๑╹◡╹)ﾉ” 演示3D旋转沿着不同轴旋转的效果 具体旋转的方向可以使用左手法则来判断： 掏出你的左手，左手握拳，伸出大拇指 让大拇指的指向轴的正方向 此时四指弯曲的方向就是图片旋转的方向 当然，其实具体效果不用纠结，写出代码看效果调试即可！ 3d平移（translate） translate属性如果沿着z轴平移也会有3D的效果 代码： 12/* 沿着z轴的正方向移动100px */transform: translateZ(45px); 3d移动的合写：1234/* 如果需要同时设置三个轴方向的平移，可以写成 */transform: translateX(100px) translateY(100px) translateZ(100px);/* 也可以使用3d移动的简写方法 */transform:translate3d(x,y,z); ヾ(๑╹◡╹)ﾉ” 3D立方体效果先是立方体的铺垫： 当一个元素rotateY(45deg)是什么效果？z轴指向哪里？ 当一个元素rotateY(90deg)是什么效果？z轴指向哪里？ 面朝向的方向就是z轴，旋转时，面朝的方向永远是z轴 实现六个面的思路： 先让这个面旋转到对应的方向 往z轴（面朝向）平移到对应的距离即可 ————————整体思路： 整体是一个ul，每一个面是li标签，然后让每一个面沿着不同方向旋转之后移动，组合成立方体 按照下方思路图一步步完成 transform-style 其实perspective是一个伪3D：说白了只是多个一个近大远小的效果而已，但是本质上来说还是一个平面元素 如果需要真正实现3D空间的转换，需要通过transform-style来实现 演示： ul里面两个li100*400，让第二个li标签沿着x轴旋转45deg，此时旋转ul盒子看的效果 默认效果： 默认效果来说发现li标签变短了，看不出3d效果 设置perspective：1000px之后： 设置视距之后只是有了近大远小的视觉效果，但是实际旋转看发现还是一个纸片人，不是真的3d元素 设置transform-style: preserve-3d; 之后： 设置了transform-style: preserve-3d; 元素变成3d元素，是真的3d元素 代码： transform-style:preserve-3d; 取值： flat：子元素在2d平面中显示（默认值） preserve-3d：子元素在3D空间中显示 注意点： transform-style属性同样也是给父元素添加的！！ transform-style与perspective的区别： perspective仅仅只是在平面中模拟出近大远小的效果，并不是真正的3D元素。 transform-style可以让其子元素在一个3D空间中布局，是真正的3D元素 以后真正需要完成真正的3D元素需要使用transform-style属性。如果需要有近大远小的视觉效果，可以加上perspective属性。 ————————ヾ(๑╹◡╹)ﾉ” 作业：3D导航效果 思路： 整体是ul，每个导航是1（100*50），li有两个面，使用a标签表示 通过定位先让两个a重叠，然后通过转换改变a标签面的位置 web前端首先需要沿着x轴旋转90deg，然后沿着z轴直走高度的一半（25） 传智播客 直接沿着z轴直走高度的一半（25）]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>移动web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二倍图对比]]></title>
    <url>%2F2020%2F02%2F06%2F4-%E4%BA%8C%E5%80%8D%E5%9B%BE%E5%AF%B9%E6%AF%94%2F</url>
    <content type="text"><![CDATA[二倍图对比 一倍图 二倍图]]></content>
      <tags>
        <tag>课堂测试demo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班PS的基本操作]]></title>
    <url>%2F2019%2F02%2F20%2F1-PS%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[ps的基本操作 作为前端工程师来说，对于PS的使用要求是： 会量尺寸 会量颜色 前端的重点在代码的编写，按照设计图完成一个页面。 首选项设置 在使用PS之前，需要先把首选项设置好 步骤： ctrl+k 打开首选项 选择单位与标尺 将单位都设置为像素 打开文件 使用PS操作图片的第一步：打开图片 直接把图片拖拽进PS即可 或者点击左上角 文件 → 打开 →选择对应文件即可 放大图片 有时候需要把图片放大方便量取 点击左侧工具栏中的缩放工具（Z） 使用快捷键 放大：ctrl + 缩小：ctrl - 拖动图片 有时候放大之后需要拖动图片查看其它部分 选择左侧工具栏中的抓手工具（H） 使用快捷键 按住空格不放手，然后鼠标左键按下拖动即可 量颜色 前端必会的PS操作之一：量颜色 选择左侧工具栏的吸管工具（I） 此时光标变成可以吸管，在需要量颜色的地方点击一下 点击之后，鼠标右击，选择 拷贝颜色的十六进制代码 ，最后在代码中 ctrl + v 即可 量尺寸 前端必会的PS操作之一：量尺寸 选择左侧工具栏的切片工具（C） 注意：默认显示的效果可能是剪裁工具，需要有以下操作 把需要量取的部分切片出来 双击切好的切片，查看量取的尺寸即可 切图操作 一般工作中图片都是UI设计好的，但是如果公司不够大，UI妹子人手不够忙不过来，可能需要自己切图 选择切片：使用切片工具把图片切成切片 导出切片：按下 ctrl + shift + alt + s （三键 + s） 在弹出窗口设置保存图片格式，点击储存 选择 切片 → 选中的切片 选择 设置 → 其他 →将图片放进文件夹 前面的勾去掉 最后点击确定，点击保存即可 拓展导出有透明的图片（了解） 导出有透明的图片，需要保证图片是PSD格式的图片，并且UI有设置对应的透明图片 PSD图片：是由多张透明的图片重叠出来的，一张完整的PSD图片是由很多只图层构成的 步骤： 把PSD格式图片拖入PS中 选择移动工具（V） 按住 ctrl 点击需要导出的透明图片（有颜色的部分） 在图层面板中找到高亮的部分，右击选择转换智能对象 双击转换后图层前方的小图标，点击确定 此时透明的图片已经选取好了，再按下 ctrl + shift + alt + s （三键 + s）直接保存即可]]></content>
      <tags>
        <tag>授课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day14笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday14%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[CSS3相关属性拓展（了解） css这个语言是随着时间的推进，有不同的版本迭代更新的，而css3是对css2的一些效果的完善和拓充，新增了很多新功能。但是值得注意的是css3因为的新版本，一些老版本（低版本的浏览器是不支持的！！）这样就存在一些兼容性问题。 遇到问题可以查阅相关的CSS手册 结构伪类选择器 通过标签的结构关系找到对应的元素 如果现在想找到ul标签下面的第几个li标签的时候，除了使用class大法之外，还可以使用结构伪类选择器完成效果 如果要找第一个li标签呢？ E:first-child ：选择其父元素的第一个子元素 还会判断是否是E元素，是才设置样式。（既是E标签，又是父元素的第一个子元素） 12345678比如：li：first-child &#123;css样式&#125;查找过程如下：1、首先找到li 2、找li标签的父元素3、找父元素第一个子元素4、看这个子元素是不是li 1、是-》加样式 2、不是-》不加样式 如果要找最后一个li标签呢？ E:last-child ：选择其父元素的最后一个子元素 还会判断是否是E元素，是才设置样式。（既是E标签，又是父元素的最后一个子元素） 12345678比如：li：last-child &#123;css样式&#125;查找过程如下：1、首先找到li 2、找li标签的父元素3、找父元素最后一个子元素4、看这个子元素是不是li 1、是-》加样式 2、不是-》不加样式 如果要找第12个li标签呢？ E:nth-child(n) ： 选择其父元素的第n个子元素 还会判断是否是E元素，是才设置样式（既是E元素，又是父元素的第n个子元素） 12345678比如：li：nth-child(n) &#123;css样式&#125;查找过程如下：1、首先找到li 2、找li标签的父元素3、找父元素第n个子元素4、看这个子元素是不是li 1、是-》加样式 2、不是-》不加样式 注意： 针对于nth-child括号中可以写一个带n的式子，n的取值范围是0~正无穷的整数 找到所有的偶数：2n/even 找到所有的奇数：2n-1 / 2n+1 /odd 找到前12个：-n+12 ……(更多新奇的玩法等待你的发现) 如果要找倒数第12个li标签呢？ E:nth-last-child(n)：选择其父元素的倒数第n个子元素 判断是否是E元素。（既是E元素，又是父元素的倒数第n个子元素） 12345678比如：li：nth-last-child(n) &#123;css样式&#125;查找过程如下：1、首先找到li 2、找li标签的父元素3、找父元素倒数第n个子元素4、看这个子元素是不是li 1、是-》加样式 2、不是-》不加样式 如果列表中混入了奸细，怎么才能找到第一个li标签呢？ E:nth-of-type(n)：选择其父元素的第n个E元素 选择的是子元素中的第n个E元素 12345比如：li：nth-of-type(n) &#123;css样式&#125;查找过程如下：1、首先找到li 2、找li标签的父元素3、找父元素的第n个E元素 盒子阴影/边框阴影（box-shadow） 类似于京东网页上，有盒子阴影的效果，同样可以通过CSS3中的box-shadow完成 代码： box-shadow: 10px 10px 10px #aaa; 1box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色 内/外阴影； 值 描述 h-shadow 必需。水平阴影的位置。允许负值。 v-shadow 必需。垂直阴影的位置。允许负值。 blur 可选。模糊距离。 spread 可选。阴影的尺寸。 color 可选。阴影的颜色。 inset 可选。将外部阴影 (outset) 改为内部阴影。 注意点： 前两个属性是必须写的。其余的可以省略。 默认阴影是外部阴影，但是不能设置outset这个属性值。如果想要内部阴影，请设置inset 文字阴影（text-shadow） 在CSS3中除了可以给盒子设置阴影效果之外，还可以给文字设置阴影效果 代码： text-shadow: 5px 5px 10px #000; 1text-shadow:水平位置 垂直位置 模糊距离 阴影颜色; 取值： 值 描述 h-shadow 必需。水平阴影的位置。允许负值。 v-shadow 必需。垂直阴影的位置。允许负值。 blur 可选。模糊的距离。 color 可选。阴影的颜色。 有趣的案例： 可以给一个文字设置多个阴影效果，中间使用逗号 “,” 进行连接。 12345/*凸出来文字*/text-shadow: 1px 1px 1px #000,-1px -1px 1px #fff;/*凹进去文字*/text-shadow: -1px -1px 1px #000,1px 1px 1px #fff;/* 背景颜色和文字颜色为#666即可 */ 背景图片大小（background-size） 有时候可以设置背景图片的大小 取值（分别设置的是宽度和高度）： 数字+px 百分比（相对于盒子的宽高百分比） 关键字 默认尺寸： contain：将背景图片等比例缩放，直到不会超出盒子的最大 直到宽度或者高度中有一个和盒子相等，并且背景图片没有溢出部分即止。 cover：将背景图片等比例缩放，直到填满整个盒子没有空白 直到宽度或者高度中有一个和盒子相等，并且背景图片填充满盒子如果有溢出部分则被隐藏 注意点： 在设置background-size 和background连写的时候注意覆盖问题 要么单独写的写在连写的下面 要么单独写的写在连写的里面 12/* 连写完整版中，也有background-size属性，注意连写的覆盖问题 */background：color image repeat attachment position / size 背景渐变 给一个元素设置 background-image 属性时，不仅可以通过url指定一张图片，还可以通过线性渐变(linear-gradient)或者径向渐变(radial-gradient)设置一张颜色渐变的背景图。 线性渐变 沿着一个方向颜色进行线性渐变 代码：background-image: linear-gradient(green,yellow); （默认从上往下渐变） 取值： 第一个值：可以是方向或者角度（可以省略） 方向 to top： 渐变从下到上。相当于: 0deg background-image: linear-gradient(to top,green,yellow); to right： 渐变从左到右。相当于: 90deg background-image: linear-gradient(to right,green,yellow); to bottom： 渐变从上到下。相当于: 180deg（默认值） background-image: linear-gradient(to bottom,green,yellow); to left： 渐变为从右到左。相当于: 270deg background-image: linear-gradient(to left,green,yellow); 角度（效果对比上图） 0deg：渐变从下往上 90deg：渐变从左往右 180deg：渐变从上往下（默认值） 270deg：渐变从右往左 第二个值：渐变的起止颜色（可以写两个或者多个） background-image: linear-gradient(to right,red,green,blue); 第一个是开始颜色，在最左端是纯红色 中间是绿色，所以最中间是纯绿色 最后一个是结束颜色，在最右端是纯蓝色 （之后每对颜色之间就是渐变） 纯颜色的点默认是等分线段的。 如果不想默认等分线段，想手动设置纯颜色的位置怎么做呢？ 可以在颜色的后面加上对应的长度（类似于线段的坐标） 可以在颜色的后面写上对应的长度 具体的数值 开始是第一个颜色，结束时最后一个颜色 然后把纯色放到对应的坐标上，再渐变即可 background-image: linear-gradient(to right,red 100px,green 200px,blue 300px); 百分比（原理同上） 拓展（了解）： 如果要求是几个纯色块呢？ 其实，可以分析： 开始是红色 结束时蓝色 中间一半的地方红色和蓝色（50%，先红色，在蓝色） background-image: linear-gradient(to right,red 50%,blue 50%); 那如果是多个色块会不会呢？ background-image: linear-gradient(to right,red 25%,blue 25%,blue 50%,red 50%,red 75%,blue 75%); 径向渐变 由中心向四周渐变（圆或者椭圆的效果） 代码： background-image: radial-gradient(green,yellow); （默认从中点向四周渐变） 取值： 第一个值：可以是形状或者半径（可以省略） 形状： circle：圆形 background-image: radial-gradient(circle,yellow,blue); ellipse：椭圆（默认值，要求盒子是一个矩形才会有效果，正方形时是圆形的效果） background-image: radial-gradient(ellipse,yellow,blue); 半径 指的是渐变范围的半径 设置两个相同的半径是一个正圆 background-image: radial-gradient(100px 100px,yellow,blue); 设置两个不同半径是一个椭圆 background-image: radial-gradient(300px 100px,yellow,blue); 圆形的位置 默认渐变的圆心在盒子的中点上，如果想改变圆心的位置怎么做呢？ 代码： background-image: radial-gradient(100px 100px at 100px 100px,yellow,blue); 设置圆心的位置：at 100px 100px 指的是盒子的坐标点 第二个值：渐变的起止颜色（可以写两个或者多个） 线性渐变一样的套路。 拓展（了解）： 可以完成一个立体小球的效果 1234567/* 立体球的效果 *//*先变成一个圆*/border-radius: 50%;/*给球设置一个背景颜色*/background-color: pink;/*设置渐变的圆心，然后使用半透明的渐变效果*/background-image: radial-gradient(at 100px 100px,rgba(0,0,0,0),rgba(0,0,0,.8)); 多背景写法 在CSS3中，可以做到给一个盒子设置多个背景图片 使用背景的连写形式，通过逗号分隔不同的背景图片即可。 注意点： 一个元素可以设置多个背景图片 每组背景属性之间需要通过逗号隔开 如果多组背景图片之间存在层叠关系，则前面的会覆盖在后面的背景图上 如果需要设置背景颜色，则背景颜色需要设置到最后一组中。 123background: url(1.jpg) no-repeat left top, url(2.jpg) no-repeat right bottom, url(3.gif) no-repeat center center/100px 100px; 元素本身透明（opacity） 除了可以让背景颜色透明之外，还可以让元素整体（包括里面的内容）一起透明 代码： opacity:0 取值： 0~1之间的一位小数 注意点： opacity会让元素整体透明，包括里面的内容（文字或者子元素） 背景透明仅仅只是让背景颜色变得透明，要根据需求选取方法。 通过phpstudy把静态页面部署到web服务器 安装phpstudy，注意不能有中文路径 双击软件 选择安装目录（注意，要求路径中不能有中文！！！默认的路径即可） 点击ok之后，会默认跳转到phpstudy官网上，然后提示为了防止重复初始化，选择是 点击是即可！ 然后可以访问自己本地的服务器，在地址栏中输入127.0.0.1 访问 把自己的网页放到www文件夹中，找到安装目录下面的www文件夹，把自己写好的页面放到这个文件夹中去 通过查看自己的ip，通过浏览器输入ip地址访问自己写的网页 win+r 输入cmd，往黑窗口中输入ipconfig，回车，以太网适配器查看192.168开头]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day13笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday13%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够完成品优购首页推荐模块 能够完成品优购首页焦点图模块 能够完成品优购首页楼层模块 理解上课的知识点…… 使用css写出一个三角形 有时候需要在页面中展示一个三角形，并且要求只使用css代码，不用图片或者字体图标，怎么实现？ 例如： 可以通过边框来实现： 设置一个盒子 设置四周不同颜色的边框 盒子的宽高设置为0 此时每一个方向的边框就是一个三角形了，选择一个之后让其他边框的颜色为全透明即可 背景透明 设置透明的方法 rgba（0,0,0,0） transparent：表示全透明的颜色 代码： 1234567891011121314151617/* ------------------------------------方法一------------------------------------ */div &#123; width: 0; height: 0; border-left: 100px solid purple; border-bottom: 100px solid transparent; border-right: 100px solid transparent; border-top: 100px solid transparent;&#125;/* -----------------------------------方法二--------------------------------------- */div &#123; width: 0px; height: 0px; border-width: 100px; border-style: solid; border-color: transparent transparent transparent purple;&#125; 三种鼠标常见的样式 通过cursor属性来设置鼠标移入盒子中的样式 取值： default ：光标为一个箭头（默认样式） pointer ：光标为一只小手（a标签的默认样式） text ：此光标指示文本 move：显示十字光标（表示可移动的效果） 拓展相邻兄弟选择器（知道即可） 用的不多 相邻选择器（+） 选择某个元素后面紧贴着的的第一个兄弟元素（ 只找一个） 例子：如何通过.son1找到.son2呢？ 1234&lt;div class="father"&gt; &lt;div class="son1"&gt;&lt;/div&gt; &lt;div class="son2"&gt;&lt;/div&gt;&lt;/div&gt; 可以通过相邻选择器找到： .son+div {} 注意点： 相邻兄弟选择只会选择相邻的那个元素，本身元素不会选中。 兄弟选择器（~） 选择某个元素后面的所有兄弟元素（会找一堆） 例子：找到h1标签后面所有兄弟中的p标签 12345678910&lt;div&gt; &lt;p&gt;1&lt;/p&gt; &lt;h1&gt;2&lt;/h1&gt; &lt;p&gt;3&lt;/p&gt; &lt;p&gt;4&lt;/p&gt; &lt;p&gt;5&lt;/p&gt; &lt;p&gt;6&lt;/p&gt; &lt;h2&gt;7&lt;/h2&gt;&lt;/div&gt;&lt;p&gt;8&lt;/p&gt; 可以通过兄弟选择器找到： h1~p {} 属性选择器的一些匹配规则（知道即可） 可以通过标签的属性选择标签 123&lt;a href="http://www.baidu.com" class="baidu"&gt;百度一下&lt;/a&gt;&lt;a href="#"&gt;点击不跳转&lt;/a&gt;&lt;a href="http://www.itcast.cn" class="itcast"&gt;传智播客&lt;/a&gt; E:[class] 选择带有class属性的E元素。 如：选中带有class属性的元素为红色 E:[class=”attr”] 选择带有class属性，并且属性值是attr的E元素 如：选中class属性值为baidu的元素为黄色 E:[class^=”attr”] 选择带有class属性，并且属性值是 以attr开头 的E元素 如：选中href属性值以http开头的元素为粉色 E:[class$=”attr”] 选择带有class属性，并且属性值是 以attr结尾 的E元素 如：选中href属性值以cn结尾的元素为橘色 E:[class*=”attr”] 选择带有class属性，并且属性值是 包含attr 的E元素 如：选中href属性值里包含www的元素为紫色]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day12笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday12%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够使用ps进行基本操作 能够完成项目基本目录搭建 能够完成品优购头部 能够完成品优购导航 能够设置盒子的边框圆角 。。。。。。 理解上课的知识点…… CSS3边框圆角（border-radius） 边框圆角： border-radius 可以让盒子的四角变得圆润，也可以画一个圆 border：边框 radius：半径 取值： 一个值：左上右上右下左下 两个值：左上右下、右上左下 三个值：左上、右上左下、右下 四个值：左上、右上、右下、左下 记忆方法： 先从左上开始赋值，顺时针赋值，如果没有赋值的，看对面的。 常见的应用： 画一个圆 盒子必须是一个正方形 border-radius：50% 胶囊按钮 盒子是一个矩形 border-radius：盒子高度的一半 样式初始化的补充 有时候会需要去除input默认的边框和textarea的自由缩放 去除边框： border：none 去除input点击之后的边框轮廓线： outline-style: none 设置禁止textarea自由缩放： resize：none 盒子宽高的百分比设置需求： 如果需要一个父盒子中的四个子盒子，宽度为父盒子的四分之一，高度为父盒子的高度，怎么去完成？ 方案： 可以直接设置数值（自己计算） 可以直接设置百分比（百分比相对于父盒子的宽高，让浏览器去计算） 品优购项目搭建 每一个项目开始之前都要有项目的搭建。 品优购作为一个有很多页面的大型的项目，每个页面都有自己对应的css文件，所以css文件需要单独放在一个css文件夹中 项目搭建步骤： 新建项目文件夹 新建images文件夹，把图片放在images文件夹中 新建css文件夹，把所有页面的css文件放入 大型项目有多个页面，每个页面都有对应的css文件，为了项目的查阅方便，一般会把所有的css专门放在一个文件夹汇总 新建index.css放入文件夹 新建页面index.html 样式的初始化： index.css中进行样式的初始化（把项目中要用的样式先写好） 因为样式的初始化每个项目都是一样的，所有公司开发的时候会把样式初始化代码写成一个单独的base.css文件，开发的时候直接引入即可 ヾ(๑╹◡╹)ﾉ”查看公司写好的base.css的代码 问题：为什么要进行css初始化？请举例说明 为什么要进行css初始化？ 因为不同浏览器对于不同标签有默认样式（比如默认padding和margin、a标签默认的下划线……） 开发的时候并不需要默认的样式。并且需要在不同浏览器中展示的效果是一样的 所以我们一般在项目开始的时候，会去除浏览器默认的样式即：css的初始化，需要的时候自己设置样式即可。 12345678910111213141516171819&lt;!-- 举例说明 --&gt;1.清除标签的默认margin和padding：* &#123; margin: 0; padding: 0;&#125;2.清除li标签之前的小点：ul&#123; list-style: none;&#125;3.清除a的下划线：a &#123; text-decoration:none；&#125;......（base.css中有一堆） 在index.html中通过link标签引入index.css 页面ico图标的使用（了解） 较大的网站的title前面会有一个小的图标，这个小图标一般使用的就是ico图标 使用步骤： 获取ico图标 一般是由UI设计师提供.ico图片 可以通过 一些转换网站 将图片上传，获取ico图标 使用ico图标 &lt;link rel=&quot;icon&quot; href=&quot; favicon.ico的路径&quot;&gt; 一般将ico图标放到根目录下面 页面seo三大标签（了解） 页面中有三个标签对于seo非常重要！ title：标题标签 表示网页的标题，对于网页的seo权重很高！！ 一个大型的网页，也需要有对应的title标签的： 1&lt;title&gt;38期品优购&lt;/title&gt; Description：描述标签 是对于网页内容的描述，可以是对于标题的补充，一般文字不超过120个字。 一个大型的网页，也需要有对应的description标签的： 1&lt;meta name="description" content="品优购-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!" /&gt; Keywords：关键字标签 是页面内容的关键字，对于seo也较为重要。 一个大型的网页，也需要有对应的Keywords标签的： 1&lt;meta name="Keywords" content="网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,品优购" /&gt;]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day11笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday11%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够理解什么是精灵图及优点（将很多小图片放到一张图片上，减少对服务器请求次数，减轻服务器压力） 能够使用精灵图设置背景图片 能够使用字体图标 能够完成滑动门案例 能够写出常用的样式初始化 能够了解BFC的作用以及触发BFC的几种方式 。。。。。。 理解上课的知识点…… 双伪元素清除浮动（了解） 伪元素清除浮动升级版（既解决了清除浮动、又解决了塌陷 ） 两个伪元素清除法的合并方法如下： 清除浮动： 可以使用单伪元素浮动法 ::after 12345.clearfix::after &#123; content: ''; display: block; clear: both;&#125; margin的塌陷问题： 可以使用伪元素 ::before 解决margin的塌陷问题 12345.clearfix::before &#123; content: ''; /* 触发BFC + 并且转换成块级元素 */ display: table;&#125; 合并起来： 使用并集选择器合并代码 此时.clearfix这个类既可以清除浮动，又可以解决margin的塌陷现象 12345678910111213.clearfix::before,.clearfix::after &#123; content: ""; /* BFC + 转化为块级元素 */ display: table;&#125;.clearfix::after &#123; clear: both;&#125;/* 兼容 IE 67 */.clearfix &#123; *zoom: 1;&#125; ヾ(๑╹◡╹)ﾉ”检查网页 检查大网页的样式（小米、淘宝），一般用双伪元素 只需要把双伪元素清除法的代码在样式初始化的时候写好，使用的时候直接加类名即可 精灵图（会使用） 实际开发中，会把很多小图片合并成一张大图片，这张大图片就是精灵图。 问题： 浏览器打开淘宝网，网页中的图片怎么显示到用户的电脑中的呢？ → 图片并不是用户电脑本地有的，而是通过服务器发送给用户，才在浏览器中显示的！！ ヾ(๑╹◡╹)ﾉ”画图了解下前端与后端交互好处： 原本每张小图片要发送很多次，服务器亚历山大 但是如果使用精灵图，只需要发送一次即可。 减少服务器的请求次数，减轻服务器的压力。 精灵图的使用（必会） 如何在页面中显示出精灵图中的小图片呢？ 步骤： 创建一个盒子 通过PS量取小图片的尺寸，将对应小图片的宽高直接设置给盒子 将精灵图设置为盒子的背景图片 将小图片的坐标取负值添加给background-position：x y; 让背景图片往上移动，y轴坐标是负数 让背景图片往左移动，x轴坐标是负数 注意： 盒子和小图片大小一致 精灵图通过背景定位， 让所有的小图片都能显示 在ps中，通过切片，量取对应的坐标，直接取赋值（负数）即可 ヾ(๑╹◡╹)ﾉ”拼出自己的名字字体图标（了解） 在网页的很多地方，比如下箭头、照相机图标、搜索图标… 使用的就是字体图标 字体图标本质上就是文字，所以可以通过css中文字相关的属性操作字体图标。 需求： 页面中有很多的图标（左右箭头、购物车、用户、等等），怎么完成页面的效果？？ 方案： 使用图片 → 可以。 缺点：图片在放大的时候会失真（边缘模糊） 字体图标 → 可以。 优点：放大不会失真，还可以设置css样式 总结： 本质是文字，可以通过css文字相关样式设置字体图标的样式（颜色、大小、加粗），并且不会失真 使用步骤下载字体图标（一般UI会给）： 登录阿里 iconfont 字库，将自己想要的图标加入购物车 点击购物车图标，选择下载代码 使用字体图标步骤： 在项目目录新建 fonts 文件夹，将字体图标文件内所有文件拷贝进 fonts 文件夹 在项目中通过link标签引入字体css文件（iconfont.css） 字体文件包中的 demo_fontclass.html 为说明书 1&lt;link rel="stylesheet" href="fonts/iconfont.css"&gt; 通过i标签上面设置对应类名来使用 1&lt;i class=&quot;iconfont icon-refresh&quot;&gt;&lt;/i&gt; 注意： 设置字体图标样式时，注意层叠性问题！！（通过iconfont类名找到i标签） 不能改变字体图标的font-family，否则样式不生效 拓展滑动门（了解） 利用已学技术，根据文本内容，让背景自适应。可以实现一些特殊的效果（QQ聊天气泡） 微信滑动门 滑动门步骤： 三个盒子要在一行中显示，都需要浮动起来。 left：宽高和背景图片的大小一致 center：高度为背景图片的高度，宽度由内容撑开（浮动之后的元素宽度默认由内容撑开），背景平铺 right：宽高和背景图片的大小一致 浮动元素的覆盖问题（了解） 浮动：不能覆盖文字、图片和行内块，会把这些元素挤到一边去。 说白了，浮动元素一般只能覆盖标准流中的块级元素 ヾ(๑╹◡╹)ﾉ”行内元素与浮动的特殊情况 浮动的元素可以覆盖标准流中的块级元素 浮动的元素不能覆盖行内块元素 浮动元素不能覆盖行内元素 浮动的元素不能覆盖文字（图文环绕） 触发BFC的方法（了解） BFC → Block Formatting Context：块级格式化上下文 知道BFC的作用： 触发父盒子的BFC → 可以解决margin的塌陷 触发父盒子的BFC → 可以清除浮动 方法： 可以通过测试是否能清除浮动 给父盒子设置： float的值不为none overflow的值不为visible。 display的值为table，table-cell，inline-block position的值不为relative和static 等等…… 小米练习 每个项目都是一个单独的文件夹，文件夹中放项目相关的资源（图片、inde.html、index.css等等） 步骤： 新建项目文件夹 新建images文件夹，把图片放在images文件夹中 新建页面index.html 新建css文件index.css index.css中进行样式的初始化（可以把初始化CSS文件引入） 在index.html中通过link标签引入index.css]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day10笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday10%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 理解定位的使用场景（一般用于解决盒子之间的层叠问题） 能够说出相对定位的特点 能够说出绝对定位的特点 能够说出固定定位的特点 能够理解子绝父相（子盒子绝对定位，父盒子相对定位，布局中会经常使用到） 能够实现z-index控制元素的层级（数值越大，层级越高） 能够说出vertical-align属性的使用（一般用于设置文本与行内块元素（图片）的垂直对齐方式） 能够说出三种隐藏元素的区别（内容超出隐藏、元素隐藏（看不见）、元素隐藏（不存在）） 。。。。。。 理解上课的知识点…… 定位 可以解决盒子与盒子之间的层叠问题 需求：现在在页面上有两个盒子，其中第二个盒子将第一个盒子压住了一半，怎么完成？？？ 解决方案： 使用margin的单方向应用 但是实际开发中并不会使用marign完成层叠的效果 使用 定位 来完成效果 1234567.blue &#123; /*定位：position*/ position: absolute; /*定位需要配合方位属性一起使用的！！*/ top: 150px; left: 150px;&#125; 定位初体验position：absolute； 设置定位 方位属性： 水平和垂直方向各选一个使用即可，选取的原则是就近原则 （离哪边近用哪个） 水平方向： left：相对于左边框的距离 right：相对于右边框的距离 垂直方向： top：相对于上边框的距离 bottom：相对于下边框的距离 静态定位（static） 标准流中的元素默认都是静态定位 代码： position: static; （默认值）静态定位 静态定位是有一定争议的（有些人认为静态定位不算定位） 面试时候回答：三种定位方式，优先回答其他三个（相对、绝对、固定），如果四种再写静态定位 注意点： 静态定位不能通过方位属性进行移动 相对定位（relative） 盒子相对于自己之前的位置定位移动（红绿蓝） 代码：position: relative； 相对定位 特点： 要配合方位属性使用，不然无法移动 相对于自己原来的位置进行偏移 设置了相对定位的元素在页面上占据了位置-》没有脱标 应用场景： 配合绝对定位组CP（子绝父相），用的最多 用于小范围的移动（比如让某个标签稍微往下移动几个像素） 绝对定位（absolute） 绝对定位相对于非静态定位的父元素进行定位移动 代码：position: absolute; 绝对定位 特点： 需要配合方位属性移动使用 绝对定位相对谁移动？ 默认相对于浏览器进行移动，但是如果有父元素，则相对于有定位的父元素进行移动 没有父元素 → 默认相对于浏览器进行移动 有父元素（判断父元素有没有定位） 没有定位 → 默认相对于浏览器进行移动 有定位 → 相对于有定位的父元素进行移动 绝对定位的元素在页面中 不占位置 → 脱标 应用场景： 子绝父相 子绝父相 让子元素相对于父元素进行移动 → 使用子绝父相，即子元素绝对定位，父元素相对定位 子绝父相在定位中使用的最常见，并且子绝父相不会影响页面的布局 ヾ(๑╹◡╹)ﾉ”比较子绝父相的好处 不会影响之后的布局 特殊情况： 当使用子绝父相的时候，父元素已经有绝对定位了，此时忽略父元素，直接使用子绝即可 子绝父绝的特殊情况 ヾ(๑╹◡╹)ﾉ”子绝父相定位居中案例1父盒子：600*400 子盒子：200*100 需求1： 通过定位让子盒子在父盒子水平居中 思路： 先让子盒子往右移动父盒子的一半 子绝父相，left：50%; 再让子盒子往左移动自己的一半 普通做法：margin-left:负子盒子宽度的一半 → 属性值是负数 缺点：子盒子宽度变化之后，需要重新改代码 优化做法：CSS3的新属性：transform：translateX（-50%） transform：translateX（-50%） → 表示沿着x轴的负方向移动自己的一半 需求2： 通过的定位让子盒子在父盒子中水平垂直都居中 同理嘛~ 但是需要注意，transform属性也会层叠。 ヾ(๑╹◡╹)ﾉ”课堂练习：网站头部hot图标 ヾ(๑╹◡╹)ﾉ”课堂练习：小米商品页半透明效果 固定定位 （fixed） 盒子相对于浏览器进行定位移动 代码：position: fixed; 固定定位 特点： 配合方位属性一起使用 永远相进行移动 固定定位的元素也不在页面中占据位置 → 脱标 ヾ(๑╹◡╹)ﾉ”课堂练习：新浪网页 注意的是：脱标后的元素宽度默认由内容撑开 就算是div，脱标之后宽度也不再默认是父元素宽度 四种定位总结 定位方式 属性值 相对于谁移动 占不占位置 静态定位 static 不能通过方位属性移动 占位置 相对定位 relative 相对于自己原来的位置 占位置 绝对地位 absolute 默认浏览器/相对于有定位的父元素移动 不占位置（脱标） 固定定位 fixed 永远相对于浏览器 不占位置（脱标） 元素的层级关系 开发者有时候需要设置元素的层级关系，层叠是谁在上面 标准流、浮动、定位的层级关系 两个盒子之间的比较 12三种层叠关系：标准流 &lt; 浮动 &lt; 定位（相对、绝对、固定） 定位的层级关系总结： 三者的层叠关系相同，HTML中写在下面元素的覆盖上面的 可以通过 z-index 属性手动设置定位元素的层级关系 取值：没有单位的数字 效果：数值越大，层级越高 垂直对齐方式（vertical-align） 在开发中可能会遇到行内块元素垂直对齐的问题，此时可以使用 vertical-align 属性让图片 问题： 当图片和文字在一行中显示时，其实底部是不对齐的！ 图片和文字底部对齐怎么做？ 解决方法： 此时可以给图片设置 vertical-align:bottom; 即可 vertical-align 就是用来设置行内/行内块元素垂直对齐的问题的 取值： baseline：基线对齐 top：顶部对齐 middle：中线对齐 bottom：底部对齐 项目中可以使用 vertical-align 解决的bug： 场景1 : 文本框（text）和表单按钮（button）无法对齐问题； 场景2 : input 和 img无法对齐的问题； 场景3 : div里放一个文本框 ，此时文本框无法靠顶； 场景4：div有img标签撑开，此时img标签下方有间隙（给img标签设置vertical-align即可）； 场景5 : 使用line-height让img标签垂直居中，需要给img标签单独设置vertical-align：middle 注意点： 在学习完浮动之后，就不推荐优先使用行内块元素让div一行中显示，因为会出现垂直对齐的问题，以后优先使用浮动完成效果 溢出内容效果（overflow） 设置盒子内容超出部分的显示效果 取值： visible：超出部分可见（默认值） hidden：超出部分隐藏 scroll：显示滚动条 auto：根据内容的多少，自动显示或者隐藏滚动条 CSS三种隐藏方式 CSS中有三种与隐藏相关的属性，需要知道他们之间的区别 内容超出隐藏 overflow:hidden； 盒子内容超出部分隐藏 注意： 隐藏的元素的超出内容，元素本身可见 元素隐藏 visibility：hidden； 让元素隐藏，但在页面中仍然占位置 → 相当于穿上了隐形斗篷 注意：让元素隐藏，并且占位置 元素隐藏 display：none； 让元素隐藏，并且在页面中不占位置 → 相当于把元素删除了 注意：让元素隐藏，并且不占位置 CSS三种隐藏方式总结 属性 作用 特点 overflow：hidden; 超出内容隐藏 超出盒子部分的内容隐藏 visibility：hidden; 元素本身隐藏 在页面中占位置 display：none; 元素本身隐藏 在页面中不占位置 html 标签的嵌套规范（了解） 块级元素一般用于布局：比如div在页面的布局用的最多； 行内元素一般用于放文字：比如span、a标签里面一般放文字 标签之间是不能随意嵌套的，书写的时候应该有对应的规范： 注意点： 行内元素一般放文字或者行内元素，但是a标签之间不能互相嵌套（会被浏览器解析成两个a标签）； 块级元素相当于一个容器，里面可以放文字、行内元素、块级元素，但是p标签不能嵌套块级元素（p标签会被拆分成两个p标签） p标签作为一个段落标签，只有文字才会组成段落，所以p标签里面一般只放文字，不要放块级元素！！！ 拓展（了解）字符间距（letter-spacing） 默认情况下，页面中的文字都是紧挨着的，但是有少数情况下，我们也可以让文字之间的距离变大一点 文字有英文和中文 效果演示： 作用：设置文本中字符（中文汉字/英文字母）之间的距离 代码： letter-spacing: 20px; 取值： 可以是不同单位的数值，允许使用负值 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; div p &#123; letter-spacing: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt;hello world! 来啦老弟！&lt;/p&gt; &lt;!-- letter spacing：设置的是字符间距，英文即字母之间的间距，中文即文字之间的间距 --&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 单词间距（word-spacing） 对于英文来说，有的时候还需要设置单词之间的距离，这个怎么操作呢？ 其实，英文单词之间的距离，指的得就是空格的宽度 效果： 代码： word-spacing: 20px; 取值： 可以是不同单位的数值，允许使用负值 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; div p&#123; word-spacing: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt;hello world! 来啦 老弟！&lt;/p&gt; &lt;!-- word spacing：设置的是单词间距，一般只会用在英文中，对于中文来说，可以看做是段落中空格的间距 --&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day09笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday09%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够完成尚合项目的头部部分 能够完成尚合的导航部分 能够完成尚合的产品详情部分 能够完成尚合的底部部分 。。。。。。 理解上课的知识点…… 版心 宽度固定且水平居中的盒子 为什么要有版心? 因为每台电脑的屏幕不一样大，为了让不同屏幕大小的电脑都能看到页面的主体内容，我们需要把网页的内容约束在版心里。 屏幕大能看到主体内容： 屏幕小也能看到主体内容： 因为主要内容都放在版心中，所以能让更多大小的屏幕完整的看到页面的主体内容。 版心代码： 12345678/*通常版心命名为w*/.w &#123; width: 1200px； margin：0 auto；&#125;/----------------------------------------------------//*给主体内容的盒子设置版心，直接加上w这个类即可*/&lt;div class="w"&gt;&lt;/div&gt; 常见的布局方式（了解） 注意点：实际项目中，写每个盒子的时候都要判断有没有版心，版心很重要！！ 常见的三种布局方式： 了解即可，在之后的项目中会写到对应的布局 一列固定宽度且居中 常见的布局结构，一般每个盒子都设置了版心 两列左窄右宽型 常见的就是banner部分左侧导航，右侧轮播图的效果 如： 小米官网 通栏平均分布型 占满浏览器的一行叫做通栏，对于通栏的div，可以不用设置宽度，默认就是独占一行的 锤子官网 一般布局方式会综合运用： 上课的记录 上课敲的项目首要任务是听懂 学习的是写页面的步骤，每个知识点都会，不会的是接下来做什么 如果有记笔记习惯的同学，可以把老师的步骤记下来，然后忘记怎么做的时候根据自己写的步骤看看能不能一步一步做出来 比如： 页面的顶部区域 大盒子需要一个版心 里面两张图片，分别左右浮动 图片离上面有距离，给大盒子设置 padding-top …… 尚合项目项目搭建 整个项目应该就是一个文件夹，文件夹中放项目中的所有资源（图片、html、css） 步骤： 新建一个文件夹，作为项目文件夹 → 一个项目就应该有一个文件夹 在项目文件夹中新建images文件夹 → 存放项目相关图片 在项目文件夹中新建 index.html文件 → 页面文件 在项目文件夹中新建 index.css文件 → 样式文件 样式初始化 开始的时候先把项目中常见的css样式先写好→样式的初始化 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/*-----------------------------项目样式的初始化--------------------------------------------*//*清除默认的marign和padding*/* &#123; margin: 0; padding: 0;&#125;/*消除页面中li的小点*/ul &#123; list-style: none;&#125;/*消除a标签默认的下划线*/a &#123; text-decoration: none;&#125;/*左浮动的类*/.fl &#123; float: left; &#125;/*右浮动的类*/.fr &#123; float: right;&#125;/*清除浮动的代码*/.clearfix::after &#123; content: ''; display: block; clear: both; height: 0; line-height: 0; visibility: hidden;&#125;/*版心的样式*//*版心就是宽度固定水平居中的盒子*/.w &#123; width: 980px; margin: 0 auto;&#125;/*为了在上面看到下面的标签 最后删掉*//*body &#123; height: 2000px;&#125;*/ 写代码( ´-ω ･)▄︻┻┳══━一]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day08笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday08%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 了解margin合并与塌陷现象（相邻块元素垂直外边距的合并，嵌套块元素垂直外边距的塌陷） 能够说出解决margin塌陷的几种方式 理解浮动的作用及特点（解决上下盒子 可以水平布局的问题，脱标） 能够说出几种清除浮动的方式（额外标签法、overflow、伪元素清除浮动） 能够使用浮动完成导航案例 能够说清除浮动的目的（消除浮动对之后元素的影响） 理解上课的知识点 margin的特殊现象marign的合并现象 正常情况下：比如当两个盒子水平布局时，左右的margin会叠加； 但是当两个盒子垂直布局时，会出现合并现象（两者之间的距离取最大值） 正常现象： 比如：当两个盒子水平布局时，左右的margin会叠加，盒子之间的距离为margin的和。 合并现象： 当两个盒子垂直布局时，上下的margin会合并，盒子之间的距离为margin的最大值 合并现象解决方案： 避免就好了 上下盒子的margin距离，只给其中一个设置即可 margin的塌陷现象（重要） 互相嵌套的块级元素，垂直外边距会塌陷 塌陷现象： 互相嵌套的块级元素，如果给子元素设置margin-top，此时父元素会一起往下移动！！！ 塌陷现象解决方案： 给父盒子加一个边框 相当于给老父亲添加一块钢板 给父盒子加 padding-top 相当于给老父亲添加一层泡沫 给父盒子设置属性 overflow: hidden （该属性触发了父盒子的BFC：块级格式化上下文） 触发父盒子的BFC可以解决塌陷问题 给父盒子设置浮动 给父盒子设置为行内块 伪元素 顾名思义：假的元素 对比： 元素：指的是页面中HTML标签 伪元素：假的HTML标签 伪元素是由CSS代码模拟的一个HTML标签 不是真的HTML标签 学习伪元素的时候，可以就当做学习两个新标签来看。 种类： 常见的有2种 ::after(在...之后) ：在标签里面的最后，添加一个伪元素 ::before(在...之前) ：在标签里面的最前，添加一个伪元素 ヾ(๑╹◡╹)ﾉ”div里面放一个span标签，然后用伪元素模拟效果 注意点： 使用伪元素有一个必加属性 content:&#39;&#39;; content属性值里写标签里面的问题 伪元素默认是行内元素 浮动浮动初体验 解决盒子水平布局的问题 需求：在页面上有两个div，在一行中显示，一个靠左，一个靠右 解决方法： 先转换成行内块元素，再使用marign移动div的位置 但是缺点是：当改变浏览器大小的时候，效果就崩了。 其实有一个css属性就是为了完成这个效果的→浮动 浮动的代码： float:left; →左浮动 float:right; →右浮动 此时我们就可以使用浮动完成需求了 浮动的特点（了解） 重点在于浮动的使用 标准流：就是浏览器默认摆放盒子的顺序（从上往下、从左往右） 浮动的特点： 浮动的元素会脱离标准流（脱标） 可以把标准想象成地面 相当于飘起来了 相当于飘到了空中 在标准流中不占位置 在地面中不占位置→地面中之后的元素会往上跑 浮动的元素会覆盖在标准流的元素之上 比标准流高出半个级别 之后学习的定位比标准流高出一个级别 浮动的规则：浮动找浮动 浮动元素排列的时候，会找上一个浮动元素的后面 浮动的重点：浮动的元素只会影响下面的元素 浮动的元素受到上一个盒子边界的限制（块级元素独占一行） .png) 浮动的元素有特殊的显示效果 可以设置宽高 一行可以显示多个 注意：浮动元素不能使用text-align或者margin：0 auto居中！ 记忆 : 1231. 浮动元素会脱标 ==&gt; 飘起来了（不占位置） ==&gt; 比标准流高半个级别2. 浮动元素会受到上一个盒子边界的影响3. 浮动元素可以设置宽高，一行可以显示多个 浮动的案例浮动完成页面的布局 SEO导航 之前直接使用 a 标签 display：inline-block制作导航是有问题的 问题： 导航与导航之间应该是列表关系，按照标签语义化的要求，必须要用到 ul 标签 a 标签不用其他的标签包裹起来，搜索引擎在查看页面时，认为该页面在作弊，会把排名靠后 所以导航必须要用 ul 和 li 将 a 标签包裹起来 书写导航的步骤： 清除默认的margin和padding→初始化样式 找到ul，去除小圆点→ list-style:none; 给li标签设置 float：left 让li标签在一行中显示 给a标签设置宽高 点击导航的四角应该也能跳转的，所以a标签应该有宽高 问题来了：a标签是行内元素，默认不能设置宽高的，怎么办呢？ 方法： 三种方法都可以 给a标签设置 display: inline-block; 给a标签设置 display: block; li标签是由a标签撑开的，所以a标签在自己的父元素li中就是独占一行的 给a标签设置 float：left; 因为浮动元素也是可以设置宽高的 清除浮动（清除浮动的影响） 浮动带来的问题：浮动元素撑不开父级容器 seo导航的问题回顾之前写的SEO导航，存在一定的问题： 如果此时想在SEO导航下面写上一个红色的div，会发现 原因： 审查元素之后你会发现：因为li标签都是浮动了，在标准流中不占位置，所以不能把ul撑开，此时ul的高度为0。 这就是浮动带来的问题：ul没高度，影响了之后盒子的布局 那么如果解决浮动的问题呢？ 我们可以通过清除浮动的方法来让ul有高度 清除浮动 清除浮动其实就是：清除浮动带来的影响（问题） 如：ul没有高度，我们需要清除这个影响→让ul有高度 浮动带来的影响（问题）： 当父元素没有设置高度，此时由子元素撑开。但是如果 子元素浮动了（相当于飘起来了→在标准流中不占位置），此时不能把父元素撑开（父元素高度为0） 清除浮动的方法（会用即可）额外标签法 不推荐，会产生一个多余的盒子 步骤： 在父元素里面的最后的添加一个块级元素 给添加的块级元素设置清除浮动的核心代码 clear:both; 缺点： 需要在页面中添加额外的标签，让页面的HTML结构变得更加复杂 使用 overflow 清除浮动 在某些特定场景下使用不了 步骤： 直接给父元素设置 overflow:hidden; 单伪元素清除法 其实原理和额外标签法一样，使用伪元素替代了HTML标签 代码： 一般伪元素清除法会使用 .clearfix 这个类名 1234567891011121314.clearfix::after &#123; /*伪元素必加的属性*/ content: ''; /*转换为块级元素*/ display: block; /*清除浮动的核心代码*/ clear: both; /*其实有上面三个属性已经可以生效了，但是可能在开发的时候，会有额外的几个属性！！*/ /*目的：在页面中看不到伪元素*/ height: 0; line-height: 0; visibility: hidden;&#125; 伪元素由CSS渲染，不会增加额外的html标签（解决了额外标签法的缺点） 设置高度 简单粗暴，但是不推荐，不利于后期维护 步骤： 直接给父元素设置高度 浮动最开始的作用 浮动最开始的作用是为了将网页做成报纸那样的图文环绕效果 图文环绕： ヾ(๑╹◡╹)ﾉ”网页头部案例~拓展行内元素margin和padding的失效 行内元素的上下margin和padding会失效 ヾ(๑╹◡╹)ﾉ”上面两个span，下面有个p标签~ 现象： margin 行内元素的margin 左右的margin能生效 上下的margin会失效！！ 没有作用 行内元素的padding 左右的padding能生效 上下的padding会失效 注意： 块级元素和行内块元素的margin和padding随便使用！没问题 行内元素的上下margin和上下padding会失效！！开发中不要使用！！]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day07笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday07%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够说出盒子模型的组成（content、padding、border、margin） 能够使用border的相关属性（width、color、style） 能够使用border-collapse实现边框合并 能够计算盒子的实际大小（content+padding+border） 能够说出*{margin:0;padding:0;}的作用 。。。。。。 理解上课的知识点…… 盒子模型 一种思维方式（万物皆盒子） 盒子模型的组成 盒子模型的四个组成部分 生活中的盒子： 回到代码的总结： 内容：content 即盒子里面的文字或者标签 内边距：padding 即盒子边框到内容之间的距离 边框：border 即盒子的边框 外边距：margin 即盒子与盒子之间的距离 边框（border）border相关属性 border-width：边框的宽度 border-style：边框的样式 solid：实线 （用的最多） dashed：虚线 dotted：点线 border-color：边框的颜色 border的连写代码： border:1px solid #000; 书写顺序 ： border: 边框宽度 边框样式 边框颜色; 单方向设置border 单独设置盒子的一条边框 代码： border-left:1px solid #000; border-方位名词：边框粗细 边框样式 边框颜色； 1234border-left 左边框border-right 右边框border-top 上边框border-bottom 下边框 边框合并（border-collapse） 也叫做细线表格 之前使用表格属性设置表格的样式，其实不推荐使用样式属性，那我们使用css改写之前的效果 ヾ(๑╹◡╹)ﾉ”使用css改写之前的表格案例代码： border-collapse:collapse； 效果： 让表格的边框变成真正的一条边框 盒子大小的初级计算公式 学完border之后，可以学习盒子大小的初级计算公式 需求： 123&lt;!-- 需求 : 盒子尺寸 400*400 , 背景绿色, 边框: 10px 实线 黑色 --&gt; 设置的width和height其实是内容的宽高 设置border会撑大盒子 使用开发者工具查看盒子模型 谷歌浏览器会帮构建出一个盒子模型 并且鼠标移入某部分的时候，页面中的对应的盒子的部分会高亮 盒子大小的初级计算公式： 盒子的宽度 = 左边框 + 内容的宽度 + 右边框 高度同理 问题：现在设置完border之后盒子会撑大，怎么样才能满足需求呢？ 解决： 手动内减 手动计算多余的值，然后在内容中减去即可 结果就是： 盒子内容：380*380。即width和height都是380px ヾ(๑╹◡╹)ﾉ”写一个小盒子（由内容和边框组成） ヾ(๑╹◡╹)ﾉ”不low导航~ 内边距（padding） 盒子边框与内容之间的距离（可以控制内容与边框之间的距离） padding的取值 一个值： padding：10px; 上右下左都设置为10px 两个值： padding：10px 20px; 上下设置为10px 左右设置为20px 三个值： padding：10px 20px 30px; 上设置为10px 左右设置为20px 下设置为30px 四个值： padding：10px 20px 30px 40px; 上设置为10px 右设置为20px 下设置为30px 左设置为40px 记忆规则： 从上开始顺时针赋值，如果没有赋值的，看对面的 单方向设置padding 单独设置盒子的一边padding 代码： padding-left:10px; padding-方位名词：边框粗细 边框样式 边框颜色； 1234padding-top 上内边距padding-right 右内边距padding-bottom 下内边距padding-left 左内边距 盒子大小的终极计算公式 学完padding之后，可以学习盒子大小的终极计算公式了 需求： 123&lt;!-- 需求 : 盒子尺寸 300*300 , 背景粉色, 上下左右20px的padding , 边框: 10px 实线 黑色 --&gt; width和height设置的是内容的宽高 border会撑大盒子 padding也会撑大盒子 盒子大小的终极计算公式： 盒子的宽度 = 左border+ 左padding + 内容的宽度 + 右padding + 右border 高度同理 问题： 现在设置完border和padding之后盒子会撑大，怎样才能满足需求呢？ 同样也是手动计算多余的值，然后在内容中减去即可 结果就是： 盒子内容：240*240。即width和height都是380px 不会撑大盒子的特殊情况两个互相嵌套的块级元素，如果子盒子没有设置宽度，此时子盒子的宽度默认就是父盒子的宽度。当给子盒子设置以下属性时，子盒子的宽度不会被撑大。 padding-left padding-right border-left border-right ヾ(๑╹◡╹)ﾉ”新浪导航（不low导航升级版）~ 用之前的方法，当a标签的文字数量不确定时，页面会有问题。 普遍的方法应该使用padding CSS3盒模型（自动内减→box-sizing） 在实际项目中会大量的用到盒子模型，如果每个盒子都去手动内减，就和不方便，此时我们可以让浏览器帮咱们自动内减 CSS3的新属性：box-sizing可以完成自动内减的效果 需求： 123&lt;!-- 需求 : 盒子尺寸 400*400 , 背景绿色, 边框: 10px 实线 黑色 padding:20px--&gt; 手动内减 项目中计算量太大，很麻烦 自动内减 给盒子设置 box-sizing:border-box 属性。此时设置的width和height就是盒子的实际宽度 ヾ(๑╹◡╹)ﾉ”新闻列表案例 熟悉border和padding的使用 外边距（margin） 盒子与盒子之间的距离（可以控制盒子的位置） margin的取值 一个值： margin：10px; 上右下左都设置为10px 两个值： margin：10px 20px; 上下设置为10px 左右设置为20px 三个值： margin：10px 20px 30px; 上设置为10px 左右设置为20px 下设置为30px 四个值： margin：10px 20px 30px 40px; 上设置为10px 右设置为20px 下设置为30px 左设置为40px 记忆规则： 从上开始顺时针赋值，如果没有赋值的，看对面的 单方向设置margin 单独设置盒子的一边margin 代码： margin-left:10px; margin-方位名词：边框粗细 边框样式 边框颜色； 1234margin-top 上外边距margin-right 右外边距margin-bottom 下外边距margin-left 左外边距 marign单方向的应用 上下应用 margin-top：能让盒子下移 margin-bottom：能让下面的盒子往下移 左右应用（先转换成行内块） margin-left：能让盒子右移 margin-right：能让右边的盒子往右移动 清除默认内外边距 浏览器会默认给一些标签设置margin和padding，在项目开始之前需要清除这些标签默认的margin和padding，留给自己设置。 比如： 1234body 标签: 自带 margin: 8px; 的属性p 标签: 默认带有 margin: font-size 的值ul标签: ul 标签默认带有上下的 margin, 和 padding-left... 因为要清除所有标签默认的内外边距，此时可以使用通配符完成 1234* &#123; padding: 0; margin: 0; &#125; ヾ(๑╹◡╹)ﾉ”爱宠知识案例~]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day06笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday06%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够说出background相关的几个属性（color、image、repeat、position） 能够使用background设置颜色和图片（color、image） 能够使用background-position设置背景图片的位置（left、center、right） 能够说出元素的三种显示方式（块级元素、行内元素、行内块元素） 能够使用display转换元素的显示方式（display：block/inline/inline-block） 能够说出行高的概念并且使用（基线的距离、让文字垂直居中） 能够说出a链接的四种伪类（lvha：link、visited、hover、active） 。。。。。。 理解上课的知识点…… 背景相关的属性 开发中经常会给标签设置背景颜色、背景图片等效果。 背景颜色（background-color） 设置标签的背景颜色 代码：background-color: red; 取值：之前介绍的颜色的取值就可以 背景图片（background-image） 设置标签的背景为图片 代码：background-image: url(图片路径); 注意： 背景图片默认有平铺效果 背景平铺（background-repeat） 设置标签的背景图片是否平铺 代码：background-repeat: no-repeat； 取值： 值 描述 repeat 背景平铺（默认值） no-repeat 不平铺 repeat-x 水平方向（沿x轴）平铺 repeat-y 垂直方向（沿y轴）平铺 背景附着（background-attachment）（了解） 设置标签的背景图片是否随着页面的滚动而移动（用的不多） 代码： background-attachment: scroll; 取值： 值 描述 scroll 背景图像会随着页面其余部分的滚动而移动（默认值） fixed 当页面的其余部分滚动时，背景图像不会移动。 背景位置（background-position） 设置背景图片的位置 代码：background-position: 水平方向的位置（x） 垂直方向的位置（y）； 取值： 关键字 水平方向 left：左边 center：中间 right：右边 垂直方向： top：上边 center：中间 bottom：下边 像素 以盒子的左上角为原点（0,0），水平向右为x轴，垂直向下为y轴，构建一个坐标系。 第一个值：是X轴的坐标 第二个值：是Y轴的坐标 然后找到对应的坐标点，将图片的左上角与坐标点重合即可。 连写形式（background） 背景属性相关的连写形式 代码： 1234567891011121314151617div &#123; /*背景颜色*/ background-color: pink; /*背景图片*/ background-image: url(200.jpg); /*背景平铺*/ background-repeat: no-repeat; /*背景附着*/ background-attachment: scroll; /*背景位置*/ background-position: center center;&#125;/*--------------------------------------*/div &#123; /*连写形式*/ background: pink url(200.jpg) no-repeat scroll center center;&#125; 书写顺序： background：背景颜色 背景图片 背景平铺 背景附着 背景位置 background:color image repeat attachment position; background: red url(1.jpg) no-repeat scroll center center; 省略的特殊情况： 当div（盒子）的大小和背景图片的大小一样时（常见的写法） 可以只写background:url(200.jpg) 即可 省略的覆盖问题： 连写都要注意这个问题 如果需要同时设置单独的样式和连写的样式，可以 把单独的样式写在连写的下面 把单独的样式写在连写的里面 实际用的最多的情况： 把盒子的大小设置为背景图片的大小，此时只需要设置url（）即可，其他的样式就可以省略掉！！ ヾ(๑╹◡╹)ﾉ”英雄联盟案例（熟悉背景操作即可）标签的三种显示方式（重要） 标签有很多，但是其显示的方式（特点），一般我们把它分为三种 回忆一下：div、p、span、a的效果~ div和p标签独占一行、宽度默认继承父盒子、高度由内容撑开 span和a标签一行显示一个、宽度和高度都是由内容撑开 块级元素 div就是一个块级元素 属性： display : block； 显示特点： 独占一行（一行只能显示一个） 宽度默认是父元素的宽度 可不可以设置宽高？ 可以设置宽高！！ 代表： div、p、h（记忆） 除此之外还有很多 1div,p,ol,li,ul,dt,dd,dl,header,footer,aside,nav,article,section...... 行内元素 span就是一个行内元素 属性： display : inline； 显示特点： 一行可以显示多个 宽度和告诉默认都是由内容撑开的 可不可以设置宽高？ 不可以设置宽高的 代表： span、a 除此之外还有很多 1a,span,b,u,s,i,strong,ins,del,em...... 行内块元素 行内元素演变成现在的行内块元素的 input、img就是行内块元素的显示特点 属性： display: inline-block ; 特点： 一行可以显示多个 (像是行内) 可以设置宽高 (像是块级) 代表： input、img、textarea、select、button 历史问题：在很久以前只有两种显示方式（行内元素和块级元素）。因为行内块元素是从行内元素演变过来的，还在演变的过程中，所以有些属性并没有改过来，所以此时查看img标签的 display 属性值为 inline 三种显示方式的转换 display: block; 转成块级 display: inline; 转成行内 display: inline-block; 转成行内块 ヾ(๑╹◡╹)ﾉ”low导航（都是a标签 60*40）字体大小12px 注意：p这种段落标签不要嵌套块级元素（惊天BUG） 用p标签里嵌套一个div，此时给p标签设置宽高100px，背景红色，给div设置宽高100px，背景颜色蓝色，请问此时页面中是什么效果？？ 行高（line-height） 行高：两行文本之间基线的距离 ヾ(๑╹◡╹)ﾉ”画图演示基线作用：控制两行文本之间的上下距离 常见的使用： 让单行文本在标签中垂直居中 1line-height: 标签的高度; 行高能让哪些元素垂直居中？ 行高除了可以让单行文本垂直居中之外，还可以让其他元素垂直居中 文本 span、a标签（行内元素） input、img标签（行内块元素） 特殊情况：要让 img标签 通过 line-height垂直居中 ，需要单独给 img标签 设置 vertical-align: middle; 属性 如果想让以上元素垂直居中，需要配合以上元素的所在标签（父元素）设置 line-height:标签的高度 其实你会发现，这几类和 text-align：center； 的三类是一样的 行高与font的连写注意点 字体连写里面还有行高属性。 完整版的font连写形式： font: style weight size/line-height family 注意点： line-height 如果写在 font 连写前面，会被层叠掉 123456789101112/*line-height书写位置：*//*1. 写在font里 OK */font: italic bold 20px/200px '楷体';/*2. 写在font后面 OK*/font: italic bold 20px '楷体';line-height: 200px;/* 3. 写在font前面 会覆盖 */line-height: 200px;font: italic bold 20px '楷体';/* 因为font的连写中有行高属性，连写中省略相当于设置了默认值 */ 如果用到了line-height和font的连写 要么把 line-height 写在 font连写的下面 要么把 line-height 写进 font连写 的里面 链接伪类选择器（了解） 不仅仅是选中某个标签，而是选择的元素的某种状态 链接伪类选择器介绍 回顾a链接的特性 点击之前是蓝色，点击之后是紫色 我们可以手动设置a标签不同状态的颜色（或者其他样式） 12345678910111213141516171819/*选中a标签没有点击过时状态*/a:link &#123; color: red;&#125;/*选中a标签点击之后的状态*/a:visited &#123; color: pink;&#125;/*选中鼠标移入时的状态*/a:hover &#123; color: yellow;&#125;/*选中鼠标按下的状态*/a:active &#123; color: blue;&#125; 注意点： 四种链接伪类选择器的顺序固定 link visited hover active 可以联想记忆： lvha → 看见lv包包就ha哈笑 hover用的较多，并且可以给其他标签使用。其他的几乎不用 ヾ(๑╹◡╹)ﾉ”五彩导航居中方法小总结水平居中的方法1234text-align:center1.文本2.行内块元素（input/img）3.行内元素（span/a） 12margin：0 auto：1.块级元素 垂直居中的方法1234line-height：标签的高度；1.文本2.行内块元素（input/img）注意：img需要加 vertical-align : middle（垂直对齐方式居中）3.行内元素（span/a） 有同学会问：那块级元素垂直居中怎么实现呢？ → 这个就需要使用到之后学习的定位知识来完成了]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day05笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday05%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够说出三种CSS的书写位置（内嵌、行内、外联） 能够使用text开头的几个属性（text-align，text-indent、text-decoration） 能够使用margin：0 auto（盒子（div、p、h）居中） 能够说出CSS三大特性（继承性、层叠性、优先级） 能够说出CSS能够继承的属性（color、text-、font- 、line-等） 能够计算CSS选择器的权重（0,0,0,0） 。。。。。。 理解上课的知识点…… CSS的三种书写位置 css的书写位置有时候也叫做css的三种引入方式 内嵌样式（内部引入方式） 将css语句都写在style标签里面 书写位置： css写在style标签里面 style标签写在head标签里面，title标签下面， 作用范围： 当前页面 123456&lt;style&gt; div &#123; color: red； font-size：100px； &#125;&lt;/style&gt; 使用场景： 一般用在小demo或者小案例 行内样式（行内引入方式） 将CSS样式直接写在标签本身上，以属性的形式存在 书写位置： css写在标签的style属性中 作用范围： 当前标签 1&lt;div style="color: red; font-size: 100px;"&gt;小可爱&lt;/div&gt; 使用场景： 基础班不使用，js操作的样式一般都是行内样式 外联样式（外部引入方式） css写在一个单独的.css的文件中，在html文件里面通过link标签引入css文件 书写位置： css写在一个单独的.css文件中，需要通过link标签引入 link标签写在head标签里面，title标签下面 作用范围： 多个页面（谁引入，谁生效） 1&lt;link rel="stylesheet" href="路径" &gt; 使用场景： 项目中用的最多 三种样式表总结 样式表 书写位置 作用范围 使用场景 内嵌样式 css写在style标签中 当前页面 小案例 行内样式 css写在标签的style属性中 当前标签 配合js使用 外联样式 css写在单独的css文件中，通过link引入 多个页面 项目中 文本相关属性文本的缩进（text-indent） 设置文本的缩进 取值： 数字+px（像素） 数字+em（ 1em=font-size ） 注意： 首行缩进两个字：一般使用2em。 文本的对齐方式（text-align） 设置文字的水平对齐方式 取值： left：设置文字在盒子中 水平靠左 center：设置文字在盒子中 水平居中 right：设置文字在盒子中 水平靠右 文本的修饰（text-decoration） 给文字设置下划线、删除线等效果 取值： none：没有任何修饰（多用于清除多余的样式） underline：下划线 line-through：删除线 注意： 一般用的最多的是用text-decoration：none，取消a标签的默认下划线。 总结：strong、ins、em、del的效果已经全部可以通过css替换了 strong：加粗→font-weight: 700; ins：下划线→text-decoration: underline; em：倾斜→font-style: italic; del：删除线→text-decoration: line-through; 水平居中总结 项目中经常会遇到让元素水平居中的效果，要熟练使用。 学习的第一个水平居中属性就是 text-align:center text-align:center; 能让哪些元素水平居中？ text-align：center； 除了能让文字水平居中之外，还可以让其他元素水平居中 文本 span、a标签（行内元素） input、img（行内块元素） 如果想让以上元素水平居中，需要给以上元素的所在标签（父元素）设置text-align：center； 让盒子居中的方法 text-align:center 不能让盒子（div、h、p）这类标签水平居中，如果需要让盒子居中怎么实现呢？ 代码：margin: 0 auto; 作用： 可以让 盒子(div/h/p) 水平居中 条件：有宽度的盒子 因为div不设置宽度，宽度默认就是父元素的宽度（独占一行的效果） 如果想让div、h、p标签水平居中，需要给当前div设置margin:0 auto; ヾ(๑╹◡╹)ﾉ”改写昨天的新闻案例CSS的三大特性 解释css的一些特殊现象 继承性 后代元素会继承祖先元素的一些样式（子承父业） 123&lt;div class="father"&gt;父亲 &lt;div class="son"&gt;儿子&lt;/div&gt;&lt;/div&gt; 在开发者调试工具的查看继承的代码 有哪些样式属性可以继承： 可以通过开发者调试工具中查看是否有 Inherited from 判断样式是否继承 这里列举几个常见的记忆 color：颜色 font- 开头的：字体相关属性 text- 开头的：文本相关属性 line- 开头的：line-height 如何查看当前元素的属性值： 开发者调试工具中的computed 中可以搜索 常见的应用： 去除列表的样式（如：小圆点），可以给li标签设置使用 list-style：none； ，但一般给ul设置，此时也利用了继承性。 不能继承的特殊情况： a链接颜色不能通过继承设置，需要单独设置（a标签有本身的样式） a标签有默认的样式，要给a标签设置样式，需要单独选中后设置！ h系列标签字体大小不能通过继承设置，需要单独设置（有本身的样式） div的高度不能继承，宽度默认有继承父元素的效果 总结： 如果标签自己有样式（可以是自己设置的或者浏览器默认设置的），就不会继承父元素的样式（标签很独立） 在同学们刚刚开始学习还不熟练的时候，先别想着用继承就少写代码，该设置的代码一个别省。 层叠性 浏览器解决样式冲突的特性 特点：后渲染的css样式会覆盖掉先渲染的css样式 （优先级相同的情况下） 例子： 123456789101112&lt;style&gt; .red &#123; /* 最终绿色起效果 */ color: pink; color: red; &#125; .green &#123; color:green; &#125;&lt;/style&gt;&lt;div class="green red"&gt;小姐姐&lt;/div&gt; 总结： 当层叠的样式相同时→样式会覆盖→写在下面的样式会生效 当层叠的样式不同时→样式会叠加→共同作用在标签上 优先级（重要） 只有当优先级相同时，才比较层叠性 如果用的是不同选择器，就不能比较层叠性了，则需要考虑优先级 优先级比较 给页面中的一个标签设置样式，可以通过多种方法~ 比较不同方法的优先级大小分别是什么样 123&lt;div class="father"&gt; &lt;p class="son" id="orange"&gt;我是一个p标签&lt;/p&gt;&lt;/div&gt; 优先级比较公式： 1继承 &lt; 通配符 &lt; 标签选择器 &lt; 类选择器 &lt; ID选择器 &lt; 行内样式 &lt; !important 注意点： !important写在样式属性值的后面，分号的前面 !important不能提升继承的优先级，只要是继承的优先级是最低的 权重计算 也叫做css的特殊性（specificity） 当面对复合选择器的时候，需要考虑权重的计算 计算公式： 公式算法：（0,0,0,0） 第一个数字：行内样式的个数 第二个数字：ID选择器的个数 第三个数字：类选择器的个数 第四个数字：标签选择器的个数 注意：!important 如果能选中对应标签，则权重最高！！天下第一！！！ 比较规则： 先比较第一个数字，如果比较出来了，之后的统统不看 如果第一个数字相同，再去比较第二个数字 …… 如果数字都相同，表示优先级相同，则比较层叠性（谁写在下面，谁说了算） 做权重计算题的步骤： 判断选择器是否直接选中标签，如果不能直接选中→继承优先级最低→直接pass 通过权重计算公式，判断谁权重最高！！]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day04笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday04%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 了解CSS的作用（给页面添加样式） 能够使用font属性设置文字相关样式（font-style/font-weight/font-size/font-family） 能够使用chrome调试HTML/CSS代码 能够使用ID/类/标签选择器的作用（选择页面的标签，给其添加样式） 能够使用交集、并集选择器 能够使用后代/子代选择器的作用（选择页面的标签，给其添加样式） 几种设置颜色的方式（关键字（英文单词）、rgb(0,0,0)、rgba(0,0,0,0)、#FEFEFE） 。。。。。。 理解上课的知识点…… CSS初体验 css的作用是给页面中的元素（标签）设置样式（颜色、大小、字体、位置等等） ヾ(๑╹◡╹)ﾉ”咱们首先给P标签一点颜色看看~特点：css的相关设置都放在 style 标签中，style是一个双标签，它放在head里面，title下面 结构： 1234567&lt;style&gt; 选择器 &#123; 属性名1: 属性值1; 属性名2: 属性值2; ... &#125;&lt;/style&gt; 示例： 123456&lt;style&gt; p &#123; color: red; font-size: 30px; &#125;&lt;/style&gt; 总结：css 是用来给页面上的结构添加样式的 (尺寸、颜色、位置等等) CSS的相关属性12345color：设置文字的颜色font-size：设置字体的大小background-color：设置背景颜色width：设置宽度height：设置高度 CSS概念 层叠样式表（Cascading style sheets） 作用： 给html标签设置样式 ( 给人穿衣服、化妆) 注意： 符号必须是英文状态下的 每一句样式键值对写完之后，必须记得加一个分号。 字体相关属性字体大小（font-size）font-size： 设置字体大小 取值： 数字+px（常用） 字体粗细（font-weight）font-weight：字体的粗细 取值： 纯数字（没有单位）: 400：正常粗细 700：加粗 关键字 : normal：正常粗细 bold：加粗 字体风格（font-style）font-style：字体的样式 （文字是否倾斜） 取值： normal：正常（不倾斜） italic：字体倾斜 ###字体类型（font-family） font-family：字体类型 取值： 宋体、楷体、微软雅黑（默认值）、…… 注意： 一些冷门字体很多电脑里面默认没有安装，因此会显示不出来。 字体可以设置多组多组，中间用逗号隔开（第一个不兼容会使用第二个，第二个不行会使用第三个……） 写字体类型的时候，推荐使用引号包裹起来 样式的层叠问题 给同一个标签设置相同的样式时，样式会层叠，只显示一个样式 案例： 123456789101112131415/*-------------------情况一-------------------------*/p &#123; color: blue; color: red; /*p标签是什么颜色？*/&#125;/*-------------------情况二-------------------------*/p &#123; color: red;&#125;p &#123; color: yellow;&#125; /*p标签是什么颜色？*/ 层叠问题：给同一个标签设置相同的样式时，写在下面的样式会生效。 连写形式（font） 字体相关的属性都是以font-开头的，可以通过font属性连写字体相关属性 代码： 123456789101112131415p &#123; /*字体样式：倾斜*/ font-style: italic; /*字体粗细：加粗*/ font-weight: 700; /*字体大小：20px*/ font-size: 20px; /*字体类型：楷体*/ font-family: "楷体";&#125;/*--------------------------------------*/p &#123; /*连写形式*/ font: italic 700 20px "楷体";&#125; 连写的顺序： font：字体样式 字体粗细 字体大小 字体类型; font: style weight size family; font: italic 700 20px &quot;楷体&quot;; 连写顺序记忆方法 : 稍微舒服swsf(首字母简写) 或者直接记 : font: italic 700 40px &#39;宋体&#39;; 省略： 可以省略前两个 1font: 20px '楷体'; 省略的属性相当于设置了默认值 省略时注意层叠性问题： 12345678910111213/*-------------------情况一-------------*/p &#123; font-style: italic; font: normal 700 20px "楷体"; /*请问文字是否倾斜*/&#125;/*-------------------情况二-------------*/p &#123; font-style: italic; font: 700 20px "楷体"; /*请问文字是否倾斜*/&#125; 如果需要同时设置单独的样式和连写的样式，可以 把单独的样式写在连写的下面 把单独的样式写在连写的里面 开发人员调试（会操作即可） 正常情况下，修改一个样式需要改代码，保存，再刷新，很麻烦…… 开发人员调试工具可以很方便很直观的看到修改样式后的显示效果。 打开方式： 右键→检查 看哪里： elements：显示页面的html结构 styles：显示的是当前标签的样式 调试的作用： 修改属性值（点击属性值） 直接修改 鼠标滚轮 键盘的上下键 添加属性 在上一个属性值的分号之后点击一下，就可以添加样式 控制样式生效 点击每个属性前的小框，可以控制。 如果样式中有一个删除线，表示该样式不生效（失效） 查看是否生效（是否有删除线） 样式被注释掉了 样式被覆盖掉了 查看报错（小三角形） 属性值之后没有分号（没有分号会认为这一行没结束） 格式写的有问题（中文的标点，如；） 属性名或属性值有错误 注意： 选中elements面板中的标签，右侧style面板就是当前标签对应的css样式 在调试工具中修改，仅仅是改变了当前页面的样式效果，刷新之后就没有了，需要添加到代码中才行 基本选择器 选择器就是用来选中对应的标签的，然后给选中的标签加上对应的样式 标签选择器（标签名） 要求：四个标签都设置为红色 12345&lt;!-- 四个标签都设置为红色 --&gt;&lt;p&gt;我是p标签&lt;/p&gt;&lt;p&gt;我也是p标签&lt;/p&gt;&lt;div&gt;我是div&lt;/div&gt;&lt;div&gt;我也是div&lt;/div&gt; 作用：根据指定的标签名，来设置指定的标签的样式 结构： 1234567 &lt;style&gt; 标签名 &#123; 属性名1: 属性值1; 属性名2: 属性值2; .... &#125;&lt;/style&gt; 特点： 标签选择器不能单独选中某一个标签，会选择这一类标签 标签选择器不管嵌套关系多深，都能选择到 类选择器（.） 要求：满足下面的要求 1234567891011/*原始的标签*/&lt;p&gt;小红&lt;/p&gt;&lt;p&gt;小黄&lt;/p&gt;&lt;p&gt;小粉&lt;/p&gt;&lt;div&gt;我是一个想红的div&lt;/div&gt;/*添加好类之后的标签*/&lt;p class="red"&gt;小红&lt;/p&gt;&lt;p class="yellow"&gt;小黄&lt;/p&gt;&lt;p class="pink"&gt;小粉&lt;/p&gt;&lt;div class="red"&gt;我是一个想红的div&lt;/div&gt; 每一个标签都有class（类）属性，class属性的属性值就是类名 作用：根据指定的类名，来设置指定的标签的样式 结构： 1234567&lt;style&gt; .类名 &#123; 属性名1: 属性值1; 属性名2: 属性值2; .... &#125;&lt;/style&gt; 步骤（相当于穿衣服）： 声明自定义类名.自定义类名 {属性1:值1;属性2: 值2;}（先做一种衣服） 给对应的元素添加class类名属性 class=”自定义的类名” （把这种衣服给标签穿上） 注意： 类名的命名规则：由数字、字母、下划线组成，不能以数字开头！！ 一个标签上可以有多个类名，每个类名之间必须以空格隔开（一个人同时可以穿多种衣服） 一个类选择器，可以选择多个标签（一种衣服可以有多个人穿→撞衫） 记忆：标签与类选择器的关系：多对多 ID选择器(#) 要求：都设置不同的颜色，不用类选择器 123456789/*原始的标签*/&lt;p&gt;天选之人-红果果&lt;/p&gt;&lt;p&gt;天选之人-绿泡泡&lt;/p&gt;&lt;div&gt;我也想变红&lt;/div&gt;/*添加好id之后的标签*/&lt;p id="red"&gt;天选之人-红果果&lt;/p&gt;&lt;p id="green"&gt;天选之人-绿泡泡&lt;/p&gt;&lt;div id="lowred"&gt;我也想变红&lt;/div&gt; 每个标签都有id属性，id属性的属性值叫做id名 作用：根据指定的id，来设置指定的标签的样式 结构： 1234567&lt;style&gt; #id名 &#123; 属性名1: 属性值1; 属性名2: 属性值2; .... &#125;&lt;/style&gt; 步骤（相当于结婚领证）： 声明id #自定义id名字 {属性1:值1;属性2:值2;} 给对应的元素添加属性 id=”自定义id” 注意点： id属性相当于标签的身份证号码，在一个页面中，id属性值是唯一的，不可重复的。 一个标签上只能有一个id属性值 一个id选择器只能选中一个标签 id的命名规则和类名一样 记忆：标签与id选择器的关系：一对一 特别注解class类名和id值的区别 class类名相当于姓名，可以重复，一个标签可以有多个class类名 id值相当于身份证号码，不可重复，一个标签只能有一个id值 class选择器和id选择器的区别 class选择器以.开头 id选择器以#开头 实际开发情况 使用最多的是class选择器 id一般情况是配合js使用的，所以除非特殊情况，否则不要用id去设置样式。 实际开发要注意的冗余代码的抽取，可以将一些公共的代码抽取到一个类选择器 小demo： 1234567891011121314/*---------------冗余代码（重复的代码）------------------*/p &#123; font-size: 60px; color: red;&#125;div &#123; font-size: 60px; color: red;&#125;/*---------------抽取出公共类------------------*/.common &#123; font-size: 60px; color: red;&#125; ヾ(๑╹◡╹)ﾉ”课堂练习小练习: ヾ(๑╹◡╹)ﾉ”课堂练习小练习:123&lt;p&gt;我是p标签,我想变大，不想变红&lt;/p&gt;&lt;p&gt;我是p标签，我想变红，不想变大！！&lt;/p&gt;&lt;div&gt;我是div，我想变红，我想变大&lt;/div&gt; 通配符选择器（*） 需求：把页面内所有的元素都设置一个颜色为red 1234567&lt;!-- 把页面内所有的元素都设置一个颜色为red --&gt;&lt;h1&gt;标题&lt;/h1&gt;&lt;div&gt;小姐姐&lt;/div&gt;&lt;p&gt;小帅哥&lt;/p&gt;&lt;h2&gt;我是h2&lt;/h2&gt;&lt;p&gt;小可爱&lt;/p&gt;&lt;span&gt;大可爱&lt;/span&gt; 作用： 会将页面上所有的标签都设置这个样式 代码： 12345&lt;style&gt; * &#123; 属性名: 属性值; &#125;&lt;/style&gt; 注意: 通配符会去页面上找到所以标签，并且一个个的标签设置样式，所以比较消耗性能，一般不会使用（只会在一些小页面中用于清除浏览器默认的margin和padding时才会使用到） 复合选择器并集选择器（,） 并集选择器也叫做分组选择器 需求：把div和p的设置红色（节省代码的方式） 12345&lt;!-- 把div和p的设置红色（节省代码的方式） --&gt;&lt;div&gt;小帅哥&lt;/div&gt;&lt;p&gt;小姐姐&lt;/p&gt;&lt;p&gt;小可爱&lt;/p&gt;&lt;span&gt;大可爱&lt;/span&gt; 并集选择器可以把多个选择器写在一起，节省代码 作用 : 找到选择器1和选择器2…选中的标签，给他们都设置样式 代码 : 12345&lt;style&gt; 选择器1,选择器2 &#123; 属性名1: 属性值1; &#125;&lt;/style&gt; 注意 : 并集选择器可以同时写多个的选择器 ，选择器之间需要以逗号隔开 交集选择器（紧挨着） 需求：只让小可爱变红（不能改变html的代码） 1234&lt;!-- 只让小可爱变红（不能改变html结构） --&gt;&lt;div class="red"&gt;小姐姐&lt;/div&gt;&lt;p&gt;小帅哥&lt;/p&gt;&lt;p class ="red"&gt;小可爱&lt;/p&gt; 作用： （既又原则）选择页面中既能被选择器1选中，又能被选择器2选中的标签，设置样式 1例如：p.box &#123;&#125; 既是p标签 又有box类名 代码： 1234/*既能被选择器1选中，又能被选择器2选中的标签*/选择器1选择器2 &#123; 属性名1: 属性值1;&#125; 注意： 交集选择器可以同时写多个选择器，并且选择器与选择器之间紧挨着的！！ 如果交集选择器中有标签选择器，标签选择器必须写在最前面 后代选择器（空格） 需求：只让小姐姐变红（不能改变html的结构） 12345&lt;!-- 只让小姐姐变红（不能改变html结构） --&gt;&lt;div class="father"&gt; &lt;p&gt;小姐姐&lt;/p&gt;&lt;/div&gt;&lt;p&gt;小可爱&lt;/p&gt; 作用 : 先通过选择器1找到一堆标签，在这一堆标签的后代（儿子、孙子、重孙子……）中，找到满足选择器2的标签设置样式。 代码 : 1234选择器1 选择器2 &#123; 属性名1: 属性值1; ....&#125; 步骤： 通过选择器1找到一堆标签 找到这一对标签的所有的后代标签 在这些后代标签中，找到满足选择器2的标签，给这些标签加上样式 子代选择器（&gt;） 需求：只让小可爱变红（不能改变html结构） 12345678&lt;!-- 只让小可爱变红（不能改变html结构） --&gt;&lt;div class="father"&gt; &lt;p&gt;小可爱&lt;/p&gt; &lt;div&gt; &lt;p&gt;小姐姐&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;p&gt;大可爱&lt;/p&gt; 作用 ：通过选择器1找一堆标签，在这一堆标签的子代（儿子）中，找到满足选择器2的标签设置样式 代码 : 1234选择器1 &gt; 选择器2 &#123; 属性名1: 属性值1; ....&#125; 步骤： 通过选择器1找到一堆标签 找到这一对标签的所有的子代标签 在这些子代标签中，找到满足选择器2的标签，给这些标签加上样式 ヾ(๑╹◡╹)ﾉ”项目中的情况（时间不够留给作业）1234567891011121314151617181920&lt;!-- 主导航栏 --&gt;&lt;div class="nav"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;公司首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;公司产品&lt;/a&gt;&lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;联系我们&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;公司邮箱&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;公司电话&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;!-- 侧导航栏 --&gt;&lt;div class="sitenav"&gt; &lt;div class="left"&gt;左侧侧导航栏&lt;/div&gt; &lt;div class="right"&gt;&lt;a href="#"&gt;登录&lt;/a&gt;&lt;/div&gt;&lt;/div&gt; 在不修改以上代码的前提下，完成以下任务： 链接登录的颜色为红色，同时主导航栏里面的所有的链接改为粉色（简单） 主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑（中等） 主导航栏里面的一级菜单链接文字颜色为绿色（难） 答案： 12345678910111213.right a &#123; color: red;&#125;.nav a &#123; color: pink;&#125;.nav,.sitenav &#123; font-size: 14px; font-family: '微软雅黑';&#125;.nav&gt;ul&gt;li&gt;a &#123; color: green;&#125; 选择器的注意点 标签选择器、类选择器、id选择器是必须熟练使用的！！！ 复合选择器目前要求知道查找规则即可（看得懂）。需要配合项目多次使用才能熟练使用，第一次很难确定什么时候使用这是很正常的，之后的项目中跟着老师一起练即可 拓展的小细节颜色的取值（知道即可）关键字取值： red：红色 green：绿色 blue：蓝色 yellow：黄色 purple：紫色 pink：粉色 …… 使用场景： 小案例中用的较多 rgb 表示法 r：red g：green b：blue （三基色） 取值： 每一项的取值范围为0~255 特殊的颜色值： rgb(0,0,0) ：黑色 rgb(255,255,255) ：白色 rgb(255,0,0) ：红色 rgb(0,255,0) ：绿色 rgb(0,0,255) ：蓝色 rgba表示法 比rgb表示法多了一个a，a表示的是透明度 a的取值范围： 0~1（1：完全不透明，0：完全透明） 省略写法： rgba(0,0,0,0.5) 可以写成 rgba(0,0,0,.5) 十六进制表示法 其实本质上来说和rgb表示法一样，只不过通过十六进制表示。比如：#ffaabb 效果： 前两位表示红色 中间两位表示绿色 后两位表示蓝色 省略的写法： 三组中每组都是相同的时候，每组可以省略写成一个即可 #ffaabb 可以省略写成 #fab 但是十六进制表示法要么是六位，要么是三位，只有两种情况！！ 特殊的取值： #000：黑色 #fff ：白色 #f00 ：红色 #0f0 ：绿色 #00f ：蓝色 特点： 十六进制以#开头 不区分大小写（大写小写都可以） 前端只需要通过PS量颜色即可，不需要自己设计颜色 注释作用：可以让页面上的一段代码让他们失去作用，浏览器不解析他们（和html的注释差不多，就是格式不一样） 12&lt;!-- --&gt;: html 中的注释, 不能嵌套/* */: css 中的注释, 不能嵌套 注释快捷键：Ctrl + /]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day03笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday03%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够写出4~5个常用的表单元素（input（多种形态）、select、textarea、form、label） 能够说出表单name属性和value属性的作用（告诉后端发送的数据是什么含义；发送给后端的数据。数据形式：name属性值= value属性值） 能够掌握表单元素checked和selected的使用（checked：单选和多选默认选中；selected：下拉菜单默认选中） div和span的使用（用于css中的布局） H5新增的语义化标签（header、nav、footer、aside、section、article） H5新增的属性（placeholder、autofocus、autocomplete、required、multiple） H5视频音频标签（audio、video） 理解上课的知识点…… 表单系列标签（重点） 表单的目的是收集用户信息，多用于注册或者登陆页面 比如：百度注册页面 有一种生物叫做后端 input (输入框系列) 基本表单控件 先简单的过一遍~ 123&lt;input type="text"&gt;单标签、type：用于指定不同的控件类型 文本框 text 、 密码框 password12昵称：&lt;input type="text" value="小姐姐" name="nicheng" maxlength="6"&gt; 密码：&lt;input type="password" name="password" maxlength="6"&gt; 注意： value (基础班知道有这个属性就行~)：表单标签的值 → 用户输入的数据 提前在标签设置好就是默认值 name (基础班知道有这个属性就行~)：表单标签的名称 → 作用是告诉后端对应的值的含义 后端接收到的格式：name的属性值=value的属性值 拓展： 页面中的信息需要传给后台服务器，但是直接发一个值（value）过去，后端不知道是什么，所以需要加上一个属性name 代表数据的含义。 后端接收的数据结构为： name属性值=value属性值 这样后端就知道传过去的是什么（前后端交互在就业班会重点说明，基础班不会使用） maxlength：设置表单的最大输入值 小bug ：如果是密码输入框，type=&quot;password&quot; 的password不能拼错且后面不能有空格，否则浏览器会认为type属性设置无效，会以默认的text方式显示，此时不会密文，相当于是文本框。 单选框 radio 、多选框 checkbox单选框 radio12性别 : &lt;input name="sex" type="radio" value="nan"&gt; 男 &lt;input name="sex" type="radio" value="nv" checked&gt; 女 注意： 通过name进行分组（有相同name属性值的单选框是一组的，一组中同时只能有一个选中），并且告诉后台传的是什么含义 在实际工作中，需要写value值 checked 属性设置默认选中，属性值省略。 多选框 checkbox123爱好：&lt;input type="checkbox" name="hobby" value="code" checked&gt;敲代码 &lt;input type="checkbox" name="hobby" value="nosleep" checked&gt;熬夜 &lt;input type="checkbox" name="hobby" value="game"&gt;玩游戏 name属性告诉后台传的是什么含义 需要写value值 checked属性设置默认选中，属性值省略 文件选择框 file12&lt;input type="file"&gt; 单文件上传&lt;input type="file" multiple&gt; 多文件上传 注意： （css3）multiple设置一次同时可以选中多个文件（ctrl+选中/鼠标框选）属性值可以省略 现在html只负责结构，之后真正的上传相关功能通过js来实现 表单按钮 需要配合form表单一起使用 说白了就是用form标签把表单标签都包起来~ 提交按钮submit 将表单的内容提交给后端 1&lt;input type="submit"&gt; 重置按钮reset 将表单的内容重置为默认值 1&lt;input type="reset"&gt; 普通按钮button 之后配合js使用 1&lt;input type="button"&gt; // 配合后面的js使用 图片按钮image 功能相当于提交按钮，样式为一张图片 1&lt;input type="image" src="a.jpg"&gt; Form 表单域 form标签用于定义表单域，将各种表单包裹起来，用于表单提交 123&lt;form action="url地址"&gt; 各种表单控件&lt;/form&gt; 属性：action 用于指定处理请求的服务器URL地址（就业班的内容） button标签 除了input标签可以完成按钮功能之外，button标签也可以完成按钮的功能 代码：&lt;button&gt;一个按钮&lt;/button&gt; 功能： button标签里面可以嵌入其他标签，甚至 &lt;img&gt;标签也可以，并且在谷歌浏览器中，button标签默认的功能就是提交按钮。 其实也可以通过设置button标签type的属性值不同来实现不同功能，常见的如下： type的属性值 功能 submit 提交按钮 reset 重置按钮 button 可以点击的按钮（没作用） select 下拉菜单123456出生年月：&lt;select name="year"&gt; &lt;option value="1996"&gt;1996&lt;/option&gt; &lt;option value="1997"&gt;1997&lt;/option&gt; &lt;option value="1998"&gt;1998&lt;/option&gt; &lt;option value="1999" selected&gt;1999&lt;/option&gt; &lt;/select&gt; 注意： name属性设置在select标签上（告诉后台传过去的是什么） value属性设置在option上，表示选中的值 selected属性设置默认选中，属性值省略 textarea文本域 用于输入大段文字 123&lt;textarea cols="规定文本区内的可见宽度" rows="规定文本区内的可见行数"&gt; 文本内容&lt;/textarea&gt; 注意：不能通过设置value使文本域有默认值，无效！ label 标签 示例 : 新浪网页注册 作用：让文本和表单元素绑定到一起（结拜兄弟） 用法： 写 for ，值为 id，规定 label 与哪个表单元素绑定 1234567性别 : &lt;input id="nan" name="sex" type="radio"&gt; &lt;label for="nan"&gt;男&lt;/label&gt;&lt;input id="nv" name="sex" type="radio"&gt; &lt;label for="id名"&gt;女&lt;/label&gt; 步骤：1.在表单元素上添加id属性2.给label添加for属性，for的属性值与对应表单元素的id值相同即可 不写 for，默认绑定 label 内的表单控件 123&lt;label&gt;&lt;input type="radio" name="sex"&gt; 男&lt;/label&gt;步骤：用label把表单元素和文字包在一起即可 没有语义的布局标签（记忆） div和span是没有语义的标签，一般用于页面布局使用（项目中会经常使用到） div：div盒子1&lt;div&gt;长亭外&lt;/div&gt;&lt;div&gt;古道边&lt;/div&gt; 特点： width由屏幕宽度决定（独占一行）height由内容撑开 默认占一整行（一行只能显示一个） 页面布局中用的最多~ span1&lt;span&gt;芳草碧连天&lt;/span&gt; 特点： width、height由内容来决定（都由内容撑开） 一行里面可以显示多个 除了没有语义的标签可以用于布局，还有一些有语义的标签可以用于布局 HTML5新标签与属性 HTML5可以看做是HTML这个语言的一个新版本，里面有一些新加的标签和属性。 之后在就业班的学习中也会不断地学习H5C3的新知识。基础班先有一定的了解 HTML5新增语义标签（记忆） 头部：header标签 1header：定义网页的头部---》头部语义 + div 导航：nav标签 1nav：定义网页的导航---》导航语义 + div 底部：footer标签 1footer：定义网页的底部---》底部语义 + div 侧边栏：aside标签 1aside：定义网页的侧边---》侧边语义 + div 区块：section标签 1section：定义网页的区块---》区块语义 + div 文章：article标签 1article：定义网页的文章---》文章语义 + div 注意：html5标签有兼容性问题（老浏览器没效果），所以为了客户群多，会少用。 HTML5新增的input表单（记忆） HTML5新增了input标签的校验效果，但是验证的较为简陋，实际开发中还需要配合JS实现！ 下列的input新表单在移动端使用的更多。 代码： 12345678910/* 输入一个网址，浏览器会自动校验网址的格式，格式不对不能提交！ */&lt;input type="url"&gt;/* 输入一个邮箱，浏览器会自动校验邮箱的格式，格式不对不能提交！ */&lt;input type="email"&gt;/* 浏览器会显示默认的选择日期控件 */&lt;input type="date"&gt;/* 点击之后会自动弹出数字输入框（在移动端才有效！！） */&lt;input type="tel"&gt;/* 只能输入数字 */&lt;input type="number"&gt; type的属性值 功能描述 url 输入url格式（如：网址） email 输入邮箱格式 date 显示日期输入框 tel 输入手机号码格式（只在移动设备上有效） number 输入数字格式 课后可以手机（移动端）访问看效果（部分HTML5标签的测试）： 针对于tel的效果： HTML5新增的表单属性(记忆) 属性名 属性值 功能描述 placeholder 任意文字 占位符（用于提示用户输入） autofocus autofocus（可省略） 当页面加载时自动获取焦点 autocomplete on：打开自动完成；off：关闭自动完成 规定input是否应该启用自动完成功能（需要配合name属性一起使用） required required（可省略） 规定这个input的值是必填的 多媒体标签（了解）audio 音频 在网页中播放音频（声音） 属性： controls 是否显示播放控件 autoplay 自动播放（有兼容性问题） loop 循环播放（有兼容性问题） 兼容性处理： 1234&lt;audio controls autoplay loop&gt; &lt;source src="1.mp3"&gt; 您的版本过低,请升级高级版本 &lt;a href="http://www.itcast.cn/"&gt;点击下载&lt;/a&gt;&lt;/audio&gt; video 视频 在网页中播放视频 属性（和audio类似）： controls 是否显示播放控件 autoplay 自动播放（有兼容性问题） loop 循环播放（有兼容性问题） 兼容性处理： 1234&lt;video controls autoplay loop&gt; &lt;source src="1.mp3"&gt; 您的版本过低,请升级高级版本 &lt;a href="http://www.itcast.cn/"&gt;点击下载&lt;/a&gt;&lt;/video&gt;]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day02笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday02%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能够说出超链接的使用及属性 了解网页编码，能够通过charset设置编码（字典、&lt;meta charset=&quot;UTF-8&quot;&gt;） 了解SEO的作用（用来优化网站，使用网站在搜索引擎上的排名靠前） 什么是标签语义化（在合适的地方使用合适的标签） 能够书写ul/ol/dl三种列表（无序列表、有序列表、自定义列表） 能够写出表格标签及相关属性 能够合并单元格 。。。。。。 理解上课的知识点…… 链接标签（重点） 页面中有很多地方点击之后可以跳转到新的页面中去，这个就是链接，如果需要在网页中添加一个链接，就需要使用链接标签 a 标签 (Anchor ) : 超链接（锚） 超链接在页面中起到跳转或定位的作用（超链接、锚链接、a链接、a标签） a标签的跳转功能作用: 可以从一个页面跳转到另一个页面 代码: &lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt; 效果： 链接未点击的时候，默认显示蓝色 链接点击过以后，显示为紫色 因为浏览器有默认的缓存机制，只要访问过一次的链接，默认都会展示成紫色，只有清除浏览器的缓存，才会变蓝） 注意： 如果需要在页面中看到a标签，需要在a标签里面写上内容 a标签不能互相嵌套（规范） a 标签的属性 href：a 标签跳转的目标地址（路径） 告诉浏览器点击之后去哪一个页面 外部链接（互联网上）需要添加 http:// www.baidu.com 内部链接（文件夹中）直接链接页面的路径即可 比如 &lt; a href=&quot;index.html&quot;&gt; 首页 &lt;/a &gt; target：用于指定链接页面的打开方式 _self ：在当前页面中跳转 _blank : 保留原始页面，在新窗口中跳转 相关标签 ： base 标签 作用：可以为页面上所有的a标签统一设置跳转方式（base标签一般放在titile标签下面） a 标签的其他用法 可以不跳转 (不写路径其实会刷新页面，其实相当于跳转到当前页面) href=&quot;#&quot; 项目中没有确定链接目标时，可以使用#来占位，之后确定跳转的目标之后再改成正确的 可以进行下载（一般不用） 当路径指向的目标文件是浏览器打不开的文件时，浏览器会默认下载下来。 a标签的定位功能 a标签可以快速定位到当前页面或者其他页面的目标内容（百度百科） 在当前页面进行定位ヾ(๑╹◡╹)ﾉ”吸猫大法步骤： 给目标标签加上id属性 1&lt;p id="mao"&gt;我是一只猫&lt;/p&gt; 给链接的href属性中写上#目标标签的id属性值 1&lt;a href="#mao"&gt;吸猫大法&lt;/a&gt; 在跳转的页面进行定位ヾ(๑╹◡╹)ﾉ”跨界吸猫步骤： 给目标文件中的目标标签加上id属性 1&lt;p id="mao"&gt;我是一只猫&lt;/p&gt; 给当前文件的链接的href属性中写上 目标文件路径#目标标签的id属性值 1&lt;a href="目标文件路径#mao"&gt;吸猫大法&lt;/a&gt; 结构中每个标签的含义（了解）DOCTYPE : 文档类型作用： 用来定义文档类型（告诉浏览器，使用哪种规范去解析html页面） 位置：文档的最前面的位置 规范：HTML 或 XHTML 规范 html:xt ：XHTML规范，已经淘汰了， 一些特别老的网站会有，知道即可 1&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; html:5 ： HTML5规范，非常的简洁 1&lt;!DOCTYPE html&gt; html 标签作用：所有html中标签的一个根节点（老祖宗） lang：用来设置当前页面的语言（标签的语言、对比易语言） 12345&lt;html lang="en"&gt;&lt;/html&gt;en-英文 zh-中文英文的意思并不是告诉浏览器，我们这就是纯英文的，而且告诉浏览器我们的内容以英文为主，提高浏览器的渲染性能 head 标签作用：用于存放网页的配置标签和引入文件的标签 123title、meta、base、style、script、link注：在head标签中我们必须要设置的标签是title, 其他可有可无 body 标签作用：页面在的主体部分，用于存放页面中的html标签 1p、h、a、b、u、i、s、em、del、ins、strong、img meta 标签作用：设置网页的元信息 注意：meta中设置的所有的内容在页面都不会显示, 在其中可以设置编码格式、样式、关键字等等 设置字符集（编码格式）： 123&lt;meta charset="UTF-8"&gt;Charset（字符集的格式）：UTF-8 ヾ(๑╹◡╹)ﾉ”乱码的原因 最常见的3种字符集（字典）： UTF-8：国际化的字典，字体库，收录是全世界所有的语言中的文字 1汉字 = 3个字节 GBK：收录了大陆汉字，还加了港澳台的文字-》ANSI（中国） 1个汉字= 2个字节 GB2312：收录了大陆汉字 约定：将来我们在整个学习过程中都用utf-8（与国际接轨） title 标签作用：让页面拥有一个属于自己的标题。 注意：title中的文本在 seo 中占有很大的权重，不能乱写 SEO与标签语义化（了解）ヾ(๑╹◡╹)ﾉ”title标签与h1标签的权重SEO : 搜索引擎优化 Search Engine Optimization 写网页的目的-》用户的习惯-》用户的结果-》怎样排名靠前-》seo 作用：用来优化网站，使用网站在搜索引擎上的排名靠前 123百度是如何收录一个网站的信息的呢？百度自己写的一个程序（爬虫）来收录每个网站的信息。 怎样提升网站的SEO（记忆） 花钱买排名 缺点：烧钱。 优点：效果杠杠的 将页面做成静态页面（html后缀） 发外链（类似于广告） 标签语义化（语义化规范） 在合适的地方使用合适的标签 标签语义化的应用：每个html标签都有属于自己的语义，有使用标签时候要一定要了解每个标签的语义，合理使用。 列表（熟练） 网页中经常会显示一些列表，这里就要使用到列表标签了，比如：常见的有新浪网页 无序列表 ul （Unordered List） 一列没有顺序的列表（用的最多） ヾ(๑╹◡╹)ﾉ”水果列表作用：显示一列没有排列顺序的数据 代码： 123456&lt;ul&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ......&lt;/ul&gt; 显示特点： 每一项前面有默认的小圆点 注意： 无序列表中的数据没有先后顺序之分 &lt;ul&gt;&lt;/ul&gt; 中只能嵌套&lt;li&gt;&lt;/li&gt; ，不能放其他标签或者文字 &lt;li&gt;&lt;/li&gt; 标签中可以嵌套任意标签（嵌套ul都可以） 有序列表 ol（了解） 一列有顺序的列表（用的很少） ヾ(๑╹◡╹)ﾉ”考试成绩表作用：显示一列有顺序的数据 123456&lt;ol&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ......&lt;/ol&gt; 显示特点： 每一项前面有默认的序号 注意： 有序列表中的数据有先后顺序之分 &lt;ol&gt;&lt;/ol&gt; 中只能嵌套&lt;li&gt;&lt;/li&gt; ，不能放其他标签或者文字 &lt;li&gt;&lt;/li&gt; 标签中可以嵌套任意标签（ul都可以） 现在一般情况下ul标签用的比较多，ol标签用的比较少（关键看语义，和样式无关）。 自定义列表 dl（了解） 一列格式自定义的列表（几乎不用） 作用：显示一列数据，格式自己定义 dt : 标题 dd : 列表正文 代码： 12345&lt;dl&gt; &lt;dt&gt;小标题&lt;/dt&gt; &lt;dd&gt;小标题的解释1&lt;/dd&gt; &lt;dd&gt;小标题的解释2&lt;/dd&gt;&lt;/dl&gt; 好比： HTML中的特殊字符（记忆） 有时候需要在页面中显示空格、&lt;、&gt;等特殊字符，需要使用html的特殊字符（实体字符） HTML的空格合并现象 在HTML代码中同时出现多少个空格、缩进、换行。最后浏览器只会解析出一个空格显示 ヾ(๑╹◡╹)ﾉ”合并现象案例12女孩：宝贝，靠近点~男孩：darling，我离不开你~拆了他们！ 总结：html代码中对空格、缩进、换行不敏感，如果同时出现多个空格、缩进、换行, 页面只会把它们当做一个空格来解析 html 中特殊字符有对应 替代代码（也叫做实体字符） : 把前面5个记住即可！前面三个更常用！！ 表格table（难点） 将数据以表格的形式在网页中展示 1234感知表格相关标签：&lt;table&gt;&lt;/table&gt; : 代表 表格&lt;tr&gt;&lt;/tr&gt; : 代表一行 (row : 行 )&lt;td&gt;&lt;/td&gt; : 代表一个标准单元格 创建表格ヾ(๑╹◡╹)ﾉ”画出下列表格 代码： 12345678910&lt;table&gt; &lt;tr&gt; &lt;td&gt;单元格&lt;/td&gt; &lt;td&gt;单元格&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;单元格&lt;/td&gt; &lt;td&gt;单元格&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 表格的属性 属性 作用 border 边框 width 给表格设置宽 height 给表格设置高 cellspacing 规定单元格与单元格之间的空白 cellpadding 单元格内部边框与内容的空白 align 对齐方式（table、tr、td分别设置有不同效果） 虽然我们可以使用table中的标签来设置标签的一些样式，但是最好不要用，因为将来凡是与样式相关内容都是由css来设置的 表格中的其他标签ヾ(๑╹◡╹)ﾉ”先画出下列表格 总结： 标签 作用 特点 &lt;th&gt;&lt;/th&gt; 起到表头单元格、标题的作用（代替td） 文字加粗居中 &lt;caption&gt;&lt;/caption&gt; 给表格设置标题 在表格的最上面显示标题 &lt;thead&gt;&lt;/thead&gt; （结构）存放当前表的表头 高度自适应（由内容撑开） &lt;tbody&gt;&lt;/tbody&gt; （结构）存放表格主体数据 &lt;tfoot&gt;&lt;/tfoot&gt; （结构）一般不用、有兼容性问题 高度自适应（由内容撑开） 注意： &lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt;或者&lt;th&gt;&lt;/th&gt; &lt;td&gt;&lt;/td&gt;标签像一个容器，可以容纳所有的元素 合并单元格 (左上原则) 上下合并——》跨行合并：属性: rowspan=”合并的个数”——》留住最上，删除其他 左右合并——》跨列合并：属性: colspan=”合并的个数”——-》留住最左，删除其他 1.确定合并哪几个单元格 2.利用左上原则，确定保大保小 3.确定跨行（rowspan）还是跨列合并（colspan） 步骤： 通过左上原色，确定保留的单元格，给他添加属性（rowspan/colspan），属性值就是合并单元格的个数 找到要删除的单元格，删除掉就行了~ 合并单元格练习: 拓展（了解即可）预格式文本标签（pre） 如果想让代码中的文本格式原封不动的展示到页面中，可以实现吗？ 作用：让标签内的文本格式原样显示在页面中（包括空格和换行） 代码： &lt;pre&gt;有格式的文本&lt;/pre&gt;]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础班day01笔记]]></title>
    <url>%2F2019%2F02%2F20%2F1-%E5%9F%BA%E7%A1%80%E7%8F%ADday01%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目标 能说出常用的五大浏览器 能说出WEB的三大组成部分 能够写出HTML的基本结构（骨架：html、head、title、body ） 能够说出常见的单标签（hr、br、img） 能够写出4~5个常见的双标签（h系列6个、p标签、文本格式化标签8个、骨架的几个标签） 能够写出图片标签的使用及属性 能够说出相对路径的三种形式（同级目录、下级目录、上级目录） 。。。。。。 理解上课的知识点…… 课前了解 课程安排 html : 3天 css : 6天 项目 : 5天 特点 : [ 慢、 细、 易 ] 目的：把基础打牢 打字速度 打字速度是程序员的基本技能 严禁 二指禅 : 必须养成正确的指法 ( 面试中可能会有机试 ) 打字速度，越快越好 120单词/min（可以通过金山打字练习英文打字） 安装词典 代码很多都是英文，词典可以帮助学习记忆代码 随时使用词典, 不会的单词就查出来 开发习惯设置 便于之后的开发 将文件后缀名显示出来 (必做) 将文件的排列方式改为详细信息，并且名称一定要能够全部显示出来 win快键键 开发中使用快捷键可以提高效率 Ctrl + C：复制 Ctrl + V：粘贴 Ctrl + X：剪切 Ctrl + S：保存 Ctrl + N：新建 Ctrl + A：全选 Ctrl + Z：撤销上一个操作 win + E：打开资源管理器 Alt + tab：切换程序（注意Alt键不松手） Win + D：切换到桌面 Win + R：快速运行（演示打开软件） cmd：命令行 calc：运行计算器 mspaint：运行画图工具 学习要求 对于学习的一些要求 课堂互动：防走神，防瞌睡 课后代码：老师上课的代码至少敲3遍（重要的是通过上课的代码理解知识点！！），之后再做作业，然后还有余力的同学预习第二天的笔记（会与熟练两码事）。 学习模式： 精力放在重点，了解内容记住即·可（不要钻牛角尖） HTML和CSS比较灵活（不易报错），按照规范敲正确的代码 认识网页（了解） 你觉得前端是做什么的？ 12345问题1 : 网页由哪些基本元素构成 ? （文字、图片、超链接、视频、音频等等） 问题2 : 那我们看到的网页 , 光鲜的背后又是什么呢? （代码组合） 问题3 : 浏览器的作用? （将代码解析成网页,供用户访问） 少了浏览器可以吗？ 浏览器将代码解析成网页，供用户访问 ! 用户不会去看代码，所以浏览器很必要！ 五大浏览器介绍（记忆） 浏览器是网页运行的平台。 五大浏览器： IE（Edge）浏览器 Firefox（火狐）浏览器 Chrome（谷歌）浏览器 Safari浏览器 Opera（欧朋）浏览器 各浏览器的市场份额查看网站： http://tongji.baidu.com/data/browser 谷歌浏览器：访问速度快、用户体验好、开发调试功能齐全，之后的学习过程中，统一使用谷歌 浏览器内核 浏览器的内核（渲染引擎：render 渲染 engine 引擎）相当于汽车的发动机，是最核心的存在。 作用：将网页代码解析（转换）并渲染（显示）成用户眼中的界面 内核的种类： Trident（IE、猎豹安全浏览器、360极速浏览器） Gecko（Firefox） Webkit（Safari、傲游浏览器3、Symbian手机浏览器、Android 默认浏览器） Blink（Webkit的升级版）（Chrome, Opera） 总结： IE浏览器（Trident） Firefox（火狐）浏览器（Gecko） Chrome（谷歌）浏览器（blink） Safari浏览器（webkit） Opera（欧朋）浏览器（blink 早期：presto ） Web标准（记忆）为什么会有web标准浏览器内核不同有什么影响？ 浏览器的内核不同，我们知道他们工作原理肯定不同，相同的代码显示就会有差别。这样就给我们的网页开发带来了困难…… 所以我们需要制定一个标准，让相同的代码在不同浏览器中的显示的效果是一样的。 Web 标准构成 将页面分为三层：结构、样式、行为。 结构：HTML——页面骨架 样式：CSS——页面样式 行为：JS（JavaScript）——页面动态效果 图解Web标准 把一个页面看成一个人 结构标准：决定是否有一个好的身体。 样式标准：决定是否化妆的美丽漂亮。 行为标准：决定是否有吸引人的行为。 HTML初识（了解）HTML的概念概念：HTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标记语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。（用HTML标签表示需要显示的效果） ヾ(๑╹◡╹)ﾉ”变粗案例 在网页（.html后缀的文件）中显示一个加粗的文字 说白了HTML就是用尖括号包裹起来的英文单词（标签），浏览器看得懂标签，对不同的标签有对应的显示效果 其实： 学习HTML-》就是学习HTML标签-》就是学习标签中的英文单词-》所以HTML非常简单，只需要记住对应的英文单词即可 1如：&lt;strong&gt;加粗&lt;/strong&gt; &lt;h1&gt;大标题&lt;/h1&gt; 等等 HTML骨架结构 写网页类似于写文章，文章有对应的格式，HTML也有规定的格式。 HTML的固定格式： 12345678910&lt;html&gt; &lt;head&gt; &lt;title&gt;页面的标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 写自己的代码 &lt;/body&gt;&lt;/html&gt;为了便于阅读：包含关系的标签使用用缩进 记忆：猪猪女孩记忆法 ヾ(๑╹◡╹)ﾉ”书写我们的第一个HTML页面 新建一个demo 的.txt文件 把后缀名改为 .HTML 里面写入刚才的HTML骨架 右击 —》谷歌浏览器打开 注意：结构不会在我们的页面上显示，但是却会让我们的代码结构更加清晰明确（规范） 开发工具的基本使用（操作） 使用记事本虽然可以敲代码，但是开发的效率实在太低，实际开发中，我们会通过使用开发工具来提高咱们的开发效率。 基础班使用sublime使用 sublime 新建页面的过程 打开sublime，ctrl + n 新建一个文件； ctrl+S 保存，命名: “ 创建的文件.html “ （后缀名必加！） ヾ(๑╹◡╹)ﾉ”用sublime写一个页面骨架sublime 快捷键 新建文件: ctrl + n 保存文件 : ctrl + S 快速生成一个标签：英文+tab 打开文件夹：文件夹直接拖进来 / 文件 =&gt;打开文件夹 生成结构代码: html:5 + tab 或者 ! + tab (前提：必须是后缀.html文件) 快速复制一整行 ctrl + shift + d 或者把光标放在这一行，然后ctrl + c 再ctrl + v 删除一行： Ctrl+X 注释 : ctrl + / 注释：在代码中展示，页面渲染时会忽略，用户看不到，给程序员看。&lt;!-- 需要注释的内容--&gt; ヾ(๑╹◡╹)ﾉ”偷偷夸老师HTML的其他介绍（了解） 需要知道的几个小点 标签的关系 嵌套关系（父子关系） 123&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; 并列关系（兄弟关系） 12&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt; ヾ(๑╹◡╹)ﾉ”测试题请问下列哪个标签是错误的？（父子关系可以通过缩tab进表示） [ ] 1&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt; [ ] 1&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt; [ ] 1&lt;head&gt;&lt;title&gt;&lt;/head&gt;&lt;/title&gt; [ ] 1&lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt; HTML的标签分类双标签： 如：&lt;strong&gt;标签的内容&lt;/strong&gt; 语法：&lt;开始标签&gt; 标签内容 &lt;/结束标签&gt; 例：&lt;strong&gt;我要变粗&lt;/strong&gt; &lt;head&gt;&lt;/head&gt;…… 单标签： 如：&lt;br&gt; 或者 &lt;br/&gt; （两种写法都可以，HTML5使用的是&lt;br&gt;） 语法：&lt;标签名&gt; 例：&lt;br&gt; &lt;hr&gt; …… HTML中的标签（熟练） 标签其实就是用&lt;&gt;包裹的英文单词，所以同学们把对应的英文单词记住会使用即可 h 系列的标签 (Header) : 标题标签 例如：新闻网页的都会有一个新闻标题，效果就是用标题标签完成的 作用 : 给页面上的文字加上标题的语义 代码 : 123456&lt;h1&gt;1级标题&lt;/h1&gt;&lt;h2&gt;2级标题&lt;/h2&gt;&lt;h3&gt;3级标题&lt;/h3&gt;&lt;h4&gt;4级标题&lt;/h4&gt;&lt;h5&gt;5级标题&lt;/h5&gt;&lt;h6&gt;6级标题&lt;/h6&gt; 显示效果 : 文字都有变大，但是从h1~h6文字逐渐减小 文字都有加粗 独占一行 注意 : 一般网页中h1标签不能乱用，一般只会用在新闻的标题或者网页的logo上（h1标签对于seo：搜索引擎优化很重要） p 标签 (Paragraph) : 段落标签 例如：网页中的段落，就是通过段落标签来完成效果的 作用: 给页面上的一段文字加上段落语义 代码: &lt;p&gt;这是段落&lt;/p&gt; 特点： 段落与段落之间有间隙 独占一行 ヾ(๑╹◡╹)ﾉ”在新浪网页上查看元素hr 标签 (Horizontal Rule)：水平线标签 它就是在网页中显示一条水平线 作用: 在页面上显示一条横线 代码: &lt;hr&gt; ヾ(๑╹◡╹)ﾉ”可以写一个新闻页面了 br 标签 (break row=行)：换行标签作用：强制换行（代码中换行无效） 代码：&lt;br&gt; (4组)文本格式化标签 网页中有时候需要让文字有加粗、下划线、倾斜、删除线这样的效果，在没有学习css之前，咱们可以使用文本格式化标签来完成效果 作用: b: 加粗 u: 下划线 i: 倾斜 s: 删除线 建议不要使用, 因为这些标签没有语义 语义就是标签的含义，比如：标题标签的语义就是标题的含义，段落标签的语义就是段落的含义 作用: strong: 加粗 ins: 下划线 em: 倾斜 del: 删除线 可以使用 语义: 起强调加强语气作用 标签的属性（了解） 属性为 HTML 元素提供附加信息。（让同一种标签有不同的显示效果） 问题：如果想让两个水平线颜色不一样，可以怎么完成呢？ 可以通过添加颜色属性的方式来完成。 代码： 12&lt;hr color="red" width="400" /&gt;&lt;img src="images/1.jpg"&gt; 格式： 1&lt;标签名 属性名1="属性值1" 属性名2="属性值2" …&gt; 内容 &lt;/标签名&gt; 注意： 标签可以同时有多个属性，并且属性之间以空格隔开（可读性、规范） 标签名与属性名之间，必须以空格隔开！ 属性与属性之间没有顺序关系！ 每个标签上的属性并不是完全相同 提倡：尽量不使用样式属性。 图片标签（重点） 经常需要在网页中显示一张图片，此时可以通过图片标签来显示。 img 标签 (image的简写) ：图片标签作用： 在页面中显示一张图片 代码： &lt;img src=&quot;图像URL&quot; /&gt; 属性： src：图片的路径（必须） 告诉浏览器要显示的图片是哪一张 alt：替换文本 如果图片加载不出来，会显示这个属性中的文字 title：图片的标题 当鼠标悬停在图片上时，才会显示的文字 width：图片的宽度 如果只设置了图片的宽度，此时图片的高度会等比例缩放 height：图片的高度 如果只设置的图片的高度，此时图片的宽度会等比例缩放 注意点：一般只会设置width或者height中的一个，如果同时设置了宽度和高度，图片有可能拉伸变形！！ 路径问题（难点） 当前文件找目标文件的过程 当前文件：当前html页面 目标文件：要显示的图片 绝对路径 用的较少，可移植性差 比如：在个人电脑中，带有盘符的路径: C:\Users\ziyue\Desktop\代码\01.jpg 相对路径 用的较多，可移植性很好 同级目录同级目录：页面与图片同一级目录（类比于：我们俩都在大厅） 步骤： 直接写目标文件的名字即可 123&lt;img src=&quot;2.jpg&quot;&gt;或者&lt;img src=&quot;./2.jpg&quot;&gt; 下级目录下级目录：如果图片在同级目录的image文件夹里面（类比于：我在大厅，你在房间里） 步骤： 写目标文件所在文件夹的名字 进入文件夹 / 直接写目标文件的名字即可 1&lt;img src=&quot;image/1.jpg&quot;&gt; 上级目录上级目录：如果图片在页面的上一级目录（类比于：我在房间，你在大厅） 步骤： 去上一级目录 ../ 直接写目标文件的名字即可 1&lt;img src=”../2.jpg” &gt; ヾ(๑╹◡╹)ﾉ”路径例子]]></content>
      <tags>
        <tag>授课笔记</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5部分新表单效果]]></title>
    <url>%2F2019%2F02%2F14%2F4-html5%E9%83%A8%E5%88%86%E6%96%B0%E8%A1%A8%E5%8D%95%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[html5部分新表单效果 &lt;input type=&quot;url&quot; &gt; 输入一个网址，浏览器会自动校验网址的格式，格式不对不能提交！ 请输入一个网址： &lt;input type=&quot;email&quot;&gt; 输入一个邮箱，浏览器会自动校验邮箱格式，格式不对不能提交请输入邮箱：&lt;input type=&quot;date&quot;&gt; 选择一个日期，样式由浏览器默认实现请选择日期：&lt;input type=&quot;tel&quot;&gt; 输入手机号码（只有在移动端点击时会自动弹出数字输入框）请输入手机号码：&lt;input type=&quot;number&quot;&gt; 输入一个数字。请输入数字：]]></content>
      <tags>
        <tag>课堂测试demo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题设置方法]]></title>
    <url>%2F2019%2F01%2F25%2F2-next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[下载主题：通过clone最新版本 可以通过git pull 来下载，而不用再次下载压缩包替换（我还是用下载的方法的）在站点根目录 1git clone https://github.com/iissnan/hexo -theme-next themes/next 下载压缩包 Next版本的发布页面 选择下载 Download 区域下的 Source Code (zip) 到本地 解压重命名为next，放置到themes目录下（我是使用的方法） 启用主题打开 站点配置文件 _config.yml文件， 找到 theme 字段，并将其值更改为 next 1theme: next 在切换主题之后、验证之前， 最好使用 hexo clean 来清除 Hexo 的缓存 验证主题使用hexo s 可以测试主题是否能使用 主题设置主题特性目前 NexT 目前支持四种特性，通过修改Scheme可以选择特性，比如： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 Gemini -左侧网站信息及目录，块+片段结构布局 打开 主题配置文件 themes/next/_config.yml 文件，搜索 scheme 关键字。将你需用启用的 scheme 前面注释 # 去除即可。 12345# Schemes# scheme: Muse#scheme: Mist# scheme: Piscesscheme: Gemini 设置语言编辑 站点配置文件，将language设置成你需要的语言，我用的是简体中文： 1language: zh-Hans 目前NexT支持的语言如以下表所示： 设置菜单菜单配置包括三个部分， 第一是菜单项名称 第二是菜单项显示的文本 第三是菜单项对应的图标（NexT 使用的是 Font Awesome提供的图标） 编辑 主题配置文件，找到menu字段： 设定菜单项名称123456789101112menu: home: / || home #首页 archives: /archives/ || archive #归档 categories: /categories/ || th #分类 tags: /tags/ || tags #标签 about: /about/ || user #关于 #schedule: /schedule/ || calendar #日程表 #sitemap: /sitemap.xml || sitemap #站点地图 #commonweal: /404/ || heartbeat #公益404 # 需要哪个菜单就打开哪个菜单 # 属性值最后一个是相匹配的图标名 NexT默认的菜单项有（解注释即可显示）： 设置菜单的显示文本需要到next目录下的language/zh-Hans.yml（以简体中文为例）文件中，找到menu字段，设置如下（这一步一般是弄好的，不用管）： 12345678menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 设定菜单项图标 enable：控制是否显示图标，改为true则显示图标 之后的就是菜单分别使用哪个图标，可以更改，默认也可以用 12345678910menu_icons: enable: true # Icon Mapping. home: home archives: archive categories: th tags: tags about: user commonweal: heartbeat #search: search 设置侧栏修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分（我几乎没动） 是侧栏的位置， 是侧栏显示的时机 12345678910111213141516sidebar:# Sidebar Position #侧栏位置（只对Pisces | Gemini两种风格有效） position: left #靠左放置 #position: right #靠右放置# Sidebar Display #侧栏显示时机（只对Muse | Mist两种风格有效） #display: post #默认行为，在文章页面（拥有目录列表）时显示 display: always #在所有页面中都显示 #display: hide #在所有页面中都隐藏（可以手动展开） #display: remove #完全移除 offset: 12 #文章间距（只对Pisces | Gemini两种风格有效） b2t: false #返回顶部按钮（只对Pisces | Gemini两种风格有效） scrollpercent: true #返回顶部按钮的百分比 设置头像编辑 主题配置文件，修改avatar字段，值设置为头像图片的链接地址。 1avatar: http://example.com/avatar.png 也可以将图片放置到theme/source/images目录下，命名随意： 1avatar: /images/master.jpg #配置 设置作者和描述（hexo的操作中有以下内容）编辑 站点配置文件： 1234567# Sitetitle: #博客主页名字subtitle: #副标题（第二个名字）description: #描述author: #作者language: zh-Hanstimezone: #时区，可不设置 添加标签页面因为打开了菜单栏的选项，但是此时如果直接打开新添加的网页时，是打不开的显示page not found 此时需要添加对应的页面（必须通过hexo命令新建才行） 新建页面在站点的根目录中 1hexo new page tags #新建标签页面 输入命令后，在source文件夹里会生成一个tags文件夹，其中有个index.md文件。 设置页面类型修改index.md，添加type：tags 12345---title: tagsdate: 2016-11-15 19:10:05type: tags--- 然后标签页中会自动生成对应的几个标签 添加分类/关于页面和上面其实是一样的操作 123hexo new page categories/about -------------------------------------- 修改index.md文件中type类型分别为categories和about即可 在关于我页面中可以在index.md里写对应的自己的介绍 添加本地搜索功能（拓展）安装在站点根目录安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save 设置编辑 站点配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能： 123# Local searchlocal_search: enable: true #true开启 此时可以在网页中使用搜索功能 问题更新首页预览不显示全部，减少首页加载资源 进入hexo博客项目的 themes/next 目录 用文本编辑器打开 _config.yml 文件 搜索 auto_excerpt ,找到如下部分： auto_excerpt: enable设为false 12345# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: false length: 150 然后在md文档在需要阶段的地方加：&lt;!-- more --&gt; 会自动截断 在md文档中的多选框通过hexo解析之后变成无序列表 可以切换成代码模式，把两行之间的 &gt; 删除掉]]></content>
      <tags>
        <tag>操作方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo发布操作方法]]></title>
    <url>%2F2019%2F01%2F24%2F2-hexo%E5%8F%91%E5%B8%83%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[hexo操作方法（创建博客） 安装步骤 npm安装的时候，默认会访问npmjs.org这个网站，国外的，把镜像地址改成了淘宝的。 修改npm镜像地址 12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global 安装hexo 123npm install -g hexohexo -v # 查看hexo的版本信息 hexo操作（第一次操作需要有以下操作）初始化博客12# 新建一个目录 bloghexo init # 初始化 生成静态页面12hexo generate # 生成静态页面 hexo g # 生成静态页面（简写） 启动服务12hexo server # 启动服务hexo s # 启动服务(简写) 访问站点1http://localhost:4000/ # 通过这个地址就可以访问了 hexo常见命令 hexo n &#39;博客标题&#39;创建一篇新的博客 hexo g 生成博客 hexo d 发布博客 相关链接hexo中文文档 hexo next主题文档 hexo的next主题个性化教程:打造炫酷网站 博客内容格式设置（在md文件的最上方设置即可） 上传到git的文件是public文件夹的内容（不需要管） 自己的的md文件放到source/_posts文件夹中，注意：如果需要配置域名操作，需要在source文件夹中放CNAME文件（这个文件没有后缀名），内容写上自己的域名即可（ruiweitang.com） 123456789101112---title: 我的第一篇博客//(注意冒号后面有一个空格不能丢。)date: 2017-10-28 01:12:29 //指定博客的日期tags: - 学习 - 随笔 - 心情categories: - javascript---# 我是大标题这后面的内容就跟普通的markdown文件没什么区别 上传到git的发布配置安装hexo的部署工具npm install hexo-deployer-git --save 修改_config.yml文件 1234567891011121314151617# Sitetitle: 梦溪笔谈subtitle: description: 棠哥的测试博客keywords:author: 棠哥language: zh-CNtimezone:# 发布配置# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:ruiweitang/ruiweitang.github.io.git branch: master message: 之后的操作非常简单了（ 每次需要操作的以下几步） 把写好的md文件放到\source\_posts 文件夹中(或者直接hexo n)，md文件中的图片路径记得需要改为从根目录开始，如\images\，把md文件中的图片放到images文件夹中 在总的根目录打开命令台，放好md文件之后，输入两个命令几个 hexo g：生成静态页面 hexo d：发布博客（把静态页面发送到git上）]]></content>
      <tags>
        <tag>操作方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS面试题讲解]]></title>
    <url>%2F2018%2F05%2F20%2F3-JS%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[面试题1. js中使用 typeof 能得到的类型有哪些简答：undefined、string、number、boolean、object、function 就这么样就结束了吗？ 解析：1234567891011121314151617// 数据类型有哪些？// typeof 判断数据类型 把类型信息当作字符串返回 console.log(typeof undefined) //undefinedconsole.log(typeof 'abc') //stringconsole.log(typeof 123) //numberconsole.log(typeof NaN) //numberconsole.log(typeof true) //booleanconsole.log(typeof &#123;&#125;) //objectconsole.log(typeof []) //objectconsole.log(typeof null) //object(ES规范定死的)（比较地址前几位）--------------------------------console.log(typeof console.log) //functionfunction fn() &#123;&#125;console.log(typeof fn); //function// 总结： undefined/string/number/boolean/object/function 之前：六大数据类型 基本数据类型（简单数据类型） number 数值型(NaN) string 字符串 boolean 布尔型 undefined 未定义 null 空引用 引用数据类型（复杂数据类型） object 百度：1234567891011Null类型是第二个只有一个值的数据类型，这个特殊的值是null，从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回“object”的原因，如下面的例子所示： var car =null; alert(typeof null); //object（其实这是JavaScript最初实现的一个错误，后来被ECMAScript沿用下来）如果定义的变量准备在将来用户保存对象，那么最好将该变量初始化为null而不是其他值。这样一来，只要直接检查null值就可以知道相应的变量是否已经保存了一个对象的引用，如下面的例子： if(car != null)&#123; //对car执行某些操作 &#125;实际上，undefined值是派生自null值的，因此ECMA-262规定对他们的相等测试要返回true： alert(null == undefined) //true 这里，位于null和undefined之间的相等操作符（==）总是返回true，不过要注意的是，这个操作符出于比较的目的会转换其操作数。 尽管null和undefined有这样的关系，但它们的用途完全不同，如前所述，无论什么情况下都没有必要把一个变量的值显式地设置为undefined，可视同样的规则对null却不适用。换句话说，只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null值。这样做不仅可以体现null作为空对象指针的惯例，而且也有助于进一步区分null和undefined。 2. 何时使用 === 何时使用 ==简答：当仅需要比较值是否相等时，用==； 当需要比较类型和值时，用===。 就这么样就结束了吗？ 解析：123456789101112131415161718192021222324252627282930// 有何区别？// 会存在隐式转换。// 1.==// 如果 x 或 y 中有一个为 NaN，则返回 false；console.log(NaN == true); //false// 如果 x 与 y 皆为 null 或 undefined 中的一种类型，则返回 true（null == undefined // true）；否则返回 false（null == 0 // false）；console.log(null == undefined); //true(特殊情况)---------------------------------console.log(null == ''); //falseconsole.log(undefined == ''); //false// 如果 x,y 类型不一致，且 x,y 为 String、Number、Boolean 中的某一类型，则将 x,y 使用 Number 函数转化为 Number 类型再进行比较；console.log(true == '123'); //falseconsole.log(true == '1'); //trueconsole.log(false == '0'); //trueconsole.log(true == !0); //trueconsole.log([] == []); //falseconsole.log([] == ![]); //true 比较地址 ------------------------------------------------var a = c = [];var b = [];console.log(a == b); //falseconsole.log(a == !b); //trueconsole.log(a == c); //trueconsole.log(Boolean([]) == true); //trueconsole.log(Number([]) == 0); //trueconsole.log(Number(false) == 0); //true ####百度： 123如果 x 或 y 中有一个为 NaN，则返回 false；如果 x 与 y 皆为 null 或 undefined 中的一种类型，则返回 true（null == undefined // true）；否则返回 false（null == 0 // false）；如果 x,y 类型不一致，且 x,y 为 String、Number、Boolean 中的某一类型，则将 x,y 使用 Number 函数转化为 Number 类型再进行比较； 3. js变量按照存储方式分为哪些类型，并描述其特点简答：简单数据类型、复杂数据类型（值、引用）。 值类型：简单类型， 变量在存储简单类型的时候，存储的是值本身。 引用类型：复杂类型，变量在存储复杂类型的时候，只会存储这个对象的地址，并不会存储对象的值。 ？？？ 解析：123456789101112131415161718192021222324252627//简单类型(值类型)//复杂类型(引用类型)//在内存中如何存储 （内存） 内存（2G 4G 8G 16G） 硬盘空间（）//简单类型如何存储//变量在存储简单类型的时候，存储的直接就是值本身。var num = 11;var num2 = num;num2 = 22;console.log(num); //11console.log(num2); //22//变量在存储复杂类型的时候，不会把整个对象都存储起来，只会存这个对象的地址（引用）//对象会在内存中随机找一块内存存储起来.var obj = &#123; name: "zs", age: 18&#125;;var obj2 = obj; //把obj的值赋值给obj2（地址）obj2.name = "ls";console.log(obj.name); //lsconsole.log(obj2.name); //ls//值类型：简单类型， 因为变量在存储简单类型的时候，存储的是值本身。//引用类型：复杂类型，变量在存储复杂类型的时候，只会存储这个对象的地址，并不会存储对象的值。var obj = &#123;&#125;;var obj2 = obj; //仅仅是地址赋值了一份，所以两个变量都指向了同一个地址。 4. 数组的常用api有哪些简答：push() 、pop() 、unshift() 、shift()；es6：filter()、 forEach()、 some() 、every() 、map()等 ？？？ 解析：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889// push() pop() unshift() shift()// es6：filter() forEach() some() every() map()等// 注意// 1. forEach存在的问题，循环停不下来// 2. filter、map 方法的使用var arr = [12, 34, 56, 89, 78, 23, 45, 19];//filter方法返回一个由符合函数要求的元素组成的新数组-------------------------------------------// 1. 要求：把arr中所有大于30的元素放到一个新数组中。// 原始方法：var newArr = [];for (var i = 0; i &lt; arr.length; i++) &#123; if (arr[i] &gt; 30) &#123; newArr.push(arr[i]) &#125;&#125;// API的方法：//调用数组的filter方法，添加过滤方法，符合规则的元素会被存放到新数组里//element:表示数组里的元素;index:表示索引值;array:表示调用filter方法的数组。var newArr = arr.filter(function (element, index, array) &#123; return element &gt; 30;&#125;);console.log(arr); //filter方法不会改变原数组里的数据[12,34,56,89,78,23,45,19];console.log(newArr); //新数组里保存符合要求的元素[34, 56, 89, 78, 45]//map方法让数组中的每个元素都调用一次提供的函数，将调用的后的结果存放到一个新数组里并返回。------------// 2. 要求：件数组中的每一个元素后面添加一个字符串'0'放到一个新数组中。// 原始方法var newArr = [];for (var i = 0; i &lt; arr.length; i++) &#123; newArr.push(arr[i] + '0');&#125;// API的方法var newArr = arr.map(function (element, index, array) &#123; //在数组里的每一个元素的最后面都添加一个字符串"0" return element + "0";&#125;);console.log(newArr); //["120", "340", "560", "890", "780", "230", "450", "190"]console.log(arr); //map方法不会改变原数组里的数据 [12,34,56,89,78,23,45,19]//forEach() 方法对数组的每个元素执行一次提供的函数,且这个函数没有返回值------------------------------// 3.要求：打印每一个元素// 原始方法for (var i = 0; i &lt; arr.length; i++) &#123; console.log("第" + i + "个元素是" + arr[i]);&#125;// API方法var result = arr.forEach(function (element, index, array) &#123; //数组里的每一个元素都会被打印 console.log("第" + index + "个元素是" + element);&#125;);console.log(result); //函数没有返回值//some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试.----------------------------------// 4.要求：判断数组中是否有元素大于50// 原始方法for (var i = 0; i &lt; arr.length; i++) &#123; if (arr[i] &gt; 50) &#123; result = true; break; &#125;&#125;// API方法var result = arr.some(function (element, index, array) &#123; //数组里否有一些元素大于50.只要有一个元素大于，就返回true console.log(element); //12,34,56 return element &gt; 50;&#125;);console.log(result); //true//every() 方法测试数组的所有元素是否都通过了指定函数的测试。----------------------------------------// 5.要求：判断数组中的每个元素是否都大于50// 原始方法var result = true;for (var i = 0; i &lt; arr.length; i++) &#123; if (arr[i] &lt; 50) &#123; result = false; break; &#125;&#125;// API方法result = arr.every(function (element, index, array) &#123; //数组里是否每一个元素都大于50.只有在所有的数都大于50时，才返回true console.log(element); return element &gt; 50;&#125;);console.log(result); //false 5. 如何准确判断一个变量是数组类型简答：可以通过 instanceof 来判断， 用arr instanceof Array; 。 ？？？ 解析：123456789// instanceof 操作符// 用来判断引用数据类型属于哪个构造函数的方法// f instanceof Foo 的判断逻辑：构造函数的原型对象，是否在实例对象的原型链上// Foo.prototype 是否在 实例f的原型链上var arr = [];arr instanceof Array; // truetypeof arr; // object,, typeof 只能获取简单数据的类型 之前：js基础阶段对instanceof作用的描述 : 判断一个对象是否是某个构造函数的实例 现在我们学习了原型,也学习了原型链,所以我们现在可以更严谨的描述他的作用: 判断一个函数的原型对象,是否在实例对象的原型链上 6. 描述 new 一个对象的过程简答：12341. 创建一个对象；2. this 指向这个新创建的对象；3. 执行构造函数的代码；4. 返回this。 ？？？（这次还说吗？） 7. 说一下变量提升的理解?简答： 变量定义、函数声明提升（同名提升问题） 因为在es6之前没有块级作用域，早起提出一个预解析的方案，但是实际使用的时候，并没有想的那么好。 es6中的let和const可以拥有块级作用域。 解析： 声明提升 1234567891011121314151617181920212223242526272829303132// 1.变量提升var a;console.log(a); // undefinedvar a = 100;// 2.函数声明提升function fn(name)&#123; var name='zs'; var age; age = 20; console.log(name, age); //zs 、20&#125;fn('zs');//3.变量与函数function a() &#123; console.log('我是函数');&#125;console.log(a);var a = 10;console.log(a);// 声明提升的范围：全局作用域 &amp;&amp; 函数内部// 注意：函数声明和函数表达式的区别var a;console.log(a);var a=10;var a=function()&#123; console.log('我是函数');&#125;console.log(a); 作用域（es6中的let和const） 1234567891011121314151617181920212223242526//es6之前// 没有块级作用域&#123;&#125;，只有全局作用域和函数作用域（词法作用域）// 无块级作用域(如果有块级作用域)console.log(a); // undefined --&gt; 没有块级作用域，变量提升到全局作用域if(true)&#123; var a = 'zs'; // 提升到if外面（如果是let呢）&#125;console.log(a); // zs// 函数作用域和全局作用域var a = 100;function fn()&#123; var a = 200; console.log('fn ',a); // 200&#125;console.log('global ',a); // 100fn();// 作用域链// 作用域链是在函数定义的时候确定下来的var a = 100;function fn()&#123; var b = 200; console.log(a); // 100 --&gt; 当前作用域没有声明变量a，去声明时父级作用域中取值 console.log(b); // 200&#125; 8. 说明 this 几种不同的使用场景?简答：构造函数（new出来的过程）、对象方法、普通函数、借用方法模式（上下文调用模式） 解析：123456789101112131415161718192021222324252627282930313233343536373839404142434445// this的指向要在函数执行的时候才能确定，函数定义时是无法确认（就是只看函数是如何被调用的，而不看函数是如何定义的）// 1. 作为普通函数执行function fn()&#123; console.log(this === window);&#125;fn(); // true// 2. 对象调用模式var obj = &#123; name: 'A', printName: function()&#123; console.log(this.name) &#125;&#125;;obj.printName(); // A// 3. 构造函数new的时候（this指向的变化）function Foo(name)&#123; this.name = name; console.log(this);&#125;var f = new Foo('zs');// f// 4. 借用方法（上下文调用模式）function fn(name)&#123; console.log(name); console.log(this);&#125;fn.call(&#123;x:100&#125;, 'zs');// zs// &#123;x:100&#125;// 综合：var a = &#123; name: 'A', fn: function()&#123; console.log(this); &#125;&#125;;a.fn(); // ？？a.fn.call(&#123;name: 'B'&#125;); // B --&gt; fn函数内部的this指向&#123;name: 'B'&#125;var fn2 = a.fn;fn2(); // fn2函数内部的this指向window，不看函数是如何定义的，只看函数是如何被调用的 9. 如何理解作用域?简答： es6之前的作用域只有全局作用域和函数作用域（词法作用域） es6出现了块级作用域（{}） 作用域出现是历史原因 解析：1234567891011121314151617181920212223242526//es6之前// 没有块级作用域，只有全局作用域和函数作用域（词法作用域）// 无块级作用域(如果有块级作用域)console.log(a); // undefined --&gt; 没有块级作用域，变量提升到全局作用域if(true)&#123; var a = 'zs'; // 提升到if外面&#125;console.log(a); // zs// 函数作用域和全局作用域var a = 100;function fn()&#123; var a = 200; console.log('fn ',a); // 200&#125;console.log('global ',a); // 100fn();// 作用域链// 作用域链是在函数定义的时候确定下来的var a = 100;function fn()&#123; var b = 200; console.log(a); // 100 --&gt; 当前作用域没有声明变量a，去声明时父级作用域中取值 console.log(b); // 200&#125; 10. 实际开发中闭包的应用?简答： 私有化数据。 数据保持。 解析：1234567891011121314151617function main()&#123; var money = 10000; //放到局部作用中,防止全局变量污染(私有化数据) return &#123; queryMoney : function()&#123; return money; &#125;, payMoney : function(num)&#123; money -= num; &#125;, addMoney : function(num)&#123; money += num; &#125; &#125;&#125;var moneyManger = main(); // 通过moneyManger 可以获取到局部的变量money 缺点： 由于内部的函数使用了外部函数的变量,导致外部这个函数无法被回收掉.如果代码中大量的存在闭包,可能会导致内存泄露 (不要刻意使用闭包)。 笔试题1.打印结果是什么？123456789101112console.log(1);setTimeout(function()&#123; console.log(2);&#125;, 0);console.log(3);setTimeout(function()&#123; console.log(4);&#125;, 1000);console.log(5);// print: ？？？堆栈。。。 2. 打印结果是什么？123456789function add(x, y) &#123; console.log(x + y);&#125;function sub(x, y) &#123; console.log(x - y)&#125;add.call(sub, 5, 3);// 打印些什么 3.打印结果是什么？1234567891011121314151617181920// 1. (function(foo)&#123; console.log(foo.bar); // 返回结果？？？&#125;)(&#123; foo: &#123; bar: 1 &#125; &#125;);// 2.(function f(f)&#123; console.log(f()); // 返回结果？？？&#125;)(function()&#123; return 1; &#125;);// 3.var foo = &#123; bar: function() &#123; return this; &#125;, baz: 1&#125;;(function()&#123; console.log(arguments[0]()); // 返回结果？？？&#125;)(foo.bar); ##4. 结果是什么？ 123456789101112131415161718192021// 1、考察原型链// 下面程序执行后弹出什么样的结果?function fn() &#123; this.a = 0; this.b = function() &#123; alert(this.a) &#125;&#125;fn.prototype = &#123; b: function() &#123; this.a = 20; alert(this.a); &#125;, c: function() &#123; this.a = 30; alert(this.a); &#125;&#125;var myfn = new fn();myfn.b(); // ???myfn.c(); // ??? 5. 统计一个字符串中每个字符出现的次数123456789101112var str = 'asdfssaaasasasasaa';var arr = str.split('');var result = &#123;&#125;;arr.forEach(function (e, i, a) &#123; if (result[e] == undefined) &#123; result[e] = 1; &#125; else &#123; result[e]++; &#125;&#125;)console.log(result); 6. 获取随机数，要求是长度一致的字符串格式1234567891011// Math.random() 生成[0,1)的随机数，小数点后面数值个数不定function getRanLeng()&#123; // 要求是每次获取的长度是一致的 // 所以可以在随机数后面加上一定位数的字符串的00000 防止生成的是1位数，务必多余9位，越多越好 var random = Math.random() + '0000000000'; return random.slice(0, 10);&#125;for(var i = 0; i &lt; 100; i++)&#123; console.log(getRanLeng())&#125; 7. 去掉一个数组的重复元素123456789var arr = [1, 2, 3, 1, 43, 12, 12, 1, 2, 3, 4, 5];var result=[];for (var i=0;i&lt;arr.length;i++)&#123; if(result.indexOf(arr[i])==-1)&#123; result.push(arr[i]); &#125;&#125;console.log(result) 8. 完成下列要求,函数返回扁平化后的数组如：[1, [2, [ [3, 4], 5], 6]] =&gt; [1, 2, 3, 4, 5, 6]。123456789101112131415var arr = [1, [2, [ [3, 4], 5], 6]];//用了什么方法？用了什么语法？不要纠结语法，但是要会说。var newArr=[];function fn() &#123; for(var i=0;i&lt;arguments.length;i++)&#123; if(arguments[i] instanceof Array)&#123; fn.apply(null,arguments[i]); &#125;else&#123; newArr.push(arguments[i]); &#125; &#125;&#125;fn.apply(null,arr);console.log(newArr); 9.求数组中：最小的x坐标、最大的y坐标12345678910111213141516171819202122var arr = [ [1, 2], [22, 55], [66, 99], [-11, -100], [88, 22], [101, 89], [99, 98], [21, 77]]//要求：求数组中 最小的x坐标 最大的y坐标// forEach map some every filter// map会返回一个新数组var min = Math.min.apply(null, arr.map(function (e) &#123; return e[0]&#125;));var max = Math.max.apply(null, arr.map(function (e) &#123; return e[1]; //以为是每一项的第二个才是y&#125;));console.log(min,max); 拓展容易错的面试题]]></content>
      <tags>
        <tag>授课笔记简略版</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习笔记]]></title>
    <url>%2F2018%2F05%2F05%2F3-git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[学习目的 在实际工作开发中，并不是一个人敲代码，需要团队的协作，用版本控制工具会提高我们程序员的项目开发效率。所以目的之一就是让大家在初次搭建项目的时候就能熟悉以后工作时候的环境，培养一个好的团队合作习惯。 自己项目可以试着推送到自己的git上，算是自己成长的积累。 面试有的时候会要求在git上有自己的作品，有自己的项目。作为一个有多年工作经验的程序员，很多都会在git上传自己的作品。 学习要求 了解git是什么？ 使用git的作用是什么？ 会使用常用的git命令。 能将自己写的项目推到远程仓库中。 git的安装注意：1. 不要安装在中文目录 ：以后安装软件都要注意这一点，很多软件安装路径存在中文会出错。 ​ 2. 不要使用桌面管理软件：使用桌面管理软件以后，右键出现的菜单会被管理，会隐藏我们要使用的功能按钮。 安装很简单，一直下一步即可。在任意的目录下右键，能够出现 Git GUI Here 和 Git Bash Here ，表示安装成功了。 例子 当我们做甲项目时，做到了一半。 此时Boss说你手头的项目先停一停，先做乙项目，马上要上线了，此时你停下手头的事开始做乙项目。 当乙项目做到一半的时候，Boss又说你做甲项目去吧，乙项目延后了，这时候你又去做甲项目了。 但是甲项目已经被你同事做了一大半了，此时你很高兴，然后接着往后做。（你们此时怎么配合） 当甲项目做了一大半的时候，万恶项目经理说你们做的不好，要你从你之前写到一半的地方重新写。（你怎么办） 当你甲项目改了到一大半的时候，此时万恶的产品经理又说客户的需求改了，之前写的就很好，要你复原之前的项目（。。。） 。。。。。。。。 告辞！（我要删库！！）（项目经理怎么办） 在实例开发过程中，与团队的配合协作往往会花很多的时间与经历，并且每一次手动保存很耗时间和精力，为了将我们的精力都用在开发上，现在公司开发项目都会用到版本控制工具。 为什么要有版本控制系统？ 在开发过程中，经常需要对一个文件进行修改甚至删除，但是我们又希望能够保存这个文件的历史记录，如果通过备份，那么管理起来会非常的复杂和繁琐。 在多人开发时，如果需要多人合作开发一个页面，那么修改以及合并也会非常的棘手。容易出现冲突。 ##什么是版本控制系统？ 版本控制系统（Version Control System）:是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。版本控制系统不仅可以应用于软件源代码的文本文件，而且可以对任何类型的文件进行版本控制。 常见的版本控制系统有：cvs、svn、git 版本控制系统的分类本地版本控制系统本地版本控制系统就是在一台机器上，记录版本的不同变化，保证内容不会丢失。 缺点：如果多人开发，每个人都在不同的系统和电脑上开发，没办法协同工作。 集中式版本控制系统svn/cvs都是集中式的版本控制系统。 需要一个中央服务器来管理代码的的版本和备份。 所有的用户电脑都是从中央服务器获取代码或者是将本地的代码提交到中央服务器。 依赖与网络环境，如果连不上中央服务器，就无法提交和获取代码。 如果中央服务器宕机，所有人都无法工作。 分布式版本控制系统git是分布式的版本控制系统。 需要一台服务器作为代码仓库。 每个用户电脑都是一个服务器（代码仓库），并且和代码仓库是镜像的，用户修改和获取代码都是提交到自己的服务器当中。 不需要网络就可以进行工作。 当连接网络时，用户可以选择将自己的服务器与代码仓库进行同步。 git介绍 Git是一款免费、开源的分布式 版本控制系统 ，用于敏捷高效地处理任何或小或大的项目。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 git的使用方式 git是用法方式主要有两种。 git gui，即图形化界面的方式。 git bash，（cmi）命令行的方式。 给window用户的忠告：git的命令必须使用linux风格的shell来运行Git命令，不能使用window风格的shell运行git命令 在任意文件夹中，都可以使用右键，通过git bash here打开命令行窗口，此时的路径就是当前目录。 窗口上右键，通过options–&gt;Text–&gt;select可以调整字体的大小。 bash入门（了解）bash是许多linux系统默认的shell(命令行工具)。 cmd和powershell是window系统默认的shell(命令行工具)。 二者的功能都一样，通过命令行来操作计算机的功能。 为什么要学习bash？ 必须使用linux风格的shell来运行git命令 工作过程中，项目都是部署在linux系统中，了解一些常用的bash命令也是有必要的。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# cd 改变目录 （change directory）cd images #进入images文件夹cd .. #进入上一层目录cd ~ #进入用户根目录# tab 自动补全，当我们输命令或者目录很长时，可以使用tab键进行自动补全。# 按两次tab，会把所有符合要求的内容都列出来。# pwd 打印当前目录的路径 （print work directory）pwd# ls 展示当前目录列表（list）ls # 展示当前目录ls -a # 展示全部内容，包括隐藏文件ls -l # 以列表的形式展示内容# clear reset清屏clear # 清除屏幕内容，滚动条，保留了历史reset # 重置，历史记录没了。# mkdir 创建一个文件夹 （make directory）mkdir css # 创建一个css的文件夹mkdir css img js # 创建了三个文件夹# rmdir 删除一个空的文件夹（没啥用）rmdir img # 删除文件夹# touch 创建文件touch index.html #创建了一个index.html文件touch css/index.css # 在css目录下创建idnex.css文件# rm 删除一个文件获取文件夹rm index.html # 删除index.html文件rm -r css # 递归删除一个文件夹# mv 移动文件（move）mv index.html js # 将html文件移动到js文件夹中mv index.html index2.html # 将index.html重命名为index2.html# cp 复制文件（cp）cp index.html index2.html # 复制index.html文件，命名为index2.htmlcp -r css css02 # 如果复制的是文件夹，需要使用-r参数。# cat 查看文件全部内容cat index.html 试一试： 在桌面新建一个 test文件夹 在test文件夹中打开git命令窗口 创建 css images js 三个文件夹 新建index.html文件，在css文件中新建index.css文件， 在images中新建index.png文件，在js文件中新建index.js 把index.html重命名为index2.html 把index.css文件挪到js文件中 git初体验在第一次使用的时候，需要配置你的用户邮箱和用户名称，这两条配置是很重要的，每次提交git代码都会引用这两条信息，记录了谁提交了代码，会永久的记录在历史记录中。 123456789# git config user.name 你的目标用户名# git config user.email 你的目标邮箱名# 使用--global参数，配置全局的用户名和邮箱，只需要配置一次即可。git config --global user.name rwtgit config --global user.email 1219984262@qq.com# 查看配置信息git config --list 初始化git仓库git init 查看当前git仓库的状态git status 将文件添加到git的暂存区git add 文件名 将文件由暂存区提交到仓库区git commit -m &#39;提交说明&#39; 查看提交日子git log 1234567891011121314151617# 要对某个项目使用git进行管理，需要使用git init命令初始化git仓库# 会在当前目录生成一个隐藏文件夹 .git 不要去修改这个文件夹下的任意东西。git init# 查看git文件的状态 ,如果此时新建一个文件，那么这个文件是没有被追踪的，说白了git还没有管理这个新建的文件git status # 告诉git开始对index.html文件进行追踪， git会在暂存区中存储这个文件git add index.html# 让文件由暂存区提交到仓库区。此时文件才真正的被git管理了。# 如果提交日志乱码，右键--&gt;options--&gt;Text--&gt;将编码改成utf-8git commit -m '第一次提交'# 查看提交日志git log git的三个区工作区、暂存区、本地仓库区 工作区：我们书写代码的地方，工作的目录就叫工作区。 暂存区：使用add命令，在.git目录中的一个索引文件，记录修改的文件 本地仓库区：将保存在暂存区域的内容永久转储到 Git 仓库中，生成版本号。生成版本号之后，就可以任何的回退到某一个具体的版本。 git命令详解git add(重点) 作用：让git追踪一个新的文件，并且将文件由 工作区 添加到 暂存区，暂存文件 命令：git add 文件名/目录名 例如： git add index.html git add --all 或者 git add -A 获取git add .（简写） 添加所有文件 git add a.txt b.txt 同时添加两个文件 git add *.js 添加当前目录下的所有js文件 git add css/添加css目录下所有的文件 git checkout 文件名 作用：暂存区的内容恢复到工作区。 git checkout 1.txt 将暂存区中1.txt文件恢复到工作区 git commit（重点） 作用：将文件由 暂存区 添加到 仓库区，生成版本号（历史记录，以后可以回退到某一个版本号） git commit -m &quot;提交说明&quot; git status 作用：查看文件的状态 命令：git status 命令：git stauts -s 简化日志输出格式 git log 作用：查看提交日志 git log 只能查看当前head以及以前的日志 git log --oneline 简洁的日志信息,如果提交的日志非常多了 git reflog 查看所有的提交变更日志 git reset 作用：版本回退，将代码恢复到已经提交的某一个版本中。 git reset --hard 版本号 将代码回退到某个指定的版本(版本号只要有前几位即可) git reset --hard head~1将版本回退到上一次提交 ~1:上一次提交 ~2:上上次提交 ~0:当前提交 远程仓库所有的程序员都可以通过远程仓库来进行版本的共享，达到所有人的代码一致的效果。 githubgit与github没有直接的关系。 git是一个版本控制工具。 github是一个代码托管平台，是git的一个远程代码仓库。 将来工作时，公司会有自己的代码仓库。 github官网 开源中国-git 121. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。 在github上创建一个项目，获取到仓库的地址。然后就可以将本地的代码推送到远程的服务器上。 注册步骤： 打开github官网： 填写信息，进行注册： 登录： 远程仓库相关命令git push 作用：将本地仓库中代码提交到远程仓库 git push 仓库地址 master 在代码提交到远程仓库，注意master分支必须写，不能省略 例子：git push https://github.com/ruiweitang/gitStudy.git master 如果第一次使用，需要填写github的用户名和密码 在git push之前，先git pull: 保证先把远程仓库代码先拉取到本地 git pull 作用：将远程的代码下载到本地 git pull 代码地址 master 将远程的代码中master分支下载到本地 通常在push前，需要先pull一次。 git clone 作用：克隆远程仓库的代码到本地 git clone [远程仓库地址] git clone https://github.com/ruiweitang/gitStudy.git会在本地新建一个gitStudy文件夹，在gitStudy中包含了一个.git目录，用于保存所有的版本记录，同时gitStudy文件中还有最新的代码，你可以直接进行后续的开发和使用。 git克隆默认会使用远程仓库的项目名字，也可以自己指定。需要是使用以下命令：git clone [远程仓库地址] [本地项目名]（gitStudy-&gt;自己想要的名字） git remote每次push和pull操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名 git remote add 仓库别名 仓库地址 使用仓库别名替代仓库地址。仓库别名相当于一个js变量，仓库地址就是对应的值。 git remote add rwt https://github.com/ruiweitang/gitStudy.git 设置了一个rwt的仓库别名，以后push和pull都可以不用仓库地址，而用rwt，origin git remote remove rwt 删除rwt这个仓库别名。 git remote 查看所有的仓库别名 如果使用了git clone命令从远程仓库获取下来的，那么这个本地仓库会自动添加一个 origin的远程地址，指向的就是克隆的远程地址。 SSH免密码登录git支持多种数据传输协议： https协议：https://github.com/ruiweitang/gitStudy.git 需要输入用户名和密码 ssh协议：`git@github.com:ruiweitang/gitStudy.git` 可以配置免密码登录 每次push或者pull代码，如果使用https协议，那么都需要输入用户名和密码进行身份的确认，非常麻烦。 github为了账户的安全，需要对每一次push请求都要验证用户的身份，只有合法的用户才可以push 使用ssh协议，配置ssh免密码，可以做到免密码往github推送代码 SSH免密码登录配置注意：这些命令需要在bash中敲 创建SSH Key：ssh-keygen -t rsa 在文件路径 C:\用户\当前用户名\ 找到 .ssh 文件夹 文件夹中有两个文件： 私钥：id_rsa 公钥：id_rsa.pub 在 github -&gt; settings -&gt; SSH and GPG keys页面中，新创建SSH key 粘贴 公钥 id_rsa.pub 内容到对应文本框中 在github中新建仓库或者使用现在仓库，拿到`git@github.com:用户名/仓库名.git` 此后，再次SSH方式与github“通信”，不用输入密码确认身份了]]></content>
      <tags>
        <tag>操作方法</tag>
        <tag>授课笔记简略版</tag>
      </tags>
  </entry>
</search>
